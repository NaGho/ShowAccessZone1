
	var saveWholeTable;
	var zoomOutDone=false;
	var firstZoomIn=false;
	var maxLimit=5;
	var minLimit=2;
	var innerSplitOffsetWidth=2;
	var innerSplitOffsetHeight=2;
	var innerDivLeftCounter=0;
	var allTCPportStates=[];
	var allTCPportSrc=[];
	var allTCPportDst=[];
	var TCPcolorAcceptDeny=[];
	var allColors=[];
	var WidthScale=1/100;
	var heightScale=10;
	var upHeaderHeight=50;
	var leftHeaderWidth=120;
	var NormalFontSizeRows=0.0003;
	var NormalFontSizeCols=0.0003;
	var widthLimit=20;
	var heightLimit=20;
	var wrapper=[];
	var realIPpairsPermitSrc=[];
	var realIPpairsPermitDst=[];
	var portPairsFirst=[];
	var portPairsSecond=[];
	var positionTop;
	var positionLeft;
	var groups="	{0: ['200004-120015'],	 1: ['800001-120015', '400001-920009', '100015-1520009', '800001-920009', '1300010-920008', '800001-420001', '400001-1520009', '900009-1320011', '900030-1320010', '400001-1120009', '400001-120015', '800001-1520009', '900008-1320010', '800001-1320011', '800001-520004', '400001-1320011', '1500009-120015', '400001-520004', '400001-820001', '800001-1120009', '1300010-920030'],	 2: ['1300011-420001', '1500009-420001', '100015-420001', '500004-420001', '1100009-420001', '900009-420001'],	 3: ['1300011-820001', '1500009-820001', '900009-820001', '500004-820001', '1100009-820001', '100015-820001'],	 4: ['900009-1120009', '1500009-1120009', '500004-1120009', '1300011-1120009', '100015-1120009', '200004-1120009'],	 5: ['200004-520004', '1100009-520004', '1300011-520004', '900009-520004', '100015-520004', '1500009-520004'],	 6: ['100015-1320011', '1500009-1320011', '200004-1320011', '500004-1320011', '1100009-1320011'],	 7: ['200004-1520009', '900009-1520009', '1100009-1520009', '500004-1520009', '1300011-1520009'],	 8: ['1300010-1520005', '900030-1520005', '900008-1520005'],	 9: ['1300011-920009'],	 10: ['900008-920030', '1500005-920030'],	 11: ['900009-220004', '1500009-220004', '1100009-220004'],	 12: ['800001-220004'],	 13: ['1300011-220004', '100015-220004', '500004-220004'],	 14: ['200004-920009', '1100009-920009', '1500009-920009', '500004-920009', '100015-920009'],	 15: ['200004-820001'],	 16: ['900009-120015', '500004-120015', '1300011-120015', '1100009-120015'],	 17: ['900030-920008'],	 18: ['200004-420001'],	 19: ['400001-220004'],	 20: ['1500005-1320010'],	 21: ['1500005-920008']}";
	var all_deny_src_T="{'800001-120015': {}, '500004-220004': {(46849L, 1024L): [(593L, 1L)]}, '1300011-420001': {(71465L, 1024L): [(21217L, 64L), (42421L, 1L)], (72489L, 512L): [(21217L, 64L), (42421L, 1L)]}, '100015-920009': {}, '1100009-1520009': {(7681L, 256L): [(14377L, 256L)], (20658L, 512L): [(1442L, 1L)], (19634L, 256L): [(11906L, 1L), (12074L, 1L)], (23218L, 256L): [(3745L, 256L)], (5889L, 256L): [(12074L, 1L)], (193458L, 256L): [(12074L, 1L)], 'pooh': [(14378L, 1L), (14377L, 256L)], (344786258L, 512L): [(11906L, 1L), (12074L, 1L)], (276306L, 262144L): [(14378L, 1L), (14377L, 256L)], (5121L, 512L): [(12074L, 1L)], (21426L, 256L): [(12074L, 1L)], (4097L, 256L): [(11906L, 1L), (12074L, 1L)]}, '900009-1120009': {}, '200004-520004': {}, '400001-820001': {}, '200004-1520009': {(281170L, 256L): [(3745L, 256L)], (278610L, 512L): [(1442L, 1L)], (261202L, 262144L): [(14378L, 1L), (14377L, 256L)], (279378L, 256L): [(12074L, 1L)], (17409L, 256L): [(14377L, 256L)], (474194L, 256L): [(12074L, 1L)], (277586L, 256L): [(11906L, 1L), (12074L, 1L)], (345277522L, 512L): [(11906L, 1L), (12074L, 1L)], (15617L, 256L): [(12074L, 1L)], (13825L, 256L): [(11906L, 1L), (12074L, 1L)], 'pooh': [(14378L, 1L), (14377L, 256L)], (14849L, 512L): [(12074L, 1L)]}, '1100009-1320011': {},		 '200004-120015': {}, '1300010-1520005': {(71425L, 1024L): [(1635L, 256L), (1891L, 256L)], (72449L, 512L): [(1635L, 256L), (1891L, 256L)]}, '900009-120015': {}, '1300010-920030': {}, '900009-220004': {}, '400001-920009': {}, '1100009-420001': {}, '100015-1520009': {}, '1500009-1320011': {(2801L, 1L): [(77705L, 8L)]}, '100015-420001': {}, '1500009-220004': {(2801L, 1L): [(593L, 1L)]}, '800001-220004': {}, '400001-1520009': {}, '1100009-820001': {}, '1300011-220004': {(71465L, 1024L): [(593L, 1L)], (72489L, 512L): [(593L, 1L)]}, '900030-1520005': {(1965L, 1L): [(1635L, 256L), (1891L, 256L)]}, '500004-1520009': {(2703379969L, 256L): [(14377L, 256L)], (46849L, 1024L): [(21305L, 512L), (21817L, 256L)], (352001L, 256L): [(11906L, 1L), (12074L, 1L)], (353793L, 256L): [(12074L, 1L)], (2703378177L, 256L): [(12074L, 1L)], (2703376385L, 256L): [(11906L, 1L), (12074L, 1L)], (548609L, 256L): [(12074L, 1L)], (335617L, 262144L): [(14378L, 1L), (14377L, 256L)], (2703360001L, 262144L): [(14378L, 1L), (14377L, 256L)], (355585L, 256L): [(3745L, 256L)], (345351937L, 512L): [(11906L, 1L), (12074L, 1L)], (2703377409L, 512L): [(12074L, 1L)], (3214337, 256): [(11906L, 1L), (12074L, 1L)], (353025L, 512L): [(1442L, 1L)]}, '200004-820001': {}, 		 '500004-1320011': {(46849L, 1024L): [(77705L, 8L)]}, '1100009-520004': {}, '900009-1520009': {(9729L, 256L): [(12074L, 1L)], (344786578L, 512L): [(11906L, 1L), (12074L, 1L)], (24994L, 512L): [(1442L, 1L)], (23970L, 256L): [(11906L, 1L), (12074L, 1L)], (256402L, 262144L): [(14378L, 1L), (14377L, 256L)], (71010L, 256L): [(12074L, 1L)], 'pooh': [(14378L, 1L), (14377L, 256L)], (27554L, 256L): [(3745L, 256L)], (11521L, 256L): [(14377L, 256L)], (7937L, 256L): [(11906L, 1L), (12074L, 1L)], (8961L, 512L): [(12074L, 1L)], (25762L, 256L): [(12074L, 1L)]}, '1300010-920008': {}, '800001-420001': {}, '1300011-920009': {(71465L, 1024L): [(15617L, 64L)], (72489L, 512L): [(15617L, 64L)]}, '1500009-120015': {}, '900009-1320011': {}, '900030-1320010': {}, '900030-920008': {(1965L, 1L): [(7818L, 4L), (7822L, 4L)]}, '1300011-520004': {(71465L, 1024L): [(47521L, 32L), (47553L, 32L)], (72489L, 512L): [(47521L, 32L), (47553L, 32L)]}, '800001-520004': {}, '900008-1520005': {(6061L, 1L): [(1635L, 256L), (1891L, 256L)]}, '500004-820001': {(46849L, 1024L): [(27141L, 1L)]}, '1500009-1120009': {(2801L, 1L): [(24498L, 256L)]}, '400001-220004': {}, '400001-1120009': {}, '900009-420001': {}, '1100009-220004': {}, '400001-120015': {}, '900009-820001': {}, '1500005-920030': {}, '800001-1520009': {}, '1500005-920008': {}, '500004-120015': {(46849L, 1024L): [(94173L, 512L), (94685L, 256L)]}, '500004-920009': {(46849L, 1024L): [(25650L, 32L), (25682L, 64L)]}, '1500009-420001': {(2801L, 1L): [(21217L, 64L), (42421L, 1L)]}, '800001-1320011': {}, '200004-420001': {}, '900009-520004': {}, '1300011-820001': {(71465L, 1024L): [(27141L, 1L)], (72489L, 512L): [(27141L, 1L)]}, '1300011-1120009': {(71465L, 1024L): [(24498L, 256L)], (72489L, 512L): [(24498L, 256L)]}, '900008-920030': {(6061L, 1L): [(3185L, 16L)]}, '500004-1120009': {(46849L, 1024L): [(24498L, 256L)]}, '1300011-120015': {(71465L, 1024L): [(94173L, 512L), (94685L, 256L)], (72489L, 512L): [(94173L, 512L), (94685L, 256L)]}, '100015-1120009': {}, '500004-420001': {(46849L, 1024L): [(21217L, 64L), (42421L, 1L)]}, '100015-520004': {}, '1500009-520004': {(2801L, 1L): [(47521L, 32L), (47553L, 32L)]}, '400001-1320011': {}, '200004-1120009': {}, '200004-1320011': {}, '1500009-820001': {(2801L, 1L): [(27141L, 1L)]}, '400001-520004': {}, '800001-920009': {}, '100015-1320011': {}, '1500005-1320010': {}, '900008-1320010': {}, '1500009-920009': {(2801L, 1L): [(25650L, 32L), (25682L, 64L)]}, '100015-820001': {}, '1100009-920009': {}, '100015-220004': {}, '1300011-1520009': {(724910601L, 512L): [(12074L, 1L)], (724911369L, 256L): [(12074L, 1L)], (72489L, 512L): [(21305L, 512L), (21817L, 256L)], (353385L, 256L): [(11906L, 1L), (12074L, 1L)], (344961649L, 512L): [(11906L, 1L), (12074L, 1L)], (158321L, 256L): [(12074L, 1L)], (724909577L, 256L): [(11906L, 1L), (12074L, 1L)], (354409L, 512L): [(1442L, 1L)], (724893193L, 262144L): [(14378L, 1L), (14377L, 256L)], (71465L, 1024L): [(21305L, 512L), (21817L, 256L)], (356969L, 256L): [(3745L, 256L)], (3148801, 256): [(11906L, 1L), (12074L, 1L)], (724913161L, 256L): [(14377L, 256L)], (337001L, 262144L): [(14378L, 1L), (14377L, 256L)], (355177L, 256L): [(12074L, 1L)]}, '800001-1120009': {}, '200004-920009': {}, '1100009-120015': {}}";
	var all_deny_src="{'200004-120015': {}, '800001-120015': {},		 '1300011-420001': {(172, 19, (60, 63), (0, 255)): [[171, 67, 4, [128, 191]], [172, 20, 0, 75]], (172, 19, (44, 45), (0, 255)): [[171, 67, 4, [128, 191]], [172, 20, 0, 75]]}, '1300011-820001': {(172, 19, (60, 63), (0, 255)): [[172, 20, 0, 235]], (172, 19, (44, 45), (0, 255)): [[172, 20, 0, 235]]},'900009-1120009': {}, '200004-520004': {}, '100015-1320011': {},		 '200004-1520009': {(171, 64, 64, (0, 255)): [[172, 24, 68, 89], [172, 24, 69, 1]], (172, 24, (68, 69), (0, 255)): [[171, 64, 69, 1]], (192, 168, (136, 137), (0, 255)): [[172, 24, 68, 89], [172, 24, 69, 1]], (171, 64, 78, (0, 255)): [[172, 24, 78, [0, 255]]], (172, 24, 78, (0, 255)): [[171, 64, 78, [0, 255]]], (171, 64, (68, 69), (0, 255)): [[172, 24, 69, 1]], (172, 24, 64, (0, 255)): [[172, 24, 68, 89], [172, 24, 69, 1]], (171, 64, 71, (0, 255)): [[172, 24, 69, 1]], (10, 79, 12, (0, 255)): [[172, 24, 68, 89], [172, 24, 69, 1]], (171, (64, 67), (0, 255), (0, 255)): [[172, 24, 78, 1], [172, 24, 78, [0, 255]]], (172, 24, 71, (0, 255)): [[172, 24, 69, 1]], (172, (24, 27), (0, 255), (0, 255)): [[172, 24, 78, 1], [172, 24, 78, [0, 255]]], (172, 27, 64, (0, 255)): [[172, 24, 69, 1]]},		 '1100009-520004': {},		 '1500009-420001': {(171, 64, 74, 80): [[171, 67, 4, [128, 191]], [172, 20, 0, 75]]},		 '1300010-1520005': {(172, 19, (60, 63), (0, 255)): [[172, 24, 95, [0, 255]], [172, 24, 98, [0, 255]]], (172, 19, (44, 45), (0, 255)): [[172, 24, 95, [0, 255]], [172, 24, 98, [0, 255]]]},		 '1300011-920009': {(172, 19, (60, 63), (0, 255)): [[171, 67, 222, [0, 63]]], (172, 19, (44, 45), (0, 255)): [[171, 67, 222, [0, 63]]]},		 '900008-920030': {(171, 64, 201, 44): [[172, 27, 229, [112, 127]]]},		 '900009-220004': {}, '400001-920009': {}, '100015-1520009': {},		 '1500009-1320011': {(171, 64, 74, 80): [[172, 26, 5, [24, 31]]]},		 '100015-420001': {},		 '1500009-220004': {(171, 64, 74, 80): [[172, 20, 0, 203]]},		 '800001-220004': {},		 '1500009-820001': {(171, 64, 74, 80): [[172, 20, 0, 235]]},		 '900009-820001': {},		 '1300011-220004': {(172, 19, (60, 63), (0, 255)): [[172, 20, 0, 203]], (172, 19, (44, 45), (0, 255)): [[172, 20, 0, 203]]},		 '900030-1520005': {(171, 64, 201, 44): [[172, 24, 95, [0, 255]], [172, 24, 98, [0, 255]]]},		 '200004-1320011': {}, '200004-920009': {}, '200004-820001': {},		 '500004-1320011': {(172, 19, (96, 99), (0, 255)): [[172, 26, 5, [24, 31]]]},		 '800001-920009': {},		 '900009-1520009': {(171, 64, 64, (0, 255)): [[172, 24, 68, 89], [172, 24, 69, 1]], (172, 24, (68, 69), (0, 255)): [[171, 64, 69, 1]], (192, 168, (136, 137), (0, 255)): [[172, 24, 68, 89], [172, 24, 69, 1]], (171, 64, 78, (0, 255)): [[172, 24, 78, [0, 255]]], (172, 24, 78, (0, 255)): [[171, 64, 78, [0, 255]]], (171, 64, (68, 69), (0, 255)): [[172, 24, 69, 1]], (172, 24, 64, (0, 255)): [[172, 24, 68, 89], [172, 24, 69, 1]], (171, 64, 71, (0, 255)): [[172, 24, 69, 1]], (10, 79, 12, (0, 255)): [[172, 24, 68, 89], [172, 24, 69, 1]], (171, (64, 67), (0, 255), (0, 255)): [[172, 24, 78, 1], [172, 24, 78, [0, 255]]], (172, 24, 71, (0, 255)): [[172, 24, 69, 1]], (172, (24, 27), (0, 255), (0, 255)): [[172, 24, 78, 1], [172, 24, 78, [0, 255]]], (172, 27, 64, (0, 255)): [[172, 24, 69, 1]]},		 '1300010-920008': {}, '800001-420001': {}, '900009-120015': {}, '1100009-920009': {}, '400001-1520009': {}, '900009-1320011': {}, '900030-1320010': {},		 '900030-920008': {(171, 64, 201, 44): [[192, 168, 209, [60, 63]], [192, 168, 209, [224, 227]]]},		 '1300011-520004': {(172, 19, (60, 63), (0, 255)): [[172, 19, 98, [160, 191]], [172, 19, 98, [192, 223]]], (172, 19, (44, 45), (0, 255)): [[172, 19, 98, [160, 191]], [172, 19, 98, [192, 223]]]},		 '500004-420001': {(172, 19, (96, 99), (0, 255)): [[171, 67, 4, [128, 191]], [172, 20, 0, 75]]},		 '200004-420001': {},		 '500004-820001': {(172, 19, (96, 99), (0, 255)): [[172, 20, 0, 235]]},		 '1500009-920009': {(171, 64, 74, 80): [[172, 27, 229, [128, 159]], [172, 27, 229, [192, 255]]]},		 '1500009-1120009': {(171, 64, 74, 80): [[172, 27, 88, [0, 255]]]},		 '400001-220004': {}, '400001-1120009': {}, '1100009-1320011': {}, '400001-120015': {}, '1100009-820001': {}, '1500005-920030': {}, '800001-1520009': {},		 '500004-1120009': {(172, 19, (96, 99), (0, 255)): [[172, 27, 88, [0, 255]]]},		 '100015-220004': {},		 '500004-120015': {(172, 19, (96, 99), (0, 255)): [[192, 168, [136, 137], [0, 255]], [192, 168, 252, [0, 255]]]},		 '500004-920009': {(172, 19, (96, 99), (0, 255)): [[172, 27, 229, [128, 159]], [172, 27, 229, [192, 255]]]},		 '900008-1320010': {}, '800001-1320011': {}, '1100009-420001': {}, '900009-520004': {},		 '1100009-1520009': {(171, 64, 64, (0, 255)): [[172, 24, 68, 89], [172, 24, 69, 1]], (172, 24, (68, 69), (0, 255)): [[171, 64, 69, 1]], (192, 168, (136, 137), (0, 255)): [[172, 24, 68, 89], [172, 24, 69, 1]], (171, 64, 78, (0, 255)): [[172, 24, 78, [0, 255]]], (172, 24, 78, (0, 255)): [[171, 64, 78, [0, 255]]], (171, 64, (68, 69), (0, 255)): [[172, 24, 69, 1]], (172, 24, 64, (0, 255)): [[172, 24, 68, 89], [172, 24, 69, 1]], (171, 64, 71, (0, 255)): [[172, 24, 69, 1]], (10, 79, 12, (0, 255)): [[172, 24, 68, 89], [172, 24, 69, 1]], (171, (64, 67), (0, 255), (0, 255)): [[172, 24, 78, 1], [172, 24, 78, [0, 255]]], (172, 24, 71, (0, 255)): [[172, 24, 69, 1]], (172, (24, 27), (0, 255), (0, 255)): [[172, 24, 78, 1], [172, 24, 78, [0, 255]]], (172, 27, 64, (0, 255)): [[172, 24, 69, 1]]},		 '1300011-1120009': {(172, 19, (60, 63), (0, 255)): [[172, 27, 88, [0, 255]]], (172, 19, (44, 45), (0, 255)): [[172, 27, 88, [0, 255]]]},		 '100015-1120009': {},		 '500004-1520009': {(171, 64, 64, (0, 255)): [[172, 24, 68, 89], [172, 24, 69, 1]], (172, 24, (68, 69), (0, 255)): [[171, 64, 69, 1]], (192, 168, (136, 137), (0, 255)): [[172, 24, 68, 89], [172, 24, 69, 1]], (171, 64, 78, (0, 255)): [[172, 24, 78, [0, 255]]], (172, 24, 78, (0, 255)): [[171, 64, 78, [0, 255]]], (171, 64, (68, 69), (0, 255)): [[172, 24, 69, 1]], (10, 79, 12, (0, 255)): [[172, 24, 68, 89], [172, 24, 69, 1]], (171, 64, 71, (0, 255)): [[172, 24, 69, 1]], (172, 19, (96, 99), (0, 255)): [[192, 168, [136, 137], [0, 255]], [192, 168, 252, [0, 255]]], (171, (64, 67), (0, 255), (0, 255)): [[172, 24, 78, 1], [172, 24, 78, [0, 255]]], (172, 24, 71, (0, 255)): [[172, 24, 69, 1]], (172, (24, 27), (0, 255), (0, 255)): [[172, 24, 78, 1], [172, 24, 78, [0, 255]]], (172, 27, 64, (0, 255)): [[172, 24, 69, 1]], (172, 24, 64, (0, 255)): [[172, 24, 68, 89], [172, 24, 69, 1]]},		 '800001-520004': {}, '100015-520004': {},		 '1300011-1520009': {(171, 64, 64, (0, 255)): [[172, 24, 68, 89], [172, 24, 69, 1]], (172, 24, (68, 69), (0, 255)): [[171, 64, 69, 1]], (172, 27, 64, (0, 255)): [[172, 24, 69, 1]], (171, 64, 78, (0, 255)): [[172, 24, 78, [0, 255]]], (172, 24, 78, (0, 255)): [[171, 64, 78, [0, 255]]], (171, 64, (68, 69), (0, 255)): [[172, 24, 69, 1]], (172, 24, 64, (0, 255)): [[172, 24, 68, 89], [172, 24, 69, 1]], (171, 64, 71, (0, 255)): [[172, 24, 69, 1]], (10, 79, 12, (0, 255)): [[172, 24, 68, 89], [172, 24, 69, 1]], (171, (64, 67), (0, 255), (0, 255)): [[172, 24, 78, 1], [172, 24, 78, [0, 255]]], (172, 24, 71, (0, 255)): [[172, 24, 69, 1]], (172, 19, (60, 63), (0, 255)): [[192, 168, [136, 137], [0, 255]], [192, 168, 252, [0, 255]]], (172, (24, 27), (0, 255), (0, 255)): [[172, 24, 78, 1], [172, 24, 78, [0, 255]]], (172, 19, (44, 45), (0, 255)): [[192, 168, [136, 137], [0, 255]], [192, 168, 252, [0, 255]]], (192, 168, (136, 137), (0, 255)): [[172, 24, 68, 89], [172, 24, 69, 1]]},		 '400001-1320011': {}, '200004-1120009': {}, '1500009-120015': {},		 '500004-220004': {(172, 19, (96, 99), (0, 255)): [[172, 20, 0, 203]]},		 '400001-520004': {}, '100015-920009': {}, '400001-820001': {}, '1500005-1320010': {}, '800001-1120009': {}, '900009-420001': {},		 '1500009-520004': {(171, 64, 74, 80): [[172, 19, 98, [160, 191]], [172, 19, 98, [192, 223]]]},		 '100015-820001': {},		 '1300011-120015': {(172, 19, (60, 63), (0, 255)): [[192, 168, [136, 137], [0, 255]], [192, 168, 252, [0, 255]]], (172, 19, (44, 45), (0, 255)): [[192, 168, [136, 137], [0, 255]], [192, 168, 252, [0, 255]]]},		 '1500005-920008': {},		 '900008-1520005': {(171, 64, 201, 44): [[172, 24, 95, [0, 255]], [172, 24, 98, [0, 255]]]},'1300010-920030': {}, '1100009-220004': {}, '1100009-120015': {}}";
	var all_deny_dst_T="{'800001-120015': [], '500004-220004': [], '1300011-420001': [(21217L, 32L), (21249L, 32L)], '100015-920009': [(16528L, 1L)], '1100009-1520009': [(1185L, 512L), (3894L, 1L), (11817L, 512L), (1195L, 1L), (1221L, 1L), (1225L, 1L), (3865L, 1L), (3759L, 1L), (3891L, 1L), (3909L, 1L), (3936L, 1L), (3766L, 1L), (3961L, 1L), (3962L, 1L), (3982L, 1L), (3990L, 1L), (3991L, 1L), (3992L, 1L), (3993L, 1L), (3774L, 1L), (3784L, 1L), (3807L, 1L), (3810L, 1L), (3826L, 1L), (14387L, 1L), (3865L, 1L), (3982L, 1L), (3810L, 1L), (1330L, 1L), (1395L, 1L), (1221L, 1L), (1262L, 1L), (3745L, 256L), (14377L, 256L), (1395L, 1L), (1221L, 1L), (1262L, 1L), (3745L, 256L), (14377L, 256L), (1195L, 1L), (3745L, 256L), (14377L, 256L), (3794L, 1L), (3826L, 1L), (3992L, 1L), (3993L, 1L), (3794L, 1L), (3992L, 1L), (3993L, 1L), (3766L, 1L), (1185L, 512L), (1186L, 1L), (1203L, 1L), (1442L, 1L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3967L, 1L), (3968L, 1L), (3770L, 1L), (3787L, 1L), (3789L, 1L), (3793L, 1L), (3799L, 1L), (3822L, 1L), (3745L, 256L), (11817L, 512L), (11818L, 1L), (11906L, 1L), (12074L, 1L), (14378L, 1L), (14377L, 256L), (1185L, 512L), (1186L, 1L), (1203L, 1L), (1442L, 1L), (3894L, 1L), (11817L, 512L), (11818L, 1L), (11906L, 1L), (12074L, 1L), (1195L, 1L), (1221L, 1L), (1225L, 1L), (3865L, 1L), (3759L, 1L), (3891L, 1L), (3909L, 1L), (3936L, 1L), (3766L, 1L), (3961L, 1L), (3962L, 1L), (3982L, 1L), (3990L, 1L), (3991L, 1L), (3992L, 1L), (3993L, 1L), (3774L, 1L), (3784L, 1L), (3807L, 1L), (3810L, 1L), (3826L, 1L), (14387L, 1L), (3865L, 1L), (3982L, 1L), (3810L, 1L), (1330L, 1L), (1395L, 1L), (1221L, 1L), (1262L, 1L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3967L, 1L), (3968L, 1L), (3770L, 1L), (3787L, 1L), (3789L, 1L), (3793L, 1L), (3799L, 1L), (3822L, 1L), (3745L, 256L), (14378L, 1L), (14377L, 256L), (1395L, 1L), (1221L, 1L), (1262L, 1L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3967L, 1L), (3968L, 1L), (3770L, 1L), (3787L, 1L), (3789L, 1L), (3793L, 1L), (3799L, 1L), (3822L, 1L), (3745L, 256L), (14378L, 1L), (14377L, 256L), (1195L, 1L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3967L, 1L), (3968L, 1L), (3770L, 1L), (3787L, 1L), (3789L, 1L), (3793L, 1L), (3799L, 1L), (3822L, 1L), (3745L, 256L), (14378L, 1L), (14377L, 256L), (3794L, 1L), (3826L, 1L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3770L, 1L), (3789L, 1L), (3822L, 1L), (3745L, 256L), (14378L, 1L), (14377L, 256L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3770L, 1L), (3789L, 1L), (3822L, 1L), (3745L, 256L), (14378L, 1L), (14377L, 256L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3770L, 1L), (3789L, 1L), (3822L, 1L), (3745L, 256L), (14378L, 1L), (14377L, 256L), (3992L, 1L), (3993L, 1L), (3794L, 1L), (3992L, 1L), (3993L, 1L), (3766L, 1L), (1185L, 512L), (1193L, 4L), (1186L, 1L), (1203L, 1L), (1442L, 1L), (3967L, 1L), (3968L, 1L), (3787L, 1L), (3793L, 1L), (3799L, 1L), (11817L, 512L), (11818L, 1L), (11906L, 1L), (12074L, 1L), (6114L, 1L), (2L, 1L), (130L, 1L), (34L, 1L), (66L, 1L), (98L, 1L), (162L, 1L), (418L, 1L), (674L, 1L), (930L, 1L), (1193L, 4L), (1186L, 1L), (1442L, 1L), (1698L, 1L), (1954L, 1L), (2210L, 1L), (2466L, 1L), (2722L, 1L), (2978L, 1L), (3234L, 1L), (3490L, 1L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3770L, 1L), (3789L, 1L), (3822L, 1L), (4002L, 1L), (4066L, 1L), (4578L, 1L), (5090L, 1L), (5346L, 1L), (5858L, 1L), (6626L, 1L), (10474L, 1L), (10602L, 1L), (10730L, 1L), (6634L, 1L), (6890L, 1L), (7146L, 1L), (7402L, 1L), (7658L, 1L), (7914L, 1L), (8170L, 1L), (8426L, 1L), (8938L, 1L), (9450L, 1L), (9962L, 1L), (16426L, 1L), (10794L, 1L), (11050L, 1L), (11306L, 1L), (11562L, 1L), (11818L, 1L), (11906L, 1L), (12074L, 1L), (12330L, 1L), (12586L, 1L), (12842L, 1L), (13354L, 1L), (13610L, 1L), (13866L, 1L), (14122L, 1L), (14378L, 1L), (14634L, 1L), (14890L, 1L), (15402L, 1L), (15658L, 1L), (15914L, 1L), (16170L, 1L), (16938L, 1L), (16946L, 1L), (16954L, 1L), (17210L, 1L), (17466L, 1L), (17722L, 1L), (17978L, 1L), (18234L, 1L), (18490L, 1L), (18746L, 1L), (19258L, 1L), (19770L, 1L), (20282L, 1L), (20794L, 1L), (21050L, 1L), (21306L, 1L), (21818L, 1L)], '900009-1120009': [(16816L, 1L)], '200004-520004': [(2, 1), (28674, 1), (32770, 1), (36866, 1), (4098, 1), (8194, 1), (12290, 1), (16386, 1), (20482, 1), (24578, 1), (47362L, 1L), (47874L, 1L), (48386L, 1L), (48898L, 1L), (49410L, 1L), (40962L, 1L), (41218L, 1L), (41474L, 1L), (41730L, 1L), (41986L, 1L), (42242L, 1L), (42498L, 1L), (42754L, 1L), (43010L, 1L), (43266L, 1L), (43522L, 1L), (43778L, 1L), (44034L, 1L), (44290L, 1L), (44546L, 1L), (44802L, 1L), (45058L, 1L), (45314L, 1L), (45570L, 1L), (45826L, 1L), (46082L, 1L), (46338L, 1L), (46594L, 1L), (46850L, 1L), (46978L, 1L), (47010L, 1L), (47042L, 1L), (47074L, 1L), (46882L, 1L), (46914L, 1L), (46946L, 1L), (47106L, 1L), (47234L, 1L), (47266L, 1L), (47298L, 1L), (47330L, 1L), (47138L, 1L), (47170L, 1L), (47202L, 1L), (47362L, 1L), (47490L, 1L), (47522L, 1L), (47554L, 1L), (47394L, 1L), (47426L, 1L), (47458L, 1L)], '400001-820001': [], '200004-1520009': [(1185L, 512L), (3894L, 1L), (11817L, 512L), (1195L, 1L), (1221L, 1L), (1225L, 1L), (3865L, 1L), (3759L, 1L), (3891L, 1L), (3909L, 1L), (3936L, 1L), (3766L, 1L), (3961L, 1L), (3962L, 1L), (3982L, 1L), (3990L, 1L), (3991L, 1L), (3992L, 1L), (3993L, 1L), (3774L, 1L), (3784L, 1L), (3807L, 1L), (3810L, 1L), (3826L, 1L), (14387L, 1L), (3865L, 1L), (3982L, 1L), (3810L, 1L), (1330L, 1L), (1395L, 1L), (1221L, 1L), (1262L, 1L), (3745L, 256L), (14377L, 256L), (1395L, 1L), (1221L, 1L), (1262L, 1L), (3745L, 256L), (14377L, 256L), (1195L, 1L), (3745L, 256L), (14377L, 256L), (3794L, 1L), (3826L, 1L), (3992L, 1L), (3993L, 1L), (3794L, 1L), (3992L, 1L), (3993L, 1L), (3766L, 1L), (1185L, 512L), (1186L, 1L), (1203L, 1L), (1442L, 1L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3967L, 1L), (3968L, 1L), (3770L, 1L), (3787L, 1L), (3789L, 1L), (3793L, 1L), (3799L, 1L), (3822L, 1L), (3745L, 256L), (11817L, 512L), (11818L, 1L), (11906L, 1L), (12074L, 1L), (14378L, 1L), (14377L, 256L), (1185L, 512L), (1186L, 1L), (1203L, 1L), (1442L, 1L), (3894L, 1L), (11817L, 512L), (11818L, 1L), (11906L, 1L), (12074L, 1L), (1195L, 1L), (1221L, 1L), (1225L, 1L), (3865L, 1L), (3759L, 1L), (3891L, 1L), (3909L, 1L), (3936L, 1L), (3766L, 1L), (3961L, 1L), (3962L, 1L), (3982L, 1L), (3990L, 1L), (3991L, 1L), (3992L, 1L), (3993L, 1L), (3774L, 1L), (3784L, 1L), (3807L, 1L), (3810L, 1L), (3826L, 1L), (14387L, 1L), (3865L, 1L), (3982L, 1L), (3810L, 1L), (1330L, 1L), (1395L, 1L), (1221L, 1L), (1262L, 1L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3967L, 1L), (3968L, 1L), (3770L, 1L), (3787L, 1L), (3789L, 1L), (3793L, 1L), (3799L, 1L), (3822L, 1L), (3745L, 256L), (14378L, 1L), (14377L, 256L), (1395L, 1L), (1221L, 1L), (1262L, 1L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3967L, 1L), (3968L, 1L), (3770L, 1L), (3787L, 1L), (3789L, 1L), (3793L, 1L), (3799L, 1L), (3822L, 1L), (3745L, 256L), (14378L, 1L), (14377L, 256L), (1195L, 1L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3967L, 1L), (3968L, 1L), (3770L, 1L), (3787L, 1L), (3789L, 1L), (3793L, 1L), (3799L, 1L), (3822L, 1L), (3745L, 256L), (14378L, 1L), (14377L, 256L), (3794L, 1L), (3826L, 1L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3770L, 1L), (3789L, 1L), (3822L, 1L), (3745L, 256L), (14378L, 1L), (14377L, 256L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3770L, 1L), (3789L, 1L), (3822L, 1L), (3745L, 256L), (14378L, 1L), (14377L, 256L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3770L, 1L), (3789L, 1L), (3822L, 1L), (3745L, 256L), (14378L, 1L), (14377L, 256L), (3992L, 1L), (3993L, 1L), (3794L, 1L), (3992L, 1L), (3993L, 1L), (3766L, 1L), (1185L, 512L), (1193L, 4L), (1186L, 1L), (1203L, 1L), (1442L, 1L), (3967L, 1L), (3968L, 1L), (3787L, 1L), (3793L, 1L), (3799L, 1L), (11817L, 512L), (11818L, 1L), (11906L, 1L), (12074L, 1L), (6114L, 1L), (2L, 1L), (130L, 1L), (34L, 1L), (66L, 1L), (98L, 1L), (162L, 1L), (418L, 1L), (674L, 1L), (930L, 1L), (1193L, 4L), (1186L, 1L), (1442L, 1L), (1698L, 1L), (1954L, 1L), (2210L, 1L), (2466L, 1L), (2722L, 1L), (2978L, 1L), (3234L, 1L), (3490L, 1L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3770L, 1L), (3789L, 1L), (3822L, 1L), (4002L, 1L), (4066L, 1L), (4578L, 1L), (5090L, 1L), (5346L, 1L), (5858L, 1L), (6626L, 1L), (10474L, 1L), (10602L, 1L), (10730L, 1L), (6634L, 1L), (6890L, 1L), (7146L, 1L), (7402L, 1L), (7658L, 1L), (7914L, 1L), (8170L, 1L), (8426L, 1L), (8938L, 1L), (9450L, 1L), (9962L, 1L), (16426L, 1L), (10794L, 1L), (11050L, 1L), (11306L, 1L), (11562L, 1L), (11818L, 1L), (11906L, 1L), (12074L, 1L), (12330L, 1L), (12586L, 1L), (12842L, 1L), (13354L, 1L), (13610L, 1L), (13866L, 1L), (14122L, 1L), (14378L, 1L), (14634L, 1L), (14890L, 1L), (15402L, 1L), (15658L, 1L), (15914L, 1L), (16170L, 1L), (16938L, 1L), (16946L, 1L), (16954L, 1L), (17210L, 1L), (17466L, 1L), (17722L, 1L), (17978L, 1L), (18234L, 1L), (18490L, 1L), (18746L, 1L), (19258L, 1L), (19770L, 1L), (20282L, 1L), (20794L, 1L), (21050L, 1L), (21306L, 1L), (21818L, 1L)], '1100009-1320011': [(2, 1), (28674, 1), (32770, 1), (36866, 1), (4098, 1), (40962, 1), (45058, 1), (49154, 1), (53250, 1), (57346, 1), (61442, 1), (8194, 1), (12290, 1), (16386, 1), (20482, 1), (24578, 1), (65546L, 1L), (67626L, 1L), (73194L, 1L), (73450L, 1L), (68394L, 1L), (73706L, 1L), (68650L, 1L), (74474L, 1L), (74986L, 1L), (75498L, 1L), (76010L, 1L), (68906L, 1L), (76522L, 1L), (77034L, 1L), (65578L, 1L), (69162L, 1L), (77546L, 1L), (65834L, 1L), (69418L, 1L), (69930L, 1L), (70186L, 1L), (70954L, 1L), (71210L, 1L), (66090L, 1L), (66346L, 1L), (71466L, 1L), (71594L, 1L), (71626L, 1L), (71690L, 1L), (71498L, 1L), (71530L, 1L), (71722L, 1L), (71818L, 1L), (71850L, 1L), (71882L, 1L), (71914L, 1L), (71786L, 1L), (72106L, 1L), (72138L, 1L), (72170L, 1L), (71978L, 1L), (72010L, 1L), (72202L, 1L), (72394L, 1L), (66858L, 1L), (72426L, 1L), (67370L, 1L), (77706L, 1L)],		 '200004-120015': [], '1300010-1520005': [], '900009-120015': [], '1300010-920030': [], '900009-220004': [], '400001-920009': [], '1100009-420001': [(21217L, 32L), (21249L, 32L)], '100015-1520009': [], '1500009-1320011': [(2, 1), (28674, 1), (32770, 1), (36866, 1), (4098, 1), (40962, 1), (45058, 1), (49154, 1), (53250, 1), (57346, 1), (61442, 1), (8194, 1), (12290, 1), (16386, 1), (20482, 1), (24578, 1), (65546L, 1L), (67626L, 1L), (73194L, 1L), (73450L, 1L), (68394L, 1L), (73706L, 1L), (68650L, 1L), (74474L, 1L), (74986L, 1L), (75498L, 1L), (76010L, 1L), (68906L, 1L), (76522L, 1L), (77034L, 1L), (65578L, 1L), (69162L, 1L), (77546L, 1L), (65834L, 1L), (69418L, 1L), (69930L, 1L), (70186L, 1L), (70954L, 1L), (71210L, 1L), (66090L, 1L), (66346L, 1L), (71466L, 1L), (71594L, 1L), (71626L, 1L), (71690L, 1L), (71498L, 1L), (71530L, 1L), (71722L, 1L), (71818L, 1L), (71850L, 1L), (71882L, 1L), (71914L, 1L), (71786L, 1L), (72106L, 1L), (72138L, 1L), (72170L, 1L), (71978L, 1L), (72010L, 1L), (72202L, 1L), (72394L, 1L), (66858L, 1L), (72426L, 1L), (67370L, 1L), (77706L, 1L)], '100015-420001': [(21217L, 32L), (21249L, 32L)], '1500009-220004': [], '800001-220004': [], '400001-1520009': [], '1100009-820001': [], '1300011-220004': [], '900030-1520005': [], '500004-1520009': [(1185L, 512L), (3894L, 1L), (11817L, 512L), (1195L, 1L), (1221L, 1L), (1225L, 1L), (3865L, 1L), (3759L, 1L), (3891L, 1L), (3909L, 1L), (3936L, 1L), (3766L, 1L), (3961L, 1L), (3962L, 1L), (3982L, 1L), (3990L, 1L), (3991L, 1L), (3992L, 1L), (3993L, 1L), (3774L, 1L), (3784L, 1L), (3807L, 1L), (3810L, 1L), (3826L, 1L), (14387L, 1L), (3865L, 1L), (3982L, 1L), (3810L, 1L), (1330L, 1L), (1395L, 1L), (1221L, 1L), (1262L, 1L), (3745L, 256L), (14377L, 256L), (1395L, 1L), (1221L, 1L), (1262L, 1L), (3745L, 256L), (14377L, 256L), (1195L, 1L), (3745L, 256L), (14377L, 256L), (3794L, 1L), (3826L, 1L), (3992L, 1L), (3993L, 1L), (3794L, 1L), (3992L, 1L), (3993L, 1L), (3766L, 1L), (1185L, 512L), (1186L, 1L), (1203L, 1L), (1442L, 1L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3967L, 1L), (3968L, 1L), (3770L, 1L), (3787L, 1L), (3789L, 1L), (3793L, 1L), (3799L, 1L), (3822L, 1L), (3745L, 256L), (11817L, 512L), (11818L, 1L), (11906L, 1L), (12074L, 1L), (14378L, 1L), (14377L, 256L), (1185L, 512L), (1186L, 1L), (1203L, 1L), (1442L, 1L), (3894L, 1L), (11817L, 512L), (11818L, 1L), (11906L, 1L), (12074L, 1L), (1195L, 1L), (1221L, 1L), (1225L, 1L), (3865L, 1L), (3759L, 1L), (3891L, 1L), (3909L, 1L), (3936L, 1L), (3766L, 1L), (3961L, 1L), (3962L, 1L), (3982L, 1L), (3990L, 1L), (3991L, 1L), (3992L, 1L), (3993L, 1L), (3774L, 1L), (3784L, 1L), (3807L, 1L), (3810L, 1L), (3826L, 1L), (14387L, 1L), (3865L, 1L), (3982L, 1L), (3810L, 1L), (1330L, 1L), (1395L, 1L), (1221L, 1L), (1262L, 1L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3967L, 1L), (3968L, 1L), (3770L, 1L), (3787L, 1L), (3789L, 1L), (3793L, 1L), (3799L, 1L), (3822L, 1L), (3745L, 256L), (14378L, 1L), (14377L, 256L), (1395L, 1L), (1221L, 1L), (1262L, 1L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3967L, 1L), (3968L, 1L), (3770L, 1L), (3787L, 1L), (3789L, 1L), (3793L, 1L), (3799L, 1L), (3822L, 1L), (3745L, 256L), (14378L, 1L), (14377L, 256L), (1195L, 1L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3967L, 1L), (3968L, 1L), (3770L, 1L), (3787L, 1L), (3789L, 1L), (3793L, 1L), (3799L, 1L), (3822L, 1L), (3745L, 256L), (14378L, 1L), (14377L, 256L), (3794L, 1L), (3826L, 1L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3770L, 1L), (3789L, 1L), (3822L, 1L), (3745L, 256L), (14378L, 1L), (14377L, 256L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3770L, 1L), (3789L, 1L), (3822L, 1L), (3745L, 256L), (14378L, 1L), (14377L, 256L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3770L, 1L), (3789L, 1L), (3822L, 1L), (3745L, 256L), (14378L, 1L), (14377L, 256L), (3992L, 1L), (3993L, 1L), (3794L, 1L), (3992L, 1L), (3993L, 1L), (3766L, 1L), (1185L, 512L), (1193L, 4L), (1186L, 1L), (1203L, 1L), (1442L, 1L), (3967L, 1L), (3968L, 1L), (3787L, 1L), (3793L, 1L), (3799L, 1L), (11817L, 512L), (11818L, 1L), (11906L, 1L), (12074L, 1L), (6114L, 1L), (2L, 1L), (130L, 1L), (34L, 1L), (66L, 1L), (98L, 1L), (162L, 1L), (418L, 1L), (674L, 1L), (930L, 1L), (1193L, 4L), (1186L, 1L), (1442L, 1L), (1698L, 1L), (1954L, 1L), (2210L, 1L), (2466L, 1L), (2722L, 1L), (2978L, 1L), (3234L, 1L), (3490L, 1L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3770L, 1L), (3789L, 1L), (3822L, 1L), (4002L, 1L), (4066L, 1L), (4578L, 1L), (5090L, 1L), (5346L, 1L), (5858L, 1L), (6626L, 1L), (10474L, 1L), (10602L, 1L), (10730L, 1L), (6634L, 1L), (6890L, 1L), (7146L, 1L), (7402L, 1L), (7658L, 1L), (7914L, 1L), (8170L, 1L), (8426L, 1L), (8938L, 1L), (9450L, 1L), (9962L, 1L), (16426L, 1L), (10794L, 1L), (11050L, 1L), (11306L, 1L), (11562L, 1L), (11818L, 1L), (11906L, 1L), (12074L, 1L), (12330L, 1L), (12586L, 1L), (12842L, 1L), (13354L, 1L), (13610L, 1L), (13866L, 1L), (14122L, 1L), (14378L, 1L), (14634L, 1L), (14890L, 1L), (15402L, 1L), (15658L, 1L), (15914L, 1L), (16170L, 1L), (16938L, 1L), (16946L, 1L), (16954L, 1L), (17210L, 1L), (17466L, 1L), (17722L, 1L), (17978L, 1L), (18234L, 1L), (18490L, 1L), (18746L, 1L), (19258L, 1L), (19770L, 1L), (20282L, 1L), (20794L, 1L), (21050L, 1L), (21306L, 1L), (21818L, 1L)], '200004-820001': [], '500004-1320011': [(2, 1), (28674, 1), (32770, 1), (36866, 1), (4098, 1), (40962, 1), (45058, 1), (49154, 1), (53250, 1), (57346, 1), (61442, 1), (8194, 1), (12290, 1), (16386, 1), (20482, 1), (24578, 1), (65546L, 1L), (67626L, 1L), (73194L, 1L), (73450L, 1L), (68394L, 1L), (73706L, 1L), (68650L, 1L), (74474L, 1L), (74986L, 1L), (75498L, 1L), (76010L, 1L), (68906L, 1L), (76522L, 1L), (77034L, 1L), (65578L, 1L), (69162L, 1L), (77546L, 1L), (65834L, 1L), (69418L, 1L), (69930L, 1L), (70186L, 1L), (70954L, 1L), (71210L, 1L), (66090L, 1L), (66346L, 1L), (71466L, 1L), (71594L, 1L), (71626L, 1L), (71690L, 1L), (71498L, 1L), (71530L, 1L), (71722L, 1L), (71818L, 1L), (71850L, 1L), (71882L, 1L), (71914L, 1L), (71786L, 1L), (72106L, 1L), (72138L, 1L), (72170L, 1L), (71978L, 1L), (72010L, 1L), (72202L, 1L), (72394L, 1L), (66858L, 1L), (72426L, 1L), (67370L, 1L), (77706L, 1L)], '1100009-520004': [(2, 1), (28674, 1), (32770, 1), (36866, 1), (4098, 1), (8194, 1), (12290, 1), (16386, 1), (20482, 1), (24578, 1), (47362L, 1L), (47874L, 1L), (48386L, 1L), (48898L, 1L), (49410L, 1L), (40962L, 1L), (41218L, 1L), (41474L, 1L), (41730L, 1L), (41986L, 1L), (42242L, 1L), (42498L, 1L), (42754L, 1L), (43010L, 1L), (43266L, 1L), (43522L, 1L), (43778L, 1L), (44034L, 1L), (44290L, 1L), (44546L, 1L), (44802L, 1L), (45058L, 1L), (45314L, 1L), (45570L, 1L), (45826L, 1L), (46082L, 1L), (46338L, 1L), (46594L, 1L), (46850L, 1L), (46978L, 1L), (47010L, 1L), (47042L, 1L), (47074L, 1L), (46882L, 1L), (46914L, 1L), (46946L, 1L), (47106L, 1L), (47234L, 1L), (47266L, 1L), (47298L, 1L), (47330L, 1L), (47138L, 1L), (47170L, 1L), (47202L, 1L), (47362L, 1L), (47490L, 1L), (47522L, 1L), (47554L, 1L), (47394L, 1L), (47426L, 1L), (47458L, 1L)], '900009-1520009': [(1185L, 512L), (3894L, 1L), (11817L, 512L), (1195L, 1L), (1221L, 1L), (1225L, 1L), (3865L, 1L), (3759L, 1L), (3891L, 1L), (3909L, 1L), (3936L, 1L), (3766L, 1L), (3961L, 1L), (3962L, 1L), (3982L, 1L), (3990L, 1L), (3991L, 1L), (3992L, 1L), (3993L, 1L), (3774L, 1L), (3784L, 1L), (3807L, 1L), (3810L, 1L), (3826L, 1L), (14387L, 1L), (3865L, 1L), (3982L, 1L), (3810L, 1L), (1330L, 1L), (1395L, 1L), (1221L, 1L), (1262L, 1L), (3745L, 256L), (14377L, 256L), (1395L, 1L), (1221L, 1L), (1262L, 1L), (3745L, 256L), (14377L, 256L), (1195L, 1L), (3745L, 256L), (14377L, 256L), (3794L, 1L), (3826L, 1L), (3992L, 1L), (3993L, 1L), (3794L, 1L), (3992L, 1L), (3993L, 1L), (3766L, 1L), (1185L, 512L), (1186L, 1L), (1203L, 1L), (1442L, 1L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3967L, 1L), (3968L, 1L), (3770L, 1L), (3787L, 1L), (3789L, 1L), (3793L, 1L), (3799L, 1L), (3822L, 1L), (3745L, 256L), (11817L, 512L), (11818L, 1L), (11906L, 1L), (12074L, 1L), (14378L, 1L), (14377L, 256L), (1185L, 512L), (1186L, 1L), (1203L, 1L), (1442L, 1L), (3894L, 1L), (11817L, 512L), (11818L, 1L), (11906L, 1L), (12074L, 1L), (1195L, 1L), (1221L, 1L), (1225L, 1L), (3865L, 1L), (3759L, 1L), (3891L, 1L), (3909L, 1L), (3936L, 1L), (3766L, 1L), (3961L, 1L), (3962L, 1L), (3982L, 1L), (3990L, 1L), (3991L, 1L), (3992L, 1L), (3993L, 1L), (3774L, 1L), (3784L, 1L), (3807L, 1L), (3810L, 1L), (3826L, 1L), (14387L, 1L), (3865L, 1L), (3982L, 1L), (3810L, 1L), (1330L, 1L), (1395L, 1L), (1221L, 1L), (1262L, 1L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3967L, 1L), (3968L, 1L), (3770L, 1L), (3787L, 1L), (3789L, 1L), (3793L, 1L), (3799L, 1L), (3822L, 1L), (3745L, 256L), (14378L, 1L), (14377L, 256L), (1395L, 1L), (1221L, 1L), (1262L, 1L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3967L, 1L), (3968L, 1L), (3770L, 1L), (3787L, 1L), (3789L, 1L), (3793L, 1L), (3799L, 1L), (3822L, 1L), (3745L, 256L), (14378L, 1L), (14377L, 256L), (1195L, 1L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3967L, 1L), (3968L, 1L), (3770L, 1L), (3787L, 1L), (3789L, 1L), (3793L, 1L), (3799L, 1L), (3822L, 1L), (3745L, 256L), (14378L, 1L), (14377L, 256L), (3794L, 1L), (3826L, 1L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3770L, 1L), (3789L, 1L), (3822L, 1L), (3745L, 256L), (14378L, 1L), (14377L, 256L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3770L, 1L), (3789L, 1L), (3822L, 1L), (3745L, 256L), (14378L, 1L), (14377L, 256L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3770L, 1L), (3789L, 1L), (3822L, 1L), (3745L, 256L), (14378L, 1L), (14377L, 256L), (3992L, 1L), (3993L, 1L), (3794L, 1L), (3992L, 1L), (3993L, 1L), (3766L, 1L), (1185L, 512L), (1193L, 4L), (1186L, 1L), (1203L, 1L), (1442L, 1L), (3967L, 1L), (3968L, 1L), (3787L, 1L), (3793L, 1L), (3799L, 1L), (11817L, 512L), (11818L, 1L), (11906L, 1L), (12074L, 1L), (6114L, 1L), (2L, 1L), (130L, 1L), (34L, 1L), (66L, 1L), (98L, 1L), (162L, 1L), (418L, 1L), (674L, 1L), (930L, 1L), (1193L, 4L), (1186L, 1L), (1442L, 1L), (1698L, 1L), (1954L, 1L), (2210L, 1L), (2466L, 1L), (2722L, 1L), (2978L, 1L), (3234L, 1L), (3490L, 1L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3770L, 1L), (3789L, 1L), (3822L, 1L), (4002L, 1L), (4066L, 1L), (4578L, 1L), (5090L, 1L), (5346L, 1L), (5858L, 1L), (6626L, 1L), (10474L, 1L), (10602L, 1L), (10730L, 1L), (6634L, 1L), (6890L, 1L), (7146L, 1L), (7402L, 1L), (7658L, 1L), (7914L, 1L), (8170L, 1L), (8426L, 1L), (8938L, 1L), (9450L, 1L), (9962L, 1L), (16426L, 1L), (10794L, 1L), (11050L, 1L), (11306L, 1L), (11562L, 1L), (11818L, 1L), (11906L, 1L), (12074L, 1L), (12330L, 1L), (12586L, 1L), (12842L, 1L), (13354L, 1L), (13610L, 1L), (13866L, 1L), (14122L, 1L), (14378L, 1L), (14634L, 1L), (14890L, 1L), (15402L, 1L), (15658L, 1L), (15914L, 1L), (16170L, 1L), (16938L, 1L), (16946L, 1L), (16954L, 1L), (17210L, 1L), (17466L, 1L), (17722L, 1L), (17978L, 1L), (18234L, 1L), (18490L, 1L), (18746L, 1L), (19258L, 1L), (19770L, 1L), (20282L, 1L), (20794L, 1L), (21050L, 1L), (21306L, 1L), (21818L, 1L)], '1300010-920008': [], '800001-420001': [], '1300011-920009': [], '1500009-120015': [], '900009-1320011': [], '900030-1320010': [], '900030-920008': [(4098L, 1L), (5122L, 1L), (5250L, 1L), (5762L, 1L), (6530L, 1L), (6562L, 1L), (6607L, 1L), (6611L, 1L), (6867L, 1L), (6995L, 1L), (7251L, 1L), (7507L, 1L), (7515L, 1L), (7771L, 1L), (7803L, 1L)], '1300011-520004': [(2, 1), (28674, 1), (32770, 1), (36866, 1), (4098, 1), (8194, 1), (12290, 1), (16386, 1), (20482, 1), (24578, 1), (47362L, 1L), (47874L, 1L), (48386L, 1L), (48898L, 1L), (49410L, 1L), (40962L, 1L), (41218L, 1L), (41474L, 1L), (41730L, 1L), (41986L, 1L), (42242L, 1L), (42498L, 1L), (42754L, 1L), (43010L, 1L), (43266L, 1L), (43522L, 1L), (43778L, 1L), (44034L, 1L), (44290L, 1L), (44546L, 1L), (44802L, 1L), (45058L, 1L), (45314L, 1L), (45570L, 1L), (45826L, 1L), (46082L, 1L), (46338L, 1L), (46594L, 1L), (46850L, 1L), (46978L, 1L), (47010L, 1L), (47042L, 1L), (47074L, 1L), (46882L, 1L), (46914L, 1L), (46946L, 1L), (47106L, 1L), (47234L, 1L), (47266L, 1L), (47298L, 1L), (47330L, 1L), (47138L, 1L), (47170L, 1L), (47202L, 1L), (47362L, 1L), (47490L, 1L), (47522L, 1L), (47554L, 1L), (47394L, 1L), (47426L, 1L), (47458L, 1L)], '800001-520004': [], '900008-1520005': [], '500004-820001': [], '1500009-1120009': [(16816L, 1L)], '400001-220004': [], '400001-1120009': [], '900009-420001': [(21217L, 32L), (21249L, 32L)], '1100009-220004': [], '400001-120015': [], '900009-820001': [], '1500005-920030': [(2L, 1L), (1026L, 1L), (1154L, 1L), (1666L, 1L), (2178L, 1L), (2210L, 1L), (2255L, 1L), (2258L, 1L), (2514L, 1L), (2642L, 1L), (2898L, 1L), (3154L, 1L), (3186L, 1L)], '800001-1520009': [], '1500005-920008': [(4098L, 1L), (5122L, 1L), (5250L, 1L), (5762L, 1L), (6530L, 1L), (6562L, 1L), (6607L, 1L), (6611L, 1L), (6867L, 1L), (6995L, 1L), (7251L, 1L), (7507L, 1L), (7515L, 1L), (7771L, 1L), (7803L, 1L)], '500004-120015': [], '500004-920009': [(16528L, 1L)], '1500009-420001': [(21217L, 32L), (21249L, 32L)], '800001-1320011': [], '200004-420001': [], '900009-520004': [(2, 1), (28674, 1), (32770, 1), (36866, 1), (4098, 1), (8194, 1), (12290, 1), (16386, 1), (20482, 1), (24578, 1), (47362L, 1L), (47874L, 1L), (48386L, 1L), (48898L, 1L), (49410L, 1L), (40962L, 1L), (41218L, 1L), (41474L, 1L), (41730L, 1L), (41986L, 1L), (42242L, 1L), (42498L, 1L), (42754L, 1L), (43010L, 1L), (43266L, 1L), (43522L, 1L), (43778L, 1L), (44034L, 1L), (44290L, 1L), (44546L, 1L), (44802L, 1L), (45058L, 1L), (45314L, 1L), (45570L, 1L), (45826L, 1L), (46082L, 1L), (46338L, 1L), (46594L, 1L), (46850L, 1L), (46978L, 1L), (47010L, 1L), (47042L, 1L), (47074L, 1L), (46882L, 1L), (46914L, 1L), (46946L, 1L), (47106L, 1L), (47234L, 1L), (47266L, 1L), (47298L, 1L), (47330L, 1L), (47138L, 1L), (47170L, 1L), (47202L, 1L), (47362L, 1L), (47490L, 1L), (47522L, 1L), (47554L, 1L), (47394L, 1L), (47426L, 1L), (47458L, 1L)], '1300011-820001': [], '1300011-1120009': [(16816L, 1L)], '900008-920030': [(2L, 1L), (1026L, 1L), (1154L, 1L), (1666L, 1L), (2178L, 1L), (2210L, 1L), (2255L, 1L), (2258L, 1L), (2514L, 1L), (2642L, 1L), (2898L, 1L), (3154L, 1L), (3186L, 1L)], '500004-1120009': [(16816L, 1L)], '1300011-120015': [], '100015-1120009': [(16816L, 1L)], '500004-420001': [(21217L, 32L), (21249L, 32L)], '100015-520004': [(2, 1), (28674, 1), (32770, 1), (36866, 1), (4098, 1), (8194, 1), (12290, 1), (16386, 1), (20482, 1), (24578, 1), (47362L, 1L), (47874L, 1L), (48386L, 1L), (48898L, 1L), (49410L, 1L), (40962L, 1L), (41218L, 1L), (41474L, 1L), (41730L, 1L), (41986L, 1L), (42242L, 1L), (42498L, 1L), (42754L, 1L), (43010L, 1L), (43266L, 1L), (43522L, 1L), (43778L, 1L), (44034L, 1L), (44290L, 1L), (44546L, 1L), (44802L, 1L), (45058L, 1L), (45314L, 1L), (45570L, 1L), (45826L, 1L), (46082L, 1L), (46338L, 1L), (46594L, 1L), (46850L, 1L), (46978L, 1L), (47010L, 1L), (47042L, 1L), (47074L, 1L), (46882L, 1L), (46914L, 1L), (46946L, 1L), (47106L, 1L), (47234L, 1L), (47266L, 1L), (47298L, 1L), (47330L, 1L), (47138L, 1L), (47170L, 1L), (47202L, 1L), (47362L, 1L), (47490L, 1L), (47522L, 1L), (47554L, 1L), (47394L, 1L), (47426L, 1L), (47458L, 1L)], '1500009-520004': [(2, 1), (28674, 1), (32770, 1), (36866, 1), (4098, 1), (8194, 1), (12290, 1), (16386, 1), (20482, 1), (24578, 1), (47362L, 1L), (47874L, 1L), (48386L, 1L), (48898L, 1L), (49410L, 1L), (40962L, 1L), (41218L, 1L), (41474L, 1L), (41730L, 1L), (41986L, 1L), (42242L, 1L), (42498L, 1L), (42754L, 1L), (43010L, 1L), (43266L, 1L), (43522L, 1L), (43778L, 1L), (44034L, 1L), (44290L, 1L), (44546L, 1L), (44802L, 1L), (45058L, 1L), (45314L, 1L), (45570L, 1L), (45826L, 1L), (46082L, 1L), (46338L, 1L), (46594L, 1L), (46850L, 1L), (46978L, 1L), (47010L, 1L), (47042L, 1L), (47074L, 1L), (46882L, 1L), (46914L, 1L), (46946L, 1L), (47106L, 1L), (47234L, 1L), (47266L, 1L), (47298L, 1L), (47330L, 1L), (47138L, 1L), (47170L, 1L), (47202L, 1L), (47362L, 1L), (47490L, 1L), (47522L, 1L), (47554L, 1L), (47394L, 1L), (47426L, 1L), (47458L, 1L)], '400001-1320011': [], '200004-1120009': [(16816L, 1L)], '200004-1320011': [(2, 1), (28674, 1), (32770, 1), (36866, 1), (4098, 1), (40962, 1), (45058, 1), (49154, 1), (53250, 1), (57346, 1), (61442, 1), (8194, 1), (12290, 1), (16386, 1), (20482, 1), (24578, 1), (65546L, 1L), (67626L, 1L), (73194L, 1L), (73450L, 1L), (68394L, 1L), (73706L, 1L), (68650L, 1L), (74474L, 1L), (74986L, 1L), (75498L, 1L), (76010L, 1L), (68906L, 1L), (76522L, 1L), (77034L, 1L), (65578L, 1L), (69162L, 1L), (77546L, 1L), (65834L, 1L), (69418L, 1L), (69930L, 1L), (70186L, 1L), (70954L, 1L), (71210L, 1L), (66090L, 1L), (66346L, 1L), (71466L, 1L), (71594L, 1L), (71626L, 1L), (71690L, 1L), (71498L, 1L), (71530L, 1L), (71722L, 1L), (71818L, 1L), (71850L, 1L), (71882L, 1L), (71914L, 1L), (71786L, 1L), (72106L, 1L), (72138L, 1L), (72170L, 1L), (71978L, 1L), (72010L, 1L), (72202L, 1L), (72394L, 1L), (66858L, 1L), (72426L, 1L), (67370L, 1L), (77706L, 1L)], '1500009-820001': [], '400001-520004': [], '800001-920009': [], '100015-1320011': [(2, 1), (28674, 1), (32770, 1), (36866, 1), (4098, 1), (40962, 1), (45058, 1), (49154, 1), (53250, 1), (57346, 1), (61442, 1), (8194, 1), (12290, 1), (16386, 1), (20482, 1), (24578, 1), (65546L, 1L), (67626L, 1L), (73194L, 1L), (73450L, 1L), (68394L, 1L), (73706L, 1L), (68650L, 1L), (74474L, 1L), (74986L, 1L), (75498L, 1L), (76010L, 1L), (68906L, 1L), (76522L, 1L), (77034L, 1L), (65578L, 1L), (69162L, 1L), (77546L, 1L), (65834L, 1L), (69418L, 1L), (69930L, 1L), (70186L, 1L), (70954L, 1L), (71210L, 1L), (66090L, 1L), (66346L, 1L), (71466L, 1L), (71594L, 1L), (71626L, 1L), (71690L, 1L), (71498L, 1L), (71530L, 1L), (71722L, 1L), (71818L, 1L), (71850L, 1L), (71882L, 1L), (71914L, 1L), (71786L, 1L), (72106L, 1L), (72138L, 1L), (72170L, 1L), (71978L, 1L), (72010L, 1L), (72202L, 1L), (72394L, 1L), (66858L, 1L), (72426L, 1L), (67370L, 1L), (77706L, 1L)], '1500005-1320010': [(2, 1), (28674, 1), (32770, 1), (36866, 1), (4098, 1), (40962, 1), (45058, 1), (49154, 1), (53250, 1), (57346, 1), (61442, 1), (8194, 1), (12290, 1), (16386, 1), (20482, 1), (24578, 1), (67586L, 1L), (73122L, 1L), (73378L, 1L), (68354L, 1L), (73634L, 1L), (68610L, 1L), (74402L, 1L), (74914L, 1L), (75426L, 1L), (75938L, 1L), (68866L, 1L), (76450L, 1L), (76962L, 1L), (65538L, 1L), (69122L, 1L), (65794L, 1L), (69378L, 1L), (69890L, 1L), (70146L, 1L), (70914L, 1L), (71170L, 1L), (66050L, 1L), (66306L, 1L), (71426L, 1L), (71554L, 1L), (71586L, 1L), (71650L, 1L), (71458L, 1L), (71490L, 1L), (71682L, 1L), (71778L, 1L), (71810L, 1L), (71842L, 1L), (71874L, 1L), (71746L, 1L), (72066L, 1L), (72098L, 1L), (72130L, 1L), (71938L, 1L), (71970L, 1L), (72162L, 1L), (66818L, 1L), (72354L, 1L), (67330L, 1L), (77506L, 1L)], '900008-1320010': [], '1500009-920009': [(16528L, 1L)], '100015-820001': [], '1100009-920009': [(16528L, 1L)], '100015-220004': [], '1300011-1520009': [(1185L, 512L), (3894L, 1L), (11817L, 512L), (1195L, 1L), (1221L, 1L), (1225L, 1L), (3865L, 1L), (3759L, 1L), (3891L, 1L), (3909L, 1L), (3936L, 1L), (3766L, 1L), (3961L, 1L), (3962L, 1L), (3982L, 1L), (3990L, 1L), (3991L, 1L), (3992L, 1L), (3993L, 1L), (3774L, 1L), (3784L, 1L), (3807L, 1L), (3810L, 1L), (3826L, 1L), (14387L, 1L), (3865L, 1L), (3982L, 1L), (3810L, 1L), (1330L, 1L), (1395L, 1L), (1221L, 1L), (1262L, 1L), (3745L, 256L), (14377L, 256L), (1395L, 1L), (1221L, 1L), (1262L, 1L), (3745L, 256L), (14377L, 256L), (1195L, 1L), (3745L, 256L), (14377L, 256L), (3794L, 1L), (3826L, 1L), (3992L, 1L), (3993L, 1L), (3794L, 1L), (3992L, 1L), (3993L, 1L), (3766L, 1L), (1185L, 512L), (1186L, 1L), (1203L, 1L), (1442L, 1L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3967L, 1L), (3968L, 1L), (3770L, 1L), (3787L, 1L), (3789L, 1L), (3793L, 1L), (3799L, 1L), (3822L, 1L), (3745L, 256L), (11817L, 512L), (11818L, 1L), (11906L, 1L), (12074L, 1L), (14378L, 1L), (14377L, 256L), (1185L, 512L), (1186L, 1L), (1203L, 1L), (1442L, 1L), (3894L, 1L), (11817L, 512L), (11818L, 1L), (11906L, 1L), (12074L, 1L), (1195L, 1L), (1221L, 1L), (1225L, 1L), (3865L, 1L), (3759L, 1L), (3891L, 1L), (3909L, 1L), (3936L, 1L), (3766L, 1L), (3961L, 1L), (3962L, 1L), (3982L, 1L), (3990L, 1L), (3991L, 1L), (3992L, 1L), (3993L, 1L), (3774L, 1L), (3784L, 1L), (3807L, 1L), (3810L, 1L), (3826L, 1L), (14387L, 1L), (3865L, 1L), (3982L, 1L), (3810L, 1L), (1330L, 1L), (1395L, 1L), (1221L, 1L), (1262L, 1L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3967L, 1L), (3968L, 1L), (3770L, 1L), (3787L, 1L), (3789L, 1L), (3793L, 1L), (3799L, 1L), (3822L, 1L), (3745L, 256L), (14378L, 1L), (14377L, 256L), (1395L, 1L), (1221L, 1L), (1262L, 1L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3967L, 1L), (3968L, 1L), (3770L, 1L), (3787L, 1L), (3789L, 1L), (3793L, 1L), (3799L, 1L), (3822L, 1L), (3745L, 256L), (14378L, 1L), (14377L, 256L), (1195L, 1L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3967L, 1L), (3968L, 1L), (3770L, 1L), (3787L, 1L), (3789L, 1L), (3793L, 1L), (3799L, 1L), (3822L, 1L), (3745L, 256L), (14378L, 1L), (14377L, 256L), (3794L, 1L), (3826L, 1L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3770L, 1L), (3789L, 1L), (3822L, 1L), (3745L, 256L), (14378L, 1L), (14377L, 256L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3770L, 1L), (3789L, 1L), (3822L, 1L), (3745L, 256L), (14378L, 1L), (14377L, 256L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3770L, 1L), (3789L, 1L), (3822L, 1L), (3745L, 256L), (14378L, 1L), (14377L, 256L), (3992L, 1L), (3993L, 1L), (3794L, 1L), (3992L, 1L), (3993L, 1L), (3766L, 1L), (1185L, 512L), (1193L, 4L), (1186L, 1L), (1203L, 1L), (1442L, 1L), (3967L, 1L), (3968L, 1L), (3787L, 1L), (3793L, 1L), (3799L, 1L), (11817L, 512L), (11818L, 1L), (11906L, 1L), (12074L, 1L), (6114L, 1L), (2L, 1L), (130L, 1L), (34L, 1L), (66L, 1L), (98L, 1L), (162L, 1L), (418L, 1L), (674L, 1L), (930L, 1L), (1193L, 4L), (1186L, 1L), (1442L, 1L), (1698L, 1L), (1954L, 1L), (2210L, 1L), (2466L, 1L), (2722L, 1L), (2978L, 1L), (3234L, 1L), (3490L, 1L), (3746L, 1L), (3755L, 1L), (3922L, 1L), (3765L, 1L), (3770L, 1L), (3789L, 1L), (3822L, 1L), (4002L, 1L), (4066L, 1L), (4578L, 1L), (5090L, 1L), (5346L, 1L), (5858L, 1L), (6626L, 1L), (10474L, 1L), (10602L, 1L), (10730L, 1L), (6634L, 1L), (6890L, 1L), (7146L, 1L), (7402L, 1L), (7658L, 1L), (7914L, 1L), (8170L, 1L), (8426L, 1L), (8938L, 1L), (9450L, 1L), (9962L, 1L), (16426L, 1L), (10794L, 1L), (11050L, 1L), (11306L, 1L), (11562L, 1L), (11818L, 1L), (11906L, 1L), (12074L, 1L), (12330L, 1L), (12586L, 1L), (12842L, 1L), (13354L, 1L), (13610L, 1L), (13866L, 1L), (14122L, 1L), (14378L, 1L), (14634L, 1L), (14890L, 1L), (15402L, 1L), (15658L, 1L), (15914L, 1L), (16170L, 1L), (16938L, 1L), (16946L, 1L), (16954L, 1L), (17210L, 1L), (17466L, 1L), (17722L, 1L), (17978L, 1L), (18234L, 1L), (18490L, 1L), (18746L, 1L), (19258L, 1L), (19770L, 1L), (20282L, 1L), (20794L, 1L), (21050L, 1L), (21306L, 1L), (21818L, 1L)], '800001-1120009': [], '200004-920009': [(16528L, 1L)],	 '1100009-120015': []}";
	var all_deny_dst="";
	var all_permit_dsts_T="{0: [(77474L, 64L), (82093L, 512L)], 1: [], 2: [(21217L, 64L), (42421L, 1L)], 3: [(27141L, 1L)], 4: [(1, 4096L), (4097L, 1024L), (5633L, 1536L), (7169L, 3072L), (10241L, 2048L), (5121L, 256L), (5377L, 256L), (12289L, 64L), (14657L, 1536L), (16193L, 32L), (16225L, 256L), (16481L, 128L), (16609L, 16L), (16625L, 32L), (16657L, 128L), (12353L, 2304L), (16785L, 1L), (16786L, 32L), (22962L, 512L), (19122L, 256L), (19378L, 256L), (19634L, 256L), (19890L, 256L), (20146L, 256L), (20402L, 256L), (20658L, 768L), (21426L, 256L), (21682L, 256L), (21938L, 256L), (22194L, 256L), (22450L, 256L), (22706L, 256L), (16818L, 1280L), (18098L, 256L), (18354L, 256L), (18610L, 256L), (18866L, 256L), (24754L, 256L), (25010L, 256L), (25266L, 256L), (25522L, 128L), (25650L, 32L), (25682L, 128L), (23474L, 256L), (23730L, 256L), (23986L, 768L)], 5: [(1, 40960), (47361L, 2560L), (40961, 768L), (41729L, 3584L), (45313L, 1536L), (46849L, 256L), (47105L, 256L)], 6: [(1, 65536), (65537, 8L), (65545L, 32L), (72425L, 512L), (74473L, 2048L), (76521L, 1024L), (72937L, 256L), (73193L, 512L), (73705L, 256L), (73961L, 256L), (74217L, 256L), (69161L, 256L), (77545L, 128L), (69417L, 2048L), (71465L, 256L), (71721L, 64L), (71785L, 160L), (71945L, 256L), (72201L, 192L), (72393L, 32L), (65577L, 3584L), (77673L, 32L), (77705L, 8L)], 7: [(5345L, 512L), (1, 128L), (129L, 32L), (161L, 3840L), (4001L, 16L), (4017L, 48L), (4065L, 1280L), (5857L, 768L), (6625L, 8L), (8425L, 2048L), (10473L, 128L), (10601L, 192L), (6633L, 1792L), (10793L, 4096L), (14889L, 768L), (15657L, 256L), (15913L, 256L), (16169L, 768L), (16937L, 8L), (16945L, 8L), (18745L, 2048L), (16953L, 1792L), (20793L, 512L), (21305L, 512L), (21817L, 256L)], 8: [(1, 1), (2, 512L), (514L, 256L), (770L, 256L), (1026L, 64L), (1090L, 1L), (1091L, 32L), (1123L, 512L), (1635L, 256L), (1891L, 256L)], 9: [(15617L, 64L)], 10: [(1, 1024L), (1153L, 1024L), (1025L, 128L), (2177L, 32L), (2209L, 16L), (2225L, 32L), (2257L, 256L), (2513L, 128L), (2641L, 256L), (2897L, 256L), (3153L, 32L), (3185L, 16L)], 11: [(1, 512L), (513L, 64L), (577L, 16L), (594L, 512L), (593L, 1L)], 12: [(1, 512L), (513L, 64L), (577L, 16L), (594L, 512L)], 13: [(513L, 64L), (594L, 512L), (593L, 1L)], 14: [(1, 3584L), (3713L, 2048L), (8961L, 1024L), (11457L, 2048L), (5761L, 256L), (6017L, 128L), (6145L, 2816L), (9985L, 1280L), (11265L, 192L), (3585L, 128L), (13505L, 1024L), (14529L, 64L), (14593L, 512L), (15105L, 256L), (15361L, 256L), (15617L, 64L), (15681L, 32L), (15713L, 64L), (15777L, 256L), (16033L, 256L), (16289L, 112L), (16401L, 32L), (16433L, 64L), (16497L, 1L), (16498L, 32L), (16530L, 16L), (18594L, 1024L), (21666L, 512L), (23394L, 512L), (19746L, 256L), (20002L, 256L), (20258L, 128L), (20386L, 768L), (21154L, 256L), (21410L, 256L), (22178L, 256L), (22434L, 768L), (23202L, 192L), (16546L, 1280L), (17826L, 768L), (19618L, 128L), (23906L, 256L), (24162L, 256L), (24418L, 192L), (24610L, 256L), (24866L, 64L), (24930L, 32L), (24962L, 64L), (25026L, 256L), (25282L, 256L), (25538L, 112L), (25650L, 32L), (25682L, 64L)], 15: [(1, 4096), (4097, 4096), (8193, 3584L), (21825L, 2048L), (11905L, 6400L), (18305L, 3328L), (21633L, 192L), (11777L, 128L), (23905L, 1024L), (24929L, 64L), (23873L, 32L), (24993L, 512L), (25761L, 512L), (25505L, 256L), (26273L, 32L), (26305L, 32L), (26337L, 64L), (26401L, 256L), (26657L, 256L), (26913L, 160L), (27073L, 64L), (27137L, 1L), (27139L, 1L), (27140L, 1L), (27141L, 1L), (27138L, 1L), (27142L, 32L), (27174L, 16L), (29238L, 1024L), (34934L, 512L), (30390L, 256L), (30646L, 256L), (30902L, 1280L), (32182L, 256L), (32438L, 256L), (32694L, 768L), (33462L, 256L), (33718L, 256L), (33974L, 768L), (34742L, 192L), (27190L, 1280L), (28470L, 768L), (30262L, 128L), (35478L, 256L), (35446L, 32L), (36182L, 512L), (35734L, 256L), (35990L, 192L), (36694L, 96L), (36790L, 32L), (36822L, 64L), (36886L, 256L), (37142L, 256L), (37398L, 160L), (37558L, 64L)], 16: [(1, 65536), (65537, 4096), (69794L, 4096L), (73890L, 3584L), (69633, 1L), (69634L, 128L), (69762L, 32L), (77474L, 64L), (77546L, 64L), (77538L, 8L), (77610L, 4096L), (81706L, 128L), (81834L, 256L), (82093L, 512L), (82091L, 1L), (82092L, 1L), (82090L, 1L), (82605L, 32L), (82637L, 4096L), (88781L, 1024L), (86733L, 1280L), (88013L, 768L), (89805L, 8L), (89813L, 8L), (91613L, 2048L), (89821L, 1792L), (93661L, 512L), (94173L, 512L), (94685L, 256L)], 17: [(1, 4096), (4097, 1024L), (5249L, 1024L), (5121L, 128L), (6273L, 256L), (6529L, 32L), (6561L, 16L), (6577L, 32L), (6609L, 1L), (6610L, 256L), (6866L, 128L), (6994L, 256L), (7250L, 256L), (7506L, 8L), (7514L, 256L), (7770L, 32L), (7802L, 16L), (7818L, 4L), (7822L, 4L)], 18: [(1, 4096), (4097, 4096), (8289L, 4096L), (12385L, 1024L), (14177L, 1536L), (19041L, 2048L), (13409L, 768L), (15713L, 3328L), (8193, 64L), (8257L, 32L), (21153L, 64L), (21089L, 32L), (21121L, 32L), (23585L, 1536L), (25121L, 32L), (25153L, 256L), (25409L, 256L), (25665L, 208L), (25873L, 32L), (25905L, 128L), (21281L, 2304L), (26033L, 16384L), (42422L, 1L), (42417L, 1L), (42419L, 1L), (42420L, 1L), (42421L, 1L), (42418L, 1L), (42423L, 32L), (49207L, 512L), (44855L, 768L), (45623L, 256L), (45879L, 256L), (46135L, 256L), (46391L, 512L), (46903L, 768L), (47671L, 256L), (47927L, 256L), (48183L, 256L), (48439L, 256L), (48695L, 256L), (48951L, 256L), (42455L, 64L), (42519L, 32L), (42551L, 1280L), (43831L, 256L), (44087L, 256L), (44343L, 256L), (44599L, 256L), (49719L, 32L), (49751L, 16L), (51111L, 256L), (51367L, 256L), (51623L, 256L), (51879L, 256L), (52135L, 128L), (52263L, 32L), (52295L, 128L), (49767L, 64L), (49831L, 256L), (50087L, 256L), (50343L, 768L)], 19: [(513L, 64L), (577L, 16L), (594L, 512L)], 20: [(1, 65536), (72353L, 512L), (74401L, 2048L), (76449L, 1024L), (72865L, 256L), (73121L, 512L), (73633L, 256L), (73889L, 256L), (74145L, 256L), (69121L, 256L), (69377L, 2048L), (71425L, 256L), (71681L, 64L), (71745L, 160L), (71905L, 256L), (72161L, 192L), (65537, 3584L), (77473L, 32L), (77505L, 8L)], 21: [(1, 4096), (4097, 1024L), (5249L, 1024L), (5121L, 128L), (6273L, 256L), (6529L, 32L), (6561L, 16L), (6577L, 32L), (6610L, 256L), (6866L, 128L), (6994L, 256L), (7250L, 256L), (7506L, 8L), (7514L, 256L), (7770L, 32L), (7802L, 16L)]}";
	var all_permit_dsts="{'200004-120015': [[171, 64, 255, [128, 191]], [172, 20, [4, 5], [0, 255]]], '800001-120015': [], '1300011-420001': [[171, 67, 4, [128, 191]], [172, 20, 0, 75]], '1300011-820001': [[172, 20, 0, 235]], '900009-1120009': [[171, 64, [48, 63], [0, 255]], [171, 64, [84, 87], [0, 255]], [171, 64, [108, 113], [0, 255]], [171, 64, [116, 127], [0, 255]], [171, 64, [160, 167], [0, 255]], [171, 64, 102, [0, 255]], [171, 64, 104, [0, 255]], [171, 66, 250, [128, 191]], [171, 67, [100, 105], [0, 255]], [171, 67, 106, [0, 31]], [171, 67, 204, [0, 255]], [171, 67, 230, [0, 127]], [171, 67, 230, [192, 207]], [171, 67, 230, [224, 255]], [171, 67, 231, [0, 127]], [171, 67, [80, 88], [0, 255]], [172, 20, 0, 67], [172, 20, 10, [64, 95]], [172, 24, [166, 167], [0, 255]], [172, 24, 102, [0, 255]], [172, 24, 104, [0, 255]], [172, 24, 108, [0, 255]], [172, 24, 110, [0, 255]], [172, 24, 112, [0, 255]], [172, 24, 116, [0, 255]], [172, 24, [118, 120], [0, 255]], [172, 24, 122, [0, 255]], [172, 24, 124, [0, 255]], [172, 24, 126, [0, 255]], [172, 24, 160, [0, 255]], [172, 24, 162, [0, 255]], [172, 24, 164, [0, 255]], [172, 24, [48, 52], [0, 255]], [172, 24, 54, [0, 255]], [172, 24, 56, [0, 255]], [172, 24, 60, [0, 255]], [172, 24, 84, [0, 255]], [172, 27, 100, [0, 255]], [172, 27, 104, [0, 255]], [172, 27, 204, [0, 255]], [172, 27, 230, [0, 127]], [172, 27, 230, [224, 255]], [172, 27, 231, [0, 127]], [172, 27, 80, [0, 255]], [172, 27, 84, [0, 255]], [172, 27, [86, 88], [0, 255]]], '200004-520004': [[10, 30, [0, 159], [0, 255]], [172, 19, [154, 163], [0, 255]], [172, 19, [40, 42], [0, 255]], [172, 19, [64, 77], [0, 255]], [172, 19, [81, 86], [0, 255]], [172, 19, 96, [0, 255]], [172, 19, 97, [0, 255]]], '100015-1320011': [[10, 31, [0, 255], [0, 255]], [128, 12, 1, [248, 255]], [128, 12, 2, [0, 31]], [172, 19, [78, 79], [0, 255]], [172, 19, [140, 147], [0, 255]], [172, 19, [150, 153], [0, 255]], [172, 19, 118, [0, 255]], [172, 19, [124, 125], [0, 255]], [172, 19, 132, [0, 255]], [172, 19, 134, [0, 255]], [172, 19, 136, [0, 255]], [172, 19, 21, [0, 255]], [172, 19, 248, [0, 127]], [172, 19, [32, 39], [0, 255]], [172, 19, 60, [0, 255]], [172, 19, 61, [0, 63]], [172, 19, 61, [96, 255]], [172, 19, 62, [0, 255]], [172, 19, 63, [0, 191]], [172, 19, 63, [224, 255]], [172, 19, [2, 15], [0, 255]], [172, 20, 11, [0, 31]], [172, 26, 5, [24, 31]]], '200004-1520009': [[171, 64, [96, 97], [0, 255]], [171, 64, 15, [0, 127]], [171, 64, 15, [160, 191]], [171, 64, [64, 78], [0, 255]], [171, 64, 79, [128, 143]], [171, 64, 79, [176, 223]], [171, 64, [90, 94], [0, 255]], [171, 64, [99, 101], [0, 255]], [171, 66, 4, [128, 135]], [171, 67, [72, 79], [0, 255]], [171, 67, 231, [128, 255]], [171, 67, 234, [0, 191]], [171, 67, [64, 70], [0, 255]], [172, 24, [64, 79], [0, 255]], [172, 24, [90, 92], [0, 255]], [172, 24, 94, [0, 255]], [172, 24, 96, [0, 255]], [172, 24, [99, 101], [0, 255]], [172, 26, 4, [128, 135]], [172, 26, 4, [152, 159]], [172, 27, [72, 79], [0, 255]], [172, 27, [64, 70], [0, 255]], [192, 168, [128, 129], [0, 255]], [192, 168, [136, 137], [0, 255]], [192, 168, 252, [0, 255]]], '1100009-520004': [[10, 30, [0, 159], [0, 255]], [172, 19, [154, 163], [0, 255]], [172, 19, [40, 42], [0, 255]], [172, 19, [64, 77], [0, 255]], [172, 19, [81, 86], [0, 255]], [172, 19, 96, [0, 255]], [172, 19, 97, [0, 255]]], '1500009-420001': [[171, 67, 4, [128, 191]], [172, 20, 0, 75]], '1300010-1520005': [[10, 3, 255, 254], [171, 64, [88, 89], [0, 255]], [171, 64, 95, [0, 255]], [171, 64, 98, [0, 255]], [171, 66, 251, [0, 63]], [172, 20, 0, 131], [172, 20, 10, [128, 159]], [172, 24, [88, 89], [0, 255]], [172, 24, 95, [0, 255]], [172, 24, 98, [0, 255]]], '1300011-920009': [[171, 67, 222, [0, 63]]], '900008-920030': [[171, 64, [176, 179], [0, 255]], [171, 64, [198, 201], [0, 255]], [171, 64, 181, [128, 255]], [171, 67, 222, [64, 95]], [171, 67, 229, [112, 127]], [172, 20, 10, [224, 255]], [172, 24, 176, [0, 255]], [172, 24, 181, [128, 255]], [172, 24, 198, [0, 255]], [172, 24, 200, [0, 255]], [172, 27, 222, [64, 95]], [172, 27, 229, [112, 127]]], '900009-220004': [[171, 64, [10, 11], [0, 255]], [171, 66, 255, [128, 191]], [171, 67, 0, [240, 255]], [172, 20, [6, 7], [0, 255]], [172, 20, 0, 203]], '400001-920009': [], '100015-1520009': [], '1500009-1320011': [[10, 31, [0, 255], [0, 255]], [128, 12, 1, [248, 255]], [128, 12, 2, [0, 31]], [172, 19, [78, 79], [0, 255]], [172, 19, [140, 147], [0, 255]], [172, 19, [150, 153], [0, 255]], [172, 19, 118, [0, 255]], [172, 19, [124, 125], [0, 255]], [172, 19, 132, [0, 255]], [172, 19, 134, [0, 255]], [172, 19, 136, [0, 255]], [172, 19, 21, [0, 255]], [172, 19, 248, [0, 127]], [172, 19, [32, 39], [0, 255]], [172, 19, 60, [0, 255]], [172, 19, 61, [0, 63]], [172, 19, 61, [96, 255]], [172, 19, 62, [0, 255]], [172, 19, 63, [0, 191]], [172, 19, 63, [224, 255]], [172, 19, [2, 15], [0, 255]], [172, 20, 11, [0, 31]], [172, 26, 5, [24, 31]]], '100015-420001': [[171, 67, 4, [128, 191]], [172, 20, 0, 75]], '1500009-220004': [[171, 64, [10, 11], [0, 255]], [171, 66, 255, [128, 191]], [171, 67, 0, [240, 255]], [172, 20, [6, 7], [0, 255]], [172, 20, 0, 203]], '800001-220004': [[171, 64, [10, 11], [0, 255]], [171, 66, 255, [128, 191]], [171, 67, 0, [240, 255]], [172, 20, [6, 7], [0, 255]]], '1500009-820001': [[172, 20, 0, 235]], '900009-820001': [[172, 20, 0, 235]], '1300011-220004': [[171, 66, 255, [128, 191]], [172, 20, [6, 7], [0, 255]], [172, 20, 0, 203]], '900030-1520005': [[10, 3, 255, 254], [171, 64, [88, 89], [0, 255]], [171, 64, 95, [0, 255]], [171, 64, 98, [0, 255]], [171, 66, 251, [0, 63]], [172, 20, 0, 131], [172, 20, 10, [128, 159]], [172, 24, [88, 89], [0, 255]], [172, 24, 95, [0, 255]], [172, 24, 98, [0, 255]]], '200004-1320011': [[10, 31, [0, 255], [0, 255]], [128, 12, 1, [248, 255]], [128, 12, 2, [0, 31]], [172, 19, [78, 79], [0, 255]], [172, 19, [140, 147], [0, 255]], [172, 19, [150, 153], [0, 255]], [172, 19, 118, [0, 255]], [172, 19, [124, 125], [0, 255]], [172, 19, 132, [0, 255]], [172, 19, 134, [0, 255]], [172, 19, 136, [0, 255]], [172, 19, 21, [0, 255]], [172, 19, 248, [0, 127]], [172, 19, [32, 39], [0, 255]], [172, 19, 60, [0, 255]], [172, 19, 61, [0, 63]], [172, 19, 61, [96, 255]], [172, 19, 62, [0, 255]], [172, 19, 63, [0, 191]], [172, 19, 63, [224, 255]], [172, 19, [2, 15], [0, 255]], [172, 20, 11, [0, 31]], [172, 26, 5, [24, 31]]], '200004-920009': [[171, 64, [32, 45], [0, 255]], [171, 64, [168, 175], [0, 255]], [171, 64, [194, 197], [0, 255]], [171, 64, [208, 215], [0, 255]], [171, 64, 180, [0, 255]], [171, 64, 181, [0, 127]], [171, 64, [182, 192], [0, 255]], [171, 64, [202, 206], [0, 255]], [171, 64, 207, [0, 191]], [171, 64, 47, [0, 127]], [171, 66, [136, 139], [0, 255]], [171, 66, 251, [192, 255]], [171, 67, [146, 147], [0, 255]], [171, 67, 200, [0, 255]], [171, 67, 203, [0, 255]], [171, 67, 222, [0, 63]], [171, 67, 222, [128, 159]], [171, 67, 222, [192, 255]], [171, 67, 223, [0, 255]], [171, 67, 228, [0, 255]], [171, 67, 229, [0, 111]], [171, 67, 229, [128, 159]], [171, 67, 229, [192, 255]], [172, 20, 0, 227], [172, 20, 10, [224, 255]], [172, 20, 87, [0, 15]], [172, 24, [42, 45], [0, 255]], [172, 24, [196, 197], [0, 255]], [172, 24, [208, 209], [0, 255]], [172, 24, 168, [0, 255]], [172, 24, 180, [0, 255]], [172, 24, 181, [0, 127]], [172, 24, [182, 184], [0, 255]], [172, 24, 192, [0, 255]], [172, 24, 194, [0, 255]], [172, 24, 202, [0, 255]], [172, 24, [204, 206], [0, 255]], [172, 24, 207, [0, 191]], [172, 24, [32, 36], [0, 255]], [172, 24, [38, 40], [0, 255]], [172, 24, 47, [0, 127]], [172, 26, 136, [0, 255]], [172, 27, 146, [0, 255]], [172, 27, 200, [64, 255]], [172, 27, 203, [0, 255]], [172, 27, 222, [0, 63]], [172, 27, 222, [128, 159]], [172, 27, 222, [192, 255]], [172, 27, 223, [0, 255]], [172, 27, 228, [0, 255]], [172, 27, 229, [0, 111]], [172, 27, 229, [128, 159]], [172, 27, 229, [192, 255]]], '200004-820001': [[10, 62, [112, 127], [0, 255]], [10, 63, [112, 127], [0, 255]], [171, 64, [32, 45], [0, 255]], [171, 64, [208, 215], [0, 255]], [171, 64, [168, 192], [0, 255]], [171, 64, [194, 206], [0, 255]], [171, 64, 207, [0, 191]], [171, 64, 47, [0, 127]], [171, 66, [136, 139], [0, 255]], [171, 66, 251, [192, 255]], [171, 66, 4, [224, 255]], [171, 67, [146, 147], [0, 255]], [171, 67, [202, 203], [0, 255]], [171, 67, 200, [0, 255]], [171, 67, 222, [64, 95]], [171, 67, 222, [128, 159]], [171, 67, 222, [192, 255]], [171, 67, 223, [0, 255]], [171, 67, 228, [0, 255]], [171, 67, 229, [0, 159]], [171, 67, 229, [192, 255]], [172, 20, 0, 14], [172, 20, 0, 225], [172, 20, 0, 227], [172, 20, 0, 235], [172, 20, 0, 26], [172, 20, 10, [224, 255]], [172, 20, 87, [0, 15]], [172, 24, [42, 45], [0, 255]], [172, 24, [208, 209], [0, 255]], [172, 24, 168, [0, 255]], [172, 24, 176, [0, 255]], [172, 24, [180, 184], [0, 255]], [172, 24, 192, [0, 255]], [172, 24, 194, [0, 255]], [172, 24, [196, 198], [0, 255]], [172, 24, 200, [0, 255]], [172, 24, 202, [0, 255]], [172, 24, [204, 206], [0, 255]], [172, 24, 207, [0, 191]], [172, 24, [32, 36], [0, 255]], [172, 24, [38, 40], [0, 255]], [172, 24, 47, [0, 127]], [172, 26, 136, [0, 255]], [172, 26, 4, [224, 255]], [172, 27, [202, 203], [0, 255]], [172, 27, 146, [0, 255]], [172, 27, 200, [64, 255]], [172, 27, 222, [0, 95]], [172, 27, 222, [128, 159]], [172, 27, 222, [192, 255]], [172, 27, 223, [0, 255]], [172, 27, 228, [0, 255]], [172, 27, 229, [0, 159]], [172, 27, 229, [192, 255]]], '500004-1320011': [[10, 31, [0, 255], [0, 255]], [128, 12, 1, [248, 255]], [128, 12, 2, [0, 31]], [172, 19, [78, 79], [0, 255]], [172, 19, [140, 147], [0, 255]], [172, 19, [150, 153], [0, 255]], [172, 19, 118, [0, 255]], [172, 19, [124, 125], [0, 255]], [172, 19, 132, [0, 255]], [172, 19, 134, [0, 255]], [172, 19, 136, [0, 255]], [172, 19, 21, [0, 255]], [172, 19, 248, [0, 127]], [172, 19, [32, 39], [0, 255]], [172, 19, 60, [0, 255]], [172, 19, 61, [0, 63]], [172, 19, 61, [96, 255]], [172, 19, 62, [0, 255]], [172, 19, 63, [0, 191]], [172, 19, 63, [224, 255]], [172, 19, [2, 15], [0, 255]], [172, 20, 11, [0, 31]], [172, 26, 5, [24, 31]]], '800001-920009': [], '900009-1520009': [[171, 64, [96, 97], [0, 255]], [171, 64, 15, [0, 127]], [171, 64, 15, [160, 191]], [171, 64, [64, 78], [0, 255]], [171, 64, 79, [128, 143]], [171, 64, 79, [176, 223]], [171, 64, [90, 94], [0, 255]], [171, 64, [99, 101], [0, 255]], [171, 66, 4, [128, 135]], [171, 67, [72, 79], [0, 255]], [171, 67, 231, [128, 255]], [171, 67, 234, [0, 191]], [171, 67, [64, 70], [0, 255]], [172, 24, [64, 79], [0, 255]], [172, 24, [90, 92], [0, 255]], [172, 24, 94, [0, 255]], [172, 24, 96, [0, 255]], [172, 24, [99, 101], [0, 255]], [172, 26, 4, [128, 135]], [172, 26, 4, [152, 159]], [172, 27, [72, 79], [0, 255]], [172, 27, [64, 70], [0, 255]], [192, 168, [128, 129], [0, 255]], [192, 168, [136, 137], [0, 255]], [192, 168, 252, [0, 255]]], '1300010-920008': [], '800001-420001': [], '900009-120015': [[10, 3, [0, 255], [0, 255]], [10, 62, [64, 79], [0, 255]], [171, 64, [64, 79], [0, 255]], [171, 64, [88, 101], [0, 255]], [171, 64, 0, 18], [171, 64, 15, [0, 127]], [171, 64, 15, [160, 191]], [171, 64, 255, [128, 191]], [171, 66, 251, [0, 63]], [171, 66, 4, [128, 135]], [171, 67, [64, 79], [0, 255]], [171, 67, 231, [128, 255]], [171, 67, 234, [0, 255]], [172, 20, [4, 5], [0, 255]], [172, 20, 0, 129], [172, 20, 0, 131], [172, 20, 0, 8], [172, 20, 10, [128, 159]], [172, 24, [64, 79], [0, 255]], [172, 24, [98, 101], [0, 255]], [172, 24, [88, 92], [0, 255]], [172, 24, [94, 96], [0, 255]], [172, 26, 4, [128, 135]], [172, 26, 4, [152, 159]], [172, 27, [72, 79], [0, 255]], [172, 27, [64, 70], [0, 255]], [192, 168, [128, 129], [0, 255]], [192, 168, [136, 137], [0, 255]], [192, 168, 252, [0, 255]]], '1100009-920009': [[171, 64, [32, 45], [0, 255]], [171, 64, [168, 175], [0, 255]], [171, 64, [194, 197], [0, 255]], [171, 64, [208, 215], [0, 255]], [171, 64, 180, [0, 255]], [171, 64, 181, [0, 127]], [171, 64, [182, 192], [0, 255]], [171, 64, [202, 206], [0, 255]], [171, 64, 207, [0, 191]], [171, 64, 47, [0, 127]], [171, 66, [136, 139], [0, 255]], [171, 66, 251, [192, 255]], [171, 67, [146, 147], [0, 255]], [171, 67, 200, [0, 255]], [171, 67, 203, [0, 255]], [171, 67, 222, [0, 63]], [171, 67, 222, [128, 159]], [171, 67, 222, [192, 255]], [171, 67, 223, [0, 255]], [171, 67, 228, [0, 255]], [171, 67, 229, [0, 111]], [171, 67, 229, [128, 159]], [171, 67, 229, [192, 255]], [172, 20, 0, 227], [172, 20, 10, [224, 255]], [172, 20, 87, [0, 15]], [172, 24, [42, 45], [0, 255]], [172, 24, [196, 197], [0, 255]], [172, 24, [208, 209], [0, 255]], [172, 24, 168, [0, 255]], [172, 24, 180, [0, 255]], [172, 24, 181, [0, 127]], [172, 24, [182, 184], [0, 255]], [172, 24, 192, [0, 255]], [172, 24, 194, [0, 255]], [172, 24, 202, [0, 255]], [172, 24, [204, 206], [0, 255]], [172, 24, 207, [0, 191]], [172, 24, [32, 36], [0, 255]], [172, 24, [38, 40], [0, 255]], [172, 24, 47, [0, 127]], [172, 26, 136, [0, 255]], [172, 27, 146, [0, 255]], [172, 27, 200, [64, 255]], [172, 27, 203, [0, 255]], [172, 27, 222, [0, 63]], [172, 27, 222, [128, 159]], [172, 27, 222, [192, 255]], [172, 27, 223, [0, 255]], [172, 27, 228, [0, 255]], [172, 27, 229, [0, 111]], [172, 27, 229, [128, 159]], [172, 27, 229, [192, 255]]], '400001-1520009': [], '900009-1320011': [], '900030-1320010': [], '900030-920008': [[10, 63, [112, 127], [0, 255]], [171, 64, [176, 179], [0, 255]], [171, 64, [198, 201], [0, 255]], [171, 64, 181, [128, 255]], [171, 67, 202, [0, 255]], [171, 67, 222, [64, 95]], [171, 67, 229, [112, 127]], [172, 20, 10, [224, 255]], [172, 24, 1, 23], [172, 24, 176, [0, 255]], [172, 24, 181, [128, 255]], [172, 24, 198, [0, 255]], [172, 24, 200, [0, 255]], [172, 26, 4, [248, 255]], [172, 27, 202, [0, 255]], [172, 27, 222, [64, 95]], [172, 27, 229, [112, 127]], [192, 168, 209, [60, 63]], [192, 168, 209, [224, 227]]], '1300011-520004': [[10, 30, [0, 159], [0, 255]], [172, 19, [154, 163], [0, 255]], [172, 19, [40, 42], [0, 255]], [172, 19, [64, 77], [0, 255]], [172, 19, [81, 86], [0, 255]], [172, 19, 96, [0, 255]], [172, 19, 97, [0, 255]]], '500004-420001': [[171, 67, 4, [128, 191]], [172, 20, 0, 75]], '200004-420001': [[10, 62, [32, 47], [0, 255]], [10, 63, [32, 47], [0, 255]], [171, 64, [48, 63], [0, 255]], [171, 64, [84, 87], [0, 255]], [171, 64, [108, 113], [0, 255]], [171, 64, [160, 167], [0, 255]], [171, 64, [102, 104], [0, 255]], [171, 64, [115, 127], [0, 255]], [171, 64, 2, [0, 63]], [171, 64, 2, [128, 159]], [171, 66, 250, [128, 191]], [171, 66, 4, [64, 95]], [171, 66, 66, [80, 111]], [171, 67, [100, 105], [0, 255]], [171, 67, 106, [0, 31]], [171, 67, 108, [0, 255]], [171, 67, 204, [0, 255]], [171, 67, 230, [0, 207]], [171, 67, 230, [224, 255]], [171, 67, 231, [0, 127]], [171, 67, [80, 88], [0, 255]], [172, 16, [128, 191], [0, 255]], [172, 20, 0, 130], [172, 20, 0, 4], [172, 20, 0, 65], [172, 20, 0, 67], [172, 20, 0, 75], [172, 20, 0, 9], [172, 20, 10, [64, 95]], [172, 24, [166, 167], [0, 255]], [172, 24, [102, 104], [0, 255]], [172, 24, 108, [0, 255]], [172, 24, 110, [0, 255]], [172, 24, 112, [0, 255]], [172, 24, [115, 116], [0, 255]], [172, 24, [118, 120], [0, 255]], [172, 24, 122, [0, 255]], [172, 24, 124, [0, 255]], [172, 24, 126, [0, 255]], [172, 24, 160, [0, 255]], [172, 24, 162, [0, 255]], [172, 24, 164, [0, 255]], [172, 24, 2, [0, 63]], [172, 24, 2, [128, 159]], [172, 24, [48, 52], [0, 255]], [172, 24, 54, [0, 255]], [172, 24, 56, [0, 255]], [172, 24, 60, [0, 255]], [172, 24, 84, [0, 255]], [172, 26, 4, [64, 95]], [172, 26, 66, [96, 111]], [172, 27, 100, [0, 255]], [172, 27, 104, [0, 255]], [172, 27, 108, [0, 255]], [172, 27, 204, [0, 255]], [172, 27, 230, [0, 127]], [172, 27, 230, [224, 255]], [172, 27, 231, [0, 127]], [172, 27, 36, [64, 127]], [172, 27, 80, [0, 255]], [172, 27, 84, [0, 255]], [172, 27, [86, 88], [0, 255]]], '500004-820001': [[172, 20, 0, 235]], '1500009-920009': [[171, 64, [32, 45], [0, 255]], [171, 64, [168, 175], [0, 255]], [171, 64, [194, 197], [0, 255]], [171, 64, [208, 215], [0, 255]], [171, 64, 180, [0, 255]], [171, 64, 181, [0, 127]], [171, 64, [182, 192], [0, 255]], [171, 64, [202, 206], [0, 255]], [171, 64, 207, [0, 191]], [171, 64, 47, [0, 127]], [171, 66, [136, 139], [0, 255]], [171, 66, 251, [192, 255]], [171, 67, [146, 147], [0, 255]], [171, 67, 200, [0, 255]], [171, 67, 203, [0, 255]], [171, 67, 222, [0, 63]], [171, 67, 222, [128, 159]], [171, 67, 222, [192, 255]], [171, 67, 223, [0, 255]], [171, 67, 228, [0, 255]], [171, 67, 229, [0, 111]], [171, 67, 229, [128, 159]], [171, 67, 229, [192, 255]], [172, 20, 0, 227], [172, 20, 10, [224, 255]], [172, 20, 87, [0, 15]], [172, 24, [42, 45], [0, 255]], [172, 24, [196, 197], [0, 255]], [172, 24, [208, 209], [0, 255]], [172, 24, 168, [0, 255]], [172, 24, 180, [0, 255]], [172, 24, 181, [0, 127]], [172, 24, [182, 184], [0, 255]], [172, 24, 192, [0, 255]], [172, 24, 194, [0, 255]], [172, 24, 202, [0, 255]], [172, 24, [204, 206], [0, 255]], [172, 24, 207, [0, 191]], [172, 24, [32, 36], [0, 255]], [172, 24, [38, 40], [0, 255]], [172, 24, 47, [0, 127]], [172, 26, 136, [0, 255]], [172, 27, 146, [0, 255]], [172, 27, 200, [64, 255]], [172, 27, 203, [0, 255]], [172, 27, 222, [0, 63]], [172, 27, 222, [128, 159]], [172, 27, 222, [192, 255]], [172, 27, 223, [0, 255]], [172, 27, 228, [0, 255]], [172, 27, 229, [0, 111]], [172, 27, 229, [128, 159]], [172, 27, 229, [192, 255]]], '1500009-1120009': [[171, 64, [48, 63], [0, 255]], [171, 64, [84, 87], [0, 255]], [171, 64, [108, 113], [0, 255]], [171, 64, [116, 127], [0, 255]], [171, 64, [160, 167], [0, 255]], [171, 64, 102, [0, 255]], [171, 64, 104, [0, 255]], [171, 66, 250, [128, 191]], [171, 67, [100, 105], [0, 255]], [171, 67, 106, [0, 31]], [171, 67, 204, [0, 255]], [171, 67, 230, [0, 127]], [171, 67, 230, [192, 207]], [171, 67, 230, [224, 255]], [171, 67, 231, [0, 127]], [171, 67, [80, 88], [0, 255]], [172, 20, 0, 67], [172, 20, 10, [64, 95]], [172, 24, [166, 167], [0, 255]], [172, 24, 102, [0, 255]], [172, 24, 104, [0, 255]], [172, 24, 108, [0, 255]], [172, 24, 110, [0, 255]], [172, 24, 112, [0, 255]], [172, 24, 116, [0, 255]], [172, 24, [118, 120], [0, 255]], [172, 24, 122, [0, 255]], [172, 24, 124, [0, 255]], [172, 24, 126, [0, 255]], [172, 24, 160, [0, 255]], [172, 24, 162, [0, 255]], [172, 24, 164, [0, 255]], [172, 24, [48, 52], [0, 255]], [172, 24, 54, [0, 255]], [172, 24, 56, [0, 255]], [172, 24, 60, [0, 255]], [172, 24, 84, [0, 255]], [172, 27, 100, [0, 255]], [172, 27, 104, [0, 255]], [172, 27, 204, [0, 255]], [172, 27, 230, [0, 127]], [172, 27, 230, [224, 255]], [172, 27, 231, [0, 127]], [172, 27, 80, [0, 255]], [172, 27, 84, [0, 255]], [172, 27, [86, 88], [0, 255]]], '400001-220004': [[171, 66, 255, [128, 191]], [171, 67, 0, [240, 255]], [172, 20, [6, 7], [0, 255]]], '400001-1120009': [], '1100009-1320011': [[10, 31, [0, 255], [0, 255]], [128, 12, 1, [248, 255]], [128, 12, 2, [0, 31]], [172, 19, [78, 79], [0, 255]], [172, 19, [140, 147], [0, 255]], [172, 19, [150, 153], [0, 255]], [172, 19, 118, [0, 255]], [172, 19, [124, 125], [0, 255]], [172, 19, 132, [0, 255]], [172, 19, 134, [0, 255]], [172, 19, 136, [0, 255]], [172, 19, 21, [0, 255]], [172, 19, 248, [0, 127]], [172, 19, [32, 39], [0, 255]], [172, 19, 60, [0, 255]], [172, 19, 61, [0, 63]], [172, 19, 61, [96, 255]], [172, 19, 62, [0, 255]], [172, 19, 63, [0, 191]], [172, 19, 63, [224, 255]], [172, 19, [2, 15], [0, 255]], [172, 20, 11, [0, 31]], [172, 26, 5, [24, 31]]], '400001-120015': [], '1100009-820001': [[172, 20, 0, 235]], '1500005-920030': [[171, 64, [176, 179], [0, 255]], [171, 64, [198, 201], [0, 255]], [171, 64, 181, [128, 255]], [171, 67, 222, [64, 95]], [171, 67, 229, [112, 127]], [172, 20, 10, [224, 255]], [172, 24, 176, [0, 255]], [172, 24, 181, [128, 255]], [172, 24, 198, [0, 255]], [172, 24, 200, [0, 255]], [172, 27, 222, [64, 95]], [172, 27, 229, [112, 127]]], '800001-1520009': [], '500004-1120009': [[171, 64, [48, 63], [0, 255]], [171, 64, [84, 87], [0, 255]], [171, 64, [108, 113], [0, 255]], [171, 64, [116, 127], [0, 255]], [171, 64, [160, 167], [0, 255]], [171, 64, 102, [0, 255]], [171, 64, 104, [0, 255]], [171, 66, 250, [128, 191]], [171, 67, [100, 105], [0, 255]], [171, 67, 106, [0, 31]], [171, 67, 204, [0, 255]], [171, 67, 230, [0, 127]], [171, 67, 230, [192, 207]], [171, 67, 230, [224, 255]], [171, 67, 231, [0, 127]], [171, 67, [80, 88], [0, 255]], [172, 20, 0, 67], [172, 20, 10, [64, 95]], [172, 24, [166, 167], [0, 255]], [172, 24, 102, [0, 255]], [172, 24, 104, [0, 255]], [172, 24, 108, [0, 255]], [172, 24, 110, [0, 255]], [172, 24, 112, [0, 255]], [172, 24, 116, [0, 255]], [172, 24, [118, 120], [0, 255]], [172, 24, 122, [0, 255]], [172, 24, 124, [0, 255]], [172, 24, 126, [0, 255]], [172, 24, 160, [0, 255]], [172, 24, 162, [0, 255]], [172, 24, 164, [0, 255]], [172, 24, [48, 52], [0, 255]], [172, 24, 54, [0, 255]], [172, 24, 56, [0, 255]], [172, 24, 60, [0, 255]], [172, 24, 84, [0, 255]], [172, 27, 100, [0, 255]], [172, 27, 104, [0, 255]], [172, 27, 204, [0, 255]], [172, 27, 230, [0, 127]], [172, 27, 230, [224, 255]], [172, 27, 231, [0, 127]], [172, 27, 80, [0, 255]], [172, 27, 84, [0, 255]], [172, 27, [86, 88], [0, 255]]], '100015-220004': [[171, 66, 255, [128, 191]], [172, 20, [6, 7], [0, 255]], [172, 20, 0, 203]], '500004-120015': [[10, 3, [0, 255], [0, 255]], [10, 62, [64, 79], [0, 255]], [171, 64, [64, 79], [0, 255]], [171, 64, [88, 101], [0, 255]], [171, 64, 0, 18], [171, 64, 15, [0, 127]], [171, 64, 15, [160, 191]], [171, 64, 255, [128, 191]], [171, 66, 251, [0, 63]], [171, 66, 4, [128, 135]], [171, 67, [64, 79], [0, 255]], [171, 67, 231, [128, 255]], [171, 67, 234, [0, 255]], [172, 20, [4, 5], [0, 255]], [172, 20, 0, 129], [172, 20, 0, 131], [172, 20, 0, 8], [172, 20, 10, [128, 159]], [172, 24, [64, 79], [0, 255]], [172, 24, [98, 101], [0, 255]], [172, 24, [88, 92], [0, 255]], [172, 24, [94, 96], [0, 255]], [172, 26, 4, [128, 135]], [172, 26, 4, [152, 159]], [172, 27, [72, 79], [0, 255]], [172, 27, [64, 70], [0, 255]], [192, 168, [128, 129], [0, 255]], [192, 168, [136, 137], [0, 255]], [192, 168, 252, [0, 255]]], '500004-920009': [[171, 64, [32, 45], [0, 255]], [171, 64, [168, 175], [0, 255]], [171, 64, [194, 197], [0, 255]], [171, 64, [208, 215], [0, 255]], [171, 64, 180, [0, 255]], [171, 64, 181, [0, 127]], [171, 64, [182, 192], [0, 255]], [171, 64, [202, 206], [0, 255]], [171, 64, 207, [0, 191]], [171, 64, 47, [0, 127]], [171, 66, [136, 139], [0, 255]], [171, 66, 251, [192, 255]], [171, 67, [146, 147], [0, 255]], [171, 67, 200, [0, 255]], [171, 67, 203, [0, 255]], [171, 67, 222, [0, 63]], [171, 67, 222, [128, 159]], [171, 67, 222, [192, 255]], [171, 67, 223, [0, 255]], [171, 67, 228, [0, 255]], [171, 67, 229, [0, 111]], [171, 67, 229, [128, 159]], [171, 67, 229, [192, 255]], [172, 20, 0, 227], [172, 20, 10, [224, 255]], [172, 20, 87, [0, 15]], [172, 24, [42, 45], [0, 255]], [172, 24, [196, 197], [0, 255]], [172, 24, [208, 209], [0, 255]], [172, 24, 168, [0, 255]], [172, 24, 180, [0, 255]], [172, 24, 181, [0, 127]], [172, 24, [182, 184], [0, 255]], [172, 24, 192, [0, 255]], [172, 24, 194, [0, 255]], [172, 24, 202, [0, 255]], [172, 24, [204, 206], [0, 255]], [172, 24, 207, [0, 191]], [172, 24, [32, 36], [0, 255]], [172, 24, [38, 40], [0, 255]], [172, 24, 47, [0, 127]], [172, 26, 136, [0, 255]], [172, 27, 146, [0, 255]], [172, 27, 200, [64, 255]], [172, 27, 203, [0, 255]], [172, 27, 222, [0, 63]], [172, 27, 222, [128, 159]], [172, 27, 222, [192, 255]], [172, 27, 223, [0, 255]], [172, 27, 228, [0, 255]], [172, 27, 229, [0, 111]], [172, 27, 229, [128, 159]], [172, 27, 229, [192, 255]]], '900008-1320010': [], '800001-1320011': [], '1100009-420001': [[171, 67, 4, [128, 191]], [172, 20, 0, 75]], '900009-520004': [[10, 30, [0, 159], [0, 255]], [172, 19, [154, 163], [0, 255]], [172, 19, [40, 42], [0, 255]], [172, 19, [64, 77], [0, 255]], [172, 19, [81, 86], [0, 255]], [172, 19, 96, [0, 255]], [172, 19, 97, [0, 255]]], '1100009-1520009': [[171, 64, [96, 97], [0, 255]], [171, 64, 15, [0, 127]], [171, 64, 15, [160, 191]], [171, 64, [64, 78], [0, 255]], [171, 64, 79, [128, 143]], [171, 64, 79, [176, 223]], [171, 64, [90, 94], [0, 255]], [171, 64, [99, 101], [0, 255]], [171, 66, 4, [128, 135]], [171, 67, [72, 79], [0, 255]], [171, 67, 231, [128, 255]], [171, 67, 234, [0, 191]], [171, 67, [64, 70], [0, 255]], [172, 24, [64, 79], [0, 255]], [172, 24, [90, 92], [0, 255]], [172, 24, 94, [0, 255]], [172, 24, 96, [0, 255]], [172, 24, [99, 101], [0, 255]], [172, 26, 4, [128, 135]], [172, 26, 4, [152, 159]], [172, 27, [72, 79], [0, 255]], [172, 27, [64, 70], [0, 255]], [192, 168, [128, 129], [0, 255]], [192, 168, [136, 137], [0, 255]], [192, 168, 252, [0, 255]]], '1300011-1120009': [[171, 64, [48, 63], [0, 255]], [171, 64, [84, 87], [0, 255]], [171, 64, [108, 113], [0, 255]], [171, 64, [116, 127], [0, 255]], [171, 64, [160, 167], [0, 255]], [171, 64, 102, [0, 255]], [171, 64, 104, [0, 255]], [171, 66, 250, [128, 191]], [171, 67, [100, 105], [0, 255]], [171, 67, 106, [0, 31]], [171, 67, 204, [0, 255]], [171, 67, 230, [0, 127]], [171, 67, 230, [192, 207]], [171, 67, 230, [224, 255]], [171, 67, 231, [0, 127]], [171, 67, [80, 88], [0, 255]], [172, 20, 0, 67], [172, 20, 10, [64, 95]], [172, 24, [166, 167], [0, 255]], [172, 24, 102, [0, 255]], [172, 24, 104, [0, 255]], [172, 24, 108, [0, 255]], [172, 24, 110, [0, 255]], [172, 24, 112, [0, 255]], [172, 24, 116, [0, 255]], [172, 24, [118, 120], [0, 255]], [172, 24, 122, [0, 255]], [172, 24, 124, [0, 255]], [172, 24, 126, [0, 255]], [172, 24, 160, [0, 255]], [172, 24, 162, [0, 255]], [172, 24, 164, [0, 255]], [172, 24, [48, 52], [0, 255]], [172, 24, 54, [0, 255]], [172, 24, 56, [0, 255]], [172, 24, 60, [0, 255]], [172, 24, 84, [0, 255]], [172, 27, 100, [0, 255]], [172, 27, 104, [0, 255]], [172, 27, 204, [0, 255]], [172, 27, 230, [0, 127]], [172, 27, 230, [224, 255]], [172, 27, 231, [0, 127]], [172, 27, 80, [0, 255]], [172, 27, 84, [0, 255]], [172, 27, [86, 88], [0, 255]]], '100015-1120009': [[171, 64, [48, 63], [0, 255]], [171, 64, [84, 87], [0, 255]], [171, 64, [108, 113], [0, 255]], [171, 64, [116, 127], [0, 255]], [171, 64, [160, 167], [0, 255]], [171, 64, 102, [0, 255]], [171, 64, 104, [0, 255]], [171, 66, 250, [128, 191]], [171, 67, [100, 105], [0, 255]], [171, 67, 106, [0, 31]], [171, 67, 204, [0, 255]], [171, 67, 230, [0, 127]], [171, 67, 230, [192, 207]], [171, 67, 230, [224, 255]], [171, 67, 231, [0, 127]], [171, 67, [80, 88], [0, 255]], [172, 20, 0, 67], [172, 20, 10, [64, 95]], [172, 24, [166, 167], [0, 255]], [172, 24, 102, [0, 255]], [172, 24, 104, [0, 255]], [172, 24, 108, [0, 255]], [172, 24, 110, [0, 255]], [172, 24, 112, [0, 255]], [172, 24, 116, [0, 255]], [172, 24, [118, 120], [0, 255]], [172, 24, 122, [0, 255]], [172, 24, 124, [0, 255]], [172, 24, 126, [0, 255]], [172, 24, 160, [0, 255]], [172, 24, 162, [0, 255]], [172, 24, 164, [0, 255]], [172, 24, [48, 52], [0, 255]], [172, 24, 54, [0, 255]], [172, 24, 56, [0, 255]], [172, 24, 60, [0, 255]], [172, 24, 84, [0, 255]], [172, 27, 100, [0, 255]], [172, 27, 104, [0, 255]], [172, 27, 204, [0, 255]], [172, 27, 230, [0, 127]], [172, 27, 230, [224, 255]], [172, 27, 231, [0, 127]], [172, 27, 80, [0, 255]], [172, 27, 84, [0, 255]], [172, 27, [86, 88], [0, 255]]], '500004-1520009': [[171, 64, [96, 97], [0, 255]], [171, 64, 15, [0, 127]], [171, 64, 15, [160, 191]], [171, 64, [64, 78], [0, 255]], [171, 64, 79, [128, 143]], [171, 64, 79, [176, 223]], [171, 64, [90, 94], [0, 255]], [171, 64, [99, 101], [0, 255]], [171, 66, 4, [128, 135]], [171, 67, [72, 79], [0, 255]], [171, 67, 231, [128, 255]], [171, 67, 234, [0, 191]], [171, 67, [64, 70], [0, 255]], [172, 24, [64, 79], [0, 255]], [172, 24, [90, 92], [0, 255]], [172, 24, 94, [0, 255]], [172, 24, 96, [0, 255]], [172, 24, [99, 101], [0, 255]], [172, 26, 4, [128, 135]], [172, 26, 4, [152, 159]], [172, 27, [72, 79], [0, 255]], [172, 27, [64, 70], [0, 255]], [192, 168, [128, 129], [0, 255]], [192, 168, [136, 137], [0, 255]], [192, 168, 252, [0, 255]]], '800001-520004': [], '100015-520004': [[10, 30, [0, 159], [0, 255]], [172, 19, [154, 163], [0, 255]], [172, 19, [40, 42], [0, 255]], [172, 19, [64, 77], [0, 255]], [172, 19, [81, 86], [0, 255]], [172, 19, 96, [0, 255]], [172, 19, 97, [0, 255]]], '1300011-1520009': [[171, 64, [96, 97], [0, 255]], [171, 64, 15, [0, 127]], [171, 64, 15, [160, 191]], [171, 64, [64, 78], [0, 255]], [171, 64, 79, [128, 143]], [171, 64, 79, [176, 223]], [171, 64, [90, 94], [0, 255]], [171, 64, [99, 101], [0, 255]], [171, 66, 4, [128, 135]], [171, 67, [72, 79], [0, 255]], [171, 67, 231, [128, 255]], [171, 67, 234, [0, 191]], [171, 67, [64, 70], [0, 255]], [172, 24, [64, 79], [0, 255]], [172, 24, [90, 92], [0, 255]], [172, 24, 94, [0, 255]], [172, 24, 96, [0, 255]], [172, 24, [99, 101], [0, 255]], [172, 26, 4, [128, 135]], [172, 26, 4, [152, 159]], [172, 27, [72, 79], [0, 255]], [172, 27, [64, 70], [0, 255]], [192, 168, [128, 129], [0, 255]], [192, 168, [136, 137], [0, 255]], [192, 168, 252, [0, 255]]], '400001-1320011': [], '200004-1120009': [[171, 64, [48, 63], [0, 255]], [171, 64, [84, 87], [0, 255]], [171, 64, [108, 113], [0, 255]], [171, 64, [116, 127], [0, 255]], [171, 64, [160, 167], [0, 255]], [171, 64, 102, [0, 255]], [171, 64, 104, [0, 255]], [171, 66, 250, [128, 191]], [171, 67, [100, 105], [0, 255]], [171, 67, 106, [0, 31]], [171, 67, 204, [0, 255]], [171, 67, 230, [0, 127]], [171, 67, 230, [192, 207]], [171, 67, 230, [224, 255]], [171, 67, 231, [0, 127]], [171, 67, [80, 88], [0, 255]], [172, 20, 0, 67], [172, 20, 10, [64, 95]], [172, 24, [166, 167], [0, 255]], [172, 24, 102, [0, 255]], [172, 24, 104, [0, 255]], [172, 24, 108, [0, 255]], [172, 24, 110, [0, 255]], [172, 24, 112, [0, 255]], [172, 24, 116, [0, 255]], [172, 24, [118, 120], [0, 255]], [172, 24, 122, [0, 255]], [172, 24, 124, [0, 255]], [172, 24, 126, [0, 255]], [172, 24, 160, [0, 255]], [172, 24, 162, [0, 255]], [172, 24, 164, [0, 255]], [172, 24, [48, 52], [0, 255]], [172, 24, 54, [0, 255]], [172, 24, 56, [0, 255]], [172, 24, 60, [0, 255]], [172, 24, 84, [0, 255]], [172, 27, 100, [0, 255]], [172, 27, 104, [0, 255]], [172, 27, 204, [0, 255]], [172, 27, 230, [0, 127]], [172, 27, 230, [224, 255]], [172, 27, 231, [0, 127]], [172, 27, 80, [0, 255]], [172, 27, 84, [0, 255]], [172, 27, [86, 88], [0, 255]]], '1500009-120015': [], '500004-220004': [[171, 66, 255, [128, 191]], [172, 20, [6, 7], [0, 255]], [172, 20, 0, 203]], '400001-520004': [], '100015-920009': [[171, 64, [32, 45], [0, 255]], [171, 64, [168, 175], [0, 255]], [171, 64, [194, 197], [0, 255]], [171, 64, [208, 215], [0, 255]], [171, 64, 180, [0, 255]], [171, 64, 181, [0, 127]], [171, 64, [182, 192], [0, 255]], [171, 64, [202, 206], [0, 255]], [171, 64, 207, [0, 191]], [171, 64, 47, [0, 127]], [171, 66, [136, 139], [0, 255]], [171, 66, 251, [192, 255]], [171, 67, [146, 147], [0, 255]], [171, 67, 200, [0, 255]], [171, 67, 203, [0, 255]], [171, 67, 222, [0, 63]], [171, 67, 222, [128, 159]], [171, 67, 222, [192, 255]], [171, 67, 223, [0, 255]], [171, 67, 228, [0, 255]], [171, 67, 229, [0, 111]], [171, 67, 229, [128, 159]], [171, 67, 229, [192, 255]], [172, 20, 0, 227], [172, 20, 10, [224, 255]], [172, 20, 87, [0, 15]], [172, 24, [42, 45], [0, 255]], [172, 24, [196, 197], [0, 255]], [172, 24, [208, 209], [0, 255]], [172, 24, 168, [0, 255]], [172, 24, 180, [0, 255]], [172, 24, 181, [0, 127]], [172, 24, [182, 184], [0, 255]], [172, 24, 192, [0, 255]], [172, 24, 194, [0, 255]], [172, 24, 202, [0, 255]], [172, 24, [204, 206], [0, 255]], [172, 24, 207, [0, 191]], [172, 24, [32, 36], [0, 255]], [172, 24, [38, 40], [0, 255]], [172, 24, 47, [0, 127]], [172, 26, 136, [0, 255]], [172, 27, 146, [0, 255]], [172, 27, 200, [64, 255]], [172, 27, 203, [0, 255]], [172, 27, 222, [0, 63]], [172, 27, 222, [128, 159]], [172, 27, 222, [192, 255]], [172, 27, 223, [0, 255]], [172, 27, 228, [0, 255]], [172, 27, 229, [0, 111]], [172, 27, 229, [128, 159]], [172, 27, 229, [192, 255]]], '400001-820001': [], '1500005-1320010': [[10, 31, [0, 255], [0, 255]], [172, 19, [78, 79], [0, 255]], [172, 19, [140, 147], [0, 255]], [172, 19, [150, 153], [0, 255]], [172, 19, 118, [0, 255]], [172, 19, [124, 125], [0, 255]], [172, 19, 132, [0, 255]], [172, 19, 134, [0, 255]], [172, 19, 136, [0, 255]], [172, 19, 21, [0, 255]], [172, 19, [32, 39], [0, 255]], [172, 19, 60, [0, 255]], [172, 19, 61, [0, 63]], [172, 19, 61, [96, 255]], [172, 19, 62, [0, 255]], [172, 19, 63, [0, 191]], [172, 19, [2, 15], [0, 255]], [172, 20, 11, [0, 31]], [172, 26, 5, [24, 31]]], '800001-1120009': [], '900009-420001': [[171, 67, 4, [128, 191]], [172, 20, 0, 75]], '1500009-520004': [[10, 30, [0, 159], [0, 255]], [172, 19, [154, 163], [0, 255]], [172, 19, [40, 42], [0, 255]], [172, 19, [64, 77], [0, 255]], [172, 19, [81, 86], [0, 255]], [172, 19, 96, [0, 255]], [172, 19, 97, [0, 255]]], '100015-820001': [[172, 20, 0, 235]], '1300011-120015': [[10, 3, [0, 255], [0, 255]], [10, 62, [64, 79], [0, 255]], [171, 64, [64, 79], [0, 255]], [171, 64, [88, 101], [0, 255]], [171, 64, 0, 18], [171, 64, 15, [0, 127]], [171, 64, 15, [160, 191]], [171, 64, 255, [128, 191]], [171, 66, 251, [0, 63]], [171, 66, 4, [128, 135]], [171, 67, [64, 79], [0, 255]], [171, 67, 231, [128, 255]], [171, 67, 234, [0, 255]], [172, 20, [4, 5], [0, 255]], [172, 20, 0, 129], [172, 20, 0, 131], [172, 20, 0, 8], [172, 20, 10, [128, 159]], [172, 24, [64, 79], [0, 255]], [172, 24, [98, 101], [0, 255]], [172, 24, [88, 92], [0, 255]], [172, 24, [94, 96], [0, 255]], [172, 26, 4, [128, 135]], [172, 26, 4, [152, 159]], [172, 27, [72, 79], [0, 255]], [172, 27, [64, 70], [0, 255]], [192, 168, [128, 129], [0, 255]], [192, 168, [136, 137], [0, 255]], [192, 168, 252, [0, 255]]], '1500005-920008': [[10, 63, [112, 127], [0, 255]], [171, 64, [176, 179], [0, 255]], [171, 64, [198, 201], [0, 255]], [171, 64, 181, [128, 255]], [171, 67, 202, [0, 255]], [171, 67, 222, [64, 95]], [171, 67, 229, [112, 127]], [172, 20, 10, [224, 255]], [172, 24, 176, [0, 255]], [172, 24, 181, [128, 255]], [172, 24, 198, [0, 255]], [172, 24, 200, [0, 255]], [172, 26, 4, [248, 255]], [172, 27, 202, [0, 255]], [172, 27, 222, [64, 95]], [172, 27, 229, [112, 127]]], '900008-1520005': [[10, 3, 255, 254], [171, 64, [88, 89], [0, 255]], [171, 64, 95, [0, 255]], [171, 64, 98, [0, 255]], [171, 66, 251, [0, 63]], [172, 20, 0, 131], [172, 20, 10, [128, 159]], [172, 24, [88, 89], [0, 255]], [172, 24, 95, [0, 255]], [172, 24, 98, [0, 255]]], '1300010-920030': [], '1100009-220004': [[171, 64, [10, 11], [0, 255]], [171, 66, 255, [128, 191]], [171, 67, 0, [240, 255]], [172, 20, [6, 7], [0, 255]], [172, 20, 0, 203]], '1100009-120015': [[10, 3, [0, 255], [0, 255]], [10, 62, [64, 79], [0, 255]], [171, 64, [64, 79], [0, 255]], [171, 64, [88, 101], [0, 255]], [171, 64, 0, 18], [171, 64, 15, [0, 127]], [171, 64, 15, [160, 191]], [171, 64, 255, [128, 191]], [171, 66, 251, [0, 63]], [171, 66, 4, [128, 135]], [171, 67, [64, 79], [0, 255]], [171, 67, 231, [128, 255]], [171, 67, 234, [0, 255]], [172, 20, [4, 5], [0, 255]], [172, 20, 0, 129], [172, 20, 0, 131], [172, 20, 0, 8], [172, 20, 10, [128, 159]], [172, 24, [64, 79], [0, 255]], [172, 24, [98, 101], [0, 255]], [172, 24, [88, 92], [0, 255]], [172, 24, [94, 96], [0, 255]], [172, 26, 4, [128, 135]], [172, 26, 4, [152, 159]], [172, 27, [72, 79], [0, 255]], [172, 27, [64, 70], [0, 255]], [192, 168, [128, 129], [0, 255]], [192, 168, [136, 137], [0, 255]], [192, 168, 252, [0, 255]]]}";
	var all_port_IPs_T="{'1500005': [(1, 1), (2, 512L), (514L, 256L), (770L, 256L), (1026L, 64L), (1090L, 1L), (1091L, 32L), (1123L, 512L), (1635L, 256L), (1891L, 256L)], 		'900009': [(1, 3584L), (3585L, 128L), (3713L, 2048L), (5761L, 256L), (6017L, 128L), (6145L, 2816L), (8961L, 1024L), (9985L, 1280L), (11265L, 192L), (11457L, 2048L), (13505L, 1024L), (14529L, 64L), (14593L, 512L), (15105L, 256L), (15361L, 256L), (15617L, 64L), (15681L, 32L), (15713L, 64L), (15777L, 256L), (16033L, 256L), (16289L, 112L), (16401L, 32L), (16433L, 64L), (16497L, 1L), (16498L, 32L), (16530L, 16L), (16546L, 1280L), (17826L, 768L), (18594L, 1024L), (19618L, 128L), (19746L, 256L), (20002L, 256L), (20258L, 128L), (20386L, 768L), (21154L, 256L), (21410L, 256L), (21666L, 512L), (22178L, 256L), (22434L, 768L), (23202L, 192L), (23394L, 512L), (23906L, 256L), (24162L, 256L), (24418L, 192L), (24610L, 256L), (24866L, 64L), (24930L, 32L), (24962L, 64L), (25026L, 256L), (25282L, 256L), (25538L, 112L), (25650L, 32L), (25682L, 64L)], '900008': [(1, 4096), (4097, 1024L), (5121L, 128L), (5249L, 1024L), (6273L, 256L), (6529L, 32L), (6561L, 16L), (6577L, 32L), (6609L, 1L), (6610L, 256L), (6866L, 128L), (6994L, 256L), (7250L, 256L), (7506L, 8L), (7514L, 256L), (7770L, 32L), (7802L, 16L), (7818L, 4L), (7822L, 4L)], '900030': [(1, 1024L), (1025L, 128L), (1153L, 1024L), (2177L, 32L), (2209L, 16L), (2225L, 32L), (2257L, 256L), (2513L, 128L), (2641L, 256L), (2897L, 256L), (3153L, 32L), (3185L, 16L)], '400001': [(1, 4096), (4097, 4096), (8193, 64L), (8257L, 32L), (8289L, 4096L), (12385L, 1024L), (13409L, 768L), (14177L, 1536L), (15713L, 3328L), (19041L, 2048L), (21089L, 32L), (21121L, 32L), (21153L, 64L), (21217L, 64L), (21281L, 2304L), (23585L, 1536L), (25121L, 32L), (25153L, 256L), (25409L, 256L), (25665L, 208L), (25873L, 32L), (25905L, 128L), (26033L, 16384L), (42417L, 1L), (42418L, 1L), (42419L, 1L), (42420L, 1L), (42421L, 1L), (42422L, 1L), (42423L, 32L), (42455L, 64L), (42519L, 32L), (42551L, 1280L), (43831L, 256L), (44087L, 256L), (44343L, 256L), (44599L, 256L), (44855L, 768L), (45623L, 256L), (45879L, 256L), (46135L, 256L), (46391L, 512L), (46903L, 768L), (47671L, 256L), (47927L, 256L), (48183L, 256L), (48439L, 256L), (48695L, 256L), (48951L, 256L), (49207L, 512L), (49719L, 32L), (49751L, 16L), (49767L, 64L), (49831L, 256L), (50087L, 256L), (50343L, 768L), (51111L, 256L), (51367L, 256L), (51623L, 256L), (51879L, 256L), (52135L, 128L), (52263L, 32L), (52295L, 128L)], '1500009': [(1, 128L), (129L, 32L), (161L, 3840L), (4001L, 16L), (4017L, 48L), (4065L, 1280L), (5345L, 512L), (5857L, 768L), (6625L, 8L), (6633L, 1792L), (8425L, 2048L), (10473L, 128L), (10601L, 192L), (10793L, 4096L), (14889L, 768L), (15657L, 256L), (15913L, 256L), (16169L, 768L), (16937L, 8L), (16945L, 8L), (16953L, 1792L), (18745L, 2048L), (20793L, 512L), (21305L, 512L), (21817L, 256L)], '100015': [(1, 65536), (65537, 4096), (69633, 1L), (69634L, 128L), (69762L, 32L), (69794L, 4096L), (73890L, 3584L), (77474L, 64L), (77538L, 8L), (77546L, 64L), (77610L, 4096L), (81706L, 128L), (81834L, 256L), (82090L, 1L), (82091L, 1L), (82092L, 1L), (82093L, 512L), (82605L, 32L), (82637L, 4096L), (86733L, 1280L), (88013L, 768L), (88781L, 1024L), (89805L, 8L), (89813L, 8L), (89821L, 1792L), (91613L, 2048L), (93661L, 512L), (94173L, 512L), (94685L, 256L)], 		'1300010': [(1, 65536), (65537, 3584L), (69121L, 256L), (69377L, 2048L), (71425L, 256L), (71681L, 64L), (71745L, 160L), (71905L, 256L), (72161L, 192L), (72353L, 512L), (72865L, 256L), (73121L, 512L), (73633L, 256L), (73889L, 256L), (74145L, 256L), (74401L, 2048L), (76449L, 1024L), (77473L, 32L), (77505L, 8L)], '1300011': [(1, 65536), (65537, 8L), (65545L, 32L), (65577L, 3584L), (69161L, 256L), (69417L, 2048L), (71465L, 256L), (71721L, 64L), (71785L, 160L), (71945L, 256L), (72201L, 192L), (72393L, 32L), (72425L, 512L), (72937L, 256L), (73193L, 512L), (73705L, 256L), (73961L, 256L), (74217L, 256L), (74473L, 2048L), (76521L, 1024L), (77545L, 128L), (77673L, 32L), (77705L, 8L)], '1100009': [(1, 4096L), (4097L, 1024L), (5121L, 256L), (5377L, 256L), (5633L, 1536L), (7169L, 3072L), (10241L, 2048L), (12289L, 64L), (12353L, 2304L), (14657L, 1536L), (16193L, 32L), (16225L, 256L), (16481L, 128L), (16609L, 16L), (16625L, 32L), (16657L, 128L), (16785L, 1L), (16786L, 32L), (16818L, 1280L), (18098L, 256L), (18354L, 256L), (18610L, 256L), (18866L, 256L), (19122L, 256L), (19378L, 256L), (19634L, 256L), (19890L, 256L), (20146L, 256L), (20402L, 256L), (20658L, 768L), (21426L, 256L), (21682L, 256L), (21938L, 256L), (22194L, 256L), (22450L, 256L), (22706L, 256L), (22962L, 512L), (23474L, 256L), (23730L, 256L), (23986L, 768L), (24754L, 256L), (25010L, 256L), (25266L, 256L), (25522L, 128L), (25650L, 32L), (25682L, 128L)], '200004': [(1, 512L), (513L, 64L), (577L, 16L), (593L, 1L), (594L, 512L)], '500004': [(1, 40960), (40961, 768L), (41729L, 3584L), (45313L, 1536L), (46849L, 256L), (47105L, 256L), (47361L, 2560L)], 	'800001': [(1, 4096), (4097, 4096), (8193, 3584L), (11777L, 128L), (11905L, 6400L), (18305L, 3328L), (21633L, 192L), (21825L, 2048L), (23873L, 32L), (23905L, 1024L), (24929L, 64L), (24993L, 512L), (25505L, 256L), (25761L, 512L), (26273L, 32L), (26305L, 32L), (26337L, 64L), (26401L, 256L), (26657L, 256L), (26913L, 160L), (27073L, 64L), (27137L, 1L), (27138L, 1L), (27139L, 1L), (27140L, 1L), (27141L, 1L), (27142L, 32L), (27174L, 16L), (27190L, 1280L), (28470L, 768L), (29238L, 1024L), (30262L, 128L), (30390L, 256L), (30646L, 256L), (30902L, 1280L), (32182L, 256L), (32438L, 256L), (32694L, 768L), (33462L, 256L), (33718L, 256L), (33974L, 768L), (34742L, 192L), (34934L, 512L), (35446L, 32L), (35478L, 256L), (35734L, 256L), (35990L, 192L), (36182L, 512L), (36694L, 96L), (36790L, 32L), (36822L, 64L), (36886L, 256L), (37142L, 256L), (37398L, 160L), (37558L, 64L)]}";
	var all_port_IPs="{'1500005': [[10, 3, 255, 254], [171, 64, [88, 89], [0, 255]], [171, 64, 95, [0, 255]], [171, 64, 98, [0, 255]], [171, 66, 251, [0, 63]], [172, 20, 0, 131], [172, 20, 10, [128, 159]], [172, 24, [88, 89], [0, 255]], [172, 24, 95, [0, 255]], [172, 24, 98, [0, 255]]], '900009': [[171, 67, 222, [0, 63]], [171, 64, [32, 45], [0, 255]], [171, 64, [168, 175], [0, 255]], [171, 64, [194, 197], [0, 255]], [171, 64, [208, 215], [0, 255]], [171, 64, 180, [0, 255]], [171, 64, 181, [0, 127]], [171, 64, [182, 192], [0, 255]], [171, 64, [202, 206], [0, 255]], [171, 64, 207, [0, 191]], [171, 64, 47, [0, 127]], [171, 66, [136, 139], [0, 255]], [171, 66, 251, [192, 255]], [171, 67, [146, 147], [0, 255]], [171, 67, 200, [0, 255]], [171, 67, 203, [0, 255]], [171, 67, 222, [128, 159]], [171, 67, 222, [192, 255]], [171, 67, 223, [0, 255]], [171, 67, 228, [0, 255]], [171, 67, 229, [0, 111]], [171, 67, 229, [128, 159]], [171, 67, 229, [192, 255]], [172, 20, 0, 227], [172, 20, 10, [224, 255]], [172, 20, 87, [0, 15]], [172, 24, [42, 45], [0, 255]], [172, 24, [196, 197], [0, 255]], [172, 24, [208, 209], [0, 255]], [172, 24, 168, [0, 255]], [172, 24, 180, [0, 255]], [172, 24, 181, [0, 127]], [172, 24, [182, 184], [0, 255]], [172, 24, 192, [0, 255]], [172, 24, 194, [0, 255]], [172, 24, 202, [0, 255]], [172, 24, [204, 206], [0, 255]], [172, 24, 207, [0, 191]], [172, 24, [32, 36], [0, 255]], [172, 24, [38, 40], [0, 255]], [172, 24, 47, [0, 127]], [172, 26, 136, [0, 255]], [172, 27, 146, [0, 255]], [172, 27, 200, [64, 255]], [172, 27, 203, [0, 255]], [172, 27, 222, [0, 63]], [172, 27, 222, [128, 159]], [172, 27, 222, [192, 255]], [172, 27, 223, [0, 255]], [172, 27, 228, [0, 255]], [172, 27, 229, [0, 111]], [172, 27, 229, [128, 159]], [172, 27, 229, [192, 255]]], '900008': [[10, 63, [112, 127], [0, 255]], [171, 64, [176, 179], [0, 255]], [171, 64, [198, 201], [0, 255]], [171, 64, 181, [128, 255]], [171, 67, 202, [0, 255]], [171, 67, 222, [64, 95]], [171, 67, 229, [112, 127]], [172, 20, 10, [224, 255]], [172, 24, 1, 23], [172, 24, 176, [0, 255]], [172, 24, 181, [128, 255]], [172, 24, 198, [0, 255]], [172, 24, 200, [0, 255]], [172, 26, 4, [248, 255]], [172, 27, 202, [0, 255]], [172, 27, 222, [64, 95]], [172, 27, 229, [112, 127]], [192, 168, 209, [60, 63]], [192, 168, 209, [224, 227]]], '900030': [[171, 64, [176, 179], [0, 255]], [171, 64, [198, 201], [0, 255]], [171, 64, 181, [128, 255]], [171, 67, 222, [64, 95]], [171, 67, 229, [112, 127]], [172, 20, 10, [224, 255]], [172, 24, 176, [0, 255]], [172, 24, 181, [128, 255]], [172, 24, 198, [0, 255]], [172, 24, 200, [0, 255]], [172, 27, 222, [64, 95]], [172, 27, 229, [112, 127]]], '400001': [[171, 67, 4, [128, 191]], [172, 20, 0, 75], [10, 62, [32, 47], [0, 255]], [10, 63, [32, 47], [0, 255]], [171, 64, [48, 63], [0, 255]], [171, 64, [84, 87], [0, 255]], [171, 64, [108, 113], [0, 255]], [171, 64, [160, 167], [0, 255]], [171, 64, [102, 104], [0, 255]], [171, 64, [115, 127], [0, 255]], [171, 64, 2, [0, 63]], [171, 64, 2, [128, 159]], [171, 66, 250, [128, 191]], [171, 66, 4, [64, 95]], [171, 66, 66, [80, 111]], [171, 67, [100, 105], [0, 255]], [171, 67, 106, [0, 31]], [171, 67, 108, [0, 255]], [171, 67, 204, [0, 255]], [171, 67, 230, [0, 207]], [171, 67, 230, [224, 255]], [171, 67, 231, [0, 127]], [171, 67, [80, 88], [0, 255]], [172, 16, [128, 191], [0, 255]], [172, 20, 0, 130], [172, 20, 0, 4], [172, 20, 0, 65], [172, 20, 0, 67], [172, 20, 0, 9], [172, 20, 10, [64, 95]], [172, 24, [166, 167], [0, 255]], [172, 24, [102, 104], [0, 255]], [172, 24, 108, [0, 255]], [172, 24, 110, [0, 255]], [172, 24, 112, [0, 255]], [172, 24, [115, 116], [0, 255]], [172, 24, [118, 120], [0, 255]], [172, 24, 122, [0, 255]], [172, 24, 124, [0, 255]], [172, 24, 126, [0, 255]], [172, 24, 160, [0, 255]], [172, 24, 162, [0, 255]], [172, 24, 164, [0, 255]], [172, 24, 2, [0, 63]], [172, 24, 2, [128, 159]], [172, 24, [48, 52], [0, 255]], [172, 24, 54, [0, 255]], [172, 24, 56, [0, 255]], [172, 24, 60, [0, 255]], [172, 24, 84, [0, 255]], [172, 26, 4, [64, 95]], [172, 26, 66, [96, 111]], [172, 27, 100, [0, 255]], [172, 27, 104, [0, 255]], [172, 27, 108, [0, 255]], [172, 27, 204, [0, 255]], [172, 27, 230, [0, 127]], [172, 27, 230, [224, 255]], [172, 27, 231, [0, 127]], [172, 27, 36, [64, 127]], [172, 27, 80, [0, 255]], [172, 27, 84, [0, 255]], [172, 27, [86, 88], [0, 255]]], '1500009': [[171, 64, [96, 97], [0, 255]], [171, 64, 15, [0, 127]], [171, 64, 15, [160, 191]], [171, 64, [64, 78], [0, 255]], [171, 64, 79, [128, 143]], [171, 64, 79, [176, 223]], [171, 64, [90, 94], [0, 255]], [171, 64, [99, 101], [0, 255]], [171, 66, 4, [128, 135]], [171, 67, [72, 79], [0, 255]], [171, 67, 231, [128, 255]], [171, 67, 234, [0, 191]], [171, 67, [64, 70], [0, 255]], [172, 24, [64, 79], [0, 255]], [172, 24, [90, 92], [0, 255]], [172, 24, 94, [0, 255]], [172, 24, 96, [0, 255]], [172, 24, [99, 101], [0, 255]], [172, 26, 4, [128, 135]], [172, 26, 4, [152, 159]], [172, 27, [72, 79], [0, 255]], [172, 27, [64, 70], [0, 255]], [192, 168, [128, 129], [0, 255]], [192, 168, [136, 137], [0, 255]], [192, 168, 252, [0, 255]]], '100015': [[171, 64, 255, [128, 191]], [172, 20, [4, 5], [0, 255]], [10, 3, [0, 255], [0, 255]], [10, 62, [64, 79], [0, 255]], [171, 64, [64, 79], [0, 255]], [171, 64, [88, 101], [0, 255]], [171, 64, 0, 18], [171, 64, 15, [0, 127]], [171, 64, 15, [160, 191]], [171, 66, 251, [0, 63]], [171, 66, 4, [128, 135]], [171, 67, [64, 79], [0, 255]], [171, 67, 231, [128, 255]], [171, 67, 234, [0, 255]], [172, 20, 0, 129], [172, 20, 0, 131], [172, 20, 0, 8], [172, 20, 10, [128, 159]], [172, 24, [64, 79], [0, 255]], [172, 24, [98, 101], [0, 255]], [172, 24, [88, 92], [0, 255]], [172, 24, [94, 96], [0, 255]], [172, 26, 4, [128, 135]], [172, 26, 4, [152, 159]], [172, 27, [72, 79], [0, 255]], [172, 27, [64, 70], [0, 255]], [192, 168, [128, 129], [0, 255]], [192, 168, [136, 137], [0, 255]], [192, 168, 252, [0, 255]]], '1300010': [[10, 31, [0, 255], [0, 255]], [172, 19, [78, 79], [0, 255]], [172, 19, [140, 147], [0, 255]], [172, 19, [150, 153], [0, 255]], [172, 19, 118, [0, 255]], [172, 19, [124, 125], [0, 255]], [172, 19, 132, [0, 255]], [172, 19, 134, [0, 255]], [172, 19, 136, [0, 255]], [172, 19, 21, [0, 255]], [172, 19, [32, 39], [0, 255]], [172, 19, 60, [0, 255]], [172, 19, 61, [0, 63]], [172, 19, 61, [96, 255]], [172, 19, 62, [0, 255]], [172, 19, 63, [0, 191]], [172, 19, [2, 15], [0, 255]], [172, 20, 11, [0, 31]], [172, 26, 5, [24, 31]]], '1300011': [[10, 31, [0, 255], [0, 255]], [128, 12, 1, [248, 255]], [128, 12, 2, [0, 31]], [172, 19, [78, 79], [0, 255]], [172, 19, [140, 147], [0, 255]], [172, 19, [150, 153], [0, 255]], [172, 19, 118, [0, 255]], [172, 19, [124, 125], [0, 255]], [172, 19, 132, [0, 255]], [172, 19, 134, [0, 255]], [172, 19, 136, [0, 255]], [172, 19, 21, [0, 255]], [172, 19, 248, [0, 127]], [172, 19, [32, 39], [0, 255]], [172, 19, 60, [0, 255]], [172, 19, 61, [0, 63]], [172, 19, 61, [96, 255]], [172, 19, 62, [0, 255]], [172, 19, 63, [0, 191]], [172, 19, 63, [224, 255]], [172, 19, [2, 15], [0, 255]], [172, 20, 11, [0, 31]], [172, 26, 5, [24, 31]]], '1100009': [[171, 64, [48, 63], [0, 255]], [171, 64, [84, 87], [0, 255]], [171, 64, [108, 113], [0, 255]], [171, 64, [116, 127], [0, 255]], [171, 64, [160, 167], [0, 255]], [171, 64, 102, [0, 255]], [171, 64, 104, [0, 255]], [171, 66, 250, [128, 191]], [171, 67, [100, 105], [0, 255]], [171, 67, 106, [0, 31]], [171, 67, 204, [0, 255]], [171, 67, 230, [0, 127]], [171, 67, 230, [192, 207]], [171, 67, 230, [224, 255]], [171, 67, 231, [0, 127]], [171, 67, [80, 88], [0, 255]], [172, 20, 0, 67], [172, 20, 10, [64, 95]], [172, 24, [166, 167], [0, 255]], [172, 24, 102, [0, 255]], [172, 24, 104, [0, 255]], [172, 24, 108, [0, 255]], [172, 24, 110, [0, 255]], [172, 24, 112, [0, 255]], [172, 24, 116, [0, 255]], [172, 24, [118, 120], [0, 255]], [172, 24, 122, [0, 255]], [172, 24, 124, [0, 255]], [172, 24, 126, [0, 255]], [172, 24, 160, [0, 255]], [172, 24, 162, [0, 255]], [172, 24, 164, [0, 255]], [172, 24, [48, 52], [0, 255]], [172, 24, 54, [0, 255]], [172, 24, 56, [0, 255]], [172, 24, 60, [0, 255]], [172, 24, 84, [0, 255]], [172, 27, 100, [0, 255]], [172, 27, 104, [0, 255]], [172, 27, 204, [0, 255]], [172, 27, 230, [0, 127]], [172, 27, 230, [224, 255]], [172, 27, 231, [0, 127]], [172, 27, 80, [0, 255]], [172, 27, 84, [0, 255]], [172, 27, [86, 88], [0, 255]]], '200004': [[171, 64, [10, 11], [0, 255]], [171, 66, 255, [128, 191]], [171, 67, 0, [240, 255]], [172, 20, [6, 7], [0, 255]], [172, 20, 0, 203]], '500004': [[10, 30, [0, 159], [0, 255]], [172, 19, [154, 163], [0, 255]], [172, 19, [40, 42], [0, 255]], [172, 19, [64, 77], [0, 255]], [172, 19, [81, 86], [0, 255]], [172, 19, 96, [0, 255]], [172, 19, 97, [0, 255]]], '800001': [[172, 20, 0, 235], [10, 62, [112, 127], [0, 255]], [10, 63, [112, 127], [0, 255]], [171, 64, [32, 45], [0, 255]], [171, 64, [208, 215], [0, 255]], [171, 64, [168, 192], [0, 255]], [171, 64, [194, 206], [0, 255]], [171, 64, 207, [0, 191]], [171, 64, 47, [0, 127]], [171, 66, [136, 139], [0, 255]], [171, 66, 251, [192, 255]], [171, 66, 4, [224, 255]], [171, 67, [146, 147], [0, 255]], [171, 67, [202, 203], [0, 255]], [171, 67, 200, [0, 255]], [171, 67, 222, [64, 95]], [171, 67, 222, [128, 159]], [171, 67, 222, [192, 255]], [171, 67, 223, [0, 255]], [171, 67, 228, [0, 255]], [171, 67, 229, [0, 159]], [171, 67, 229, [192, 255]], [172, 20, 0, 14], [172, 20, 0, 225], [172, 20, 0, 227], [172, 20, 0, 26], [172, 20, 10, [224, 255]], [172, 20, 87, [0, 15]], [172, 24, [42, 45], [0, 255]], [172, 24, [208, 209], [0, 255]], [172, 24, 168, [0, 255]], [172, 24, 176, [0, 255]], [172, 24, [180, 184], [0, 255]], [172, 24, 192, [0, 255]], [172, 24, 194, [0, 255]], [172, 24, [196, 198], [0, 255]], [172, 24, 200, [0, 255]], [172, 24, 202, [0, 255]], [172, 24, [204, 206], [0, 255]], [172, 24, 207, [0, 191]], [172, 24, [32, 36], [0, 255]], [172, 24, [38, 40], [0, 255]], [172, 24, 47, [0, 127]], [172, 26, 136, [0, 255]], [172, 26, 4, [224, 255]], [172, 27, [202, 203], [0, 255]], [172, 27, 146, [0, 255]], [172, 27, 200, [64, 255]], [172, 27, 222, [0, 95]], [172, 27, 222, [128, 159]], [172, 27, 222, [192, 255]], [172, 27, 223, [0, 255]], [172, 27, 228, [0, 255]], [172, 27, 229, [0, 159]], [172, 27, 229, [192, 255]]]}";
	var all_permitTCP="'500004-1320011' : {[x,[172.20.11.[5.20]],143,143],[[10.30.[20.255].[0.255]],[172.19.63.[0.255]],[234.244],[76.98]]}";
	var all_denyTCP="'500004-1320011'        :       {[x,x,22,x]}";
	
	createDropDownList(groups);
	initializeGeneralProperties();
	 $("#pairsSelect1").on('change', function() {
		onChangeSelectFunction();
	});
	 $("#pairsSelect2").on('change', function() {
		onChangeSelectFunction();
	});
	function buildFundamentalHtmlPage(){
		var preTable=document.getElementById("colorTable");
		if(preTable==null){
			var colorTable=document.createElement("TABLE");
			colorTable.id="colorTable";
			document.body.appendChild(colorTable);
		}
		var mainDiv=document.getElementById("mainDiv");
		if(mainDiv!=null&&mainDiv.style.visibility=="visible")
			return;
		else if(mainDiv!=null&&mainDiv.style.visibility=="hidden"){
			revealElemWithChildren(mainDiv);
		}
		var mainDiv=document.createElement("DIV");
		mainDiv.id="mainDiv";
		mainDiv.className="table-container";
		document.body.appendChild(mainDiv);
		var wholeLeft=document.createElement("DIV");
		wholeLeft.id="wholeLeft";
		wholeLeft.className="headcol";
		mainDiv.appendChild(wholeLeft);
		var TableAlaki=document.createElement("TABLE");
		wholeLeft.appendChild(TableAlaki);
		var TheadAlaki=document.createElement("THEAD");
		TableAlaki.appendChild(TheadAlaki);
		var TR1=document.createElement("TR");
		TheadAlaki.appendChild(TR1);
		var TH1=document.createElement("TH");
		TH1.id="th1";
		TR1.appendChild(TH1);
		var DIVshert=document.createElement("DIV");
		DIVshert.id="shert";
		DIVshert.textContent="source IPs\destination IPs";
		TH1.appendChild(DIVshert);
		var TbodyAlaki=document.createElement("TBODY");
		TbodyAlaki.id="tbody1";
		TableAlaki.appendChild(TbodyAlaki);
		var wholeRight=document.createElement("DIV");
		wholeRight.id="wholeRight";
		wholeRight.className="right";
		mainDiv.appendChild(wholeRight);
		var Table=document.createElement("TABLE");
		wholeRight.appendChild(Table);
		var Thead=document.createElement("THEAD");
		Thead.id="thead2";
		Thead.position="relative";
		Table.appendChild(Thead);
		var Tbody=document.createElement("TBODY");
		Table.appendChild(Tbody);
		Tbody.id="mainBody";
		Tbody.className="Mytbody";
		$(document).ready(function(){
		    $(".headcol").css("width",leftHeaderWidth);
		    $(".tbody1").css("height",upHeaderHeight);
		    var wid=$(".headcol").css("width");
		    $(".right").css("left",wid);
		    $("#shert").css("width",leftHeaderWidth);
		    $("#shert").css("height",upHeaderHeight);
		});
	}
	function hideAll(){
		var mainDiv=document.getElementById("mainBody");
		if(mainDiv!=null)
			mainDiv.style.visibility = "hidden";
	}
	function removeElemWithChildren(elem){
		while (elem.firstChild) {
			removeElemWithChildren(elem.firstChild);
		}
		(elem.parentNode).removeChild(elem);
	}
	function hideElemWithChildren(elem){
		elem.style.visibility = "hidden";
		for (var i=0;i<elem.children.length;i++) {
			hideElemWithChildren((elem.children)[i]);
		}
	}
	function revealElemWithChildren(elem){
		elem.style.visibility = "visible";
		for (var i=0;i<elem.children.length;i++) {
			revealElemWithChildren(elem.children[i]);
		}	
	}
	function wipeAll(){	
		var mainDiv=document.getElementById("mainDiv");
		if(mainDiv!=null&&mainDiv.style.visibility!="hidden"){
			hideElemWithChildren(mainDiv);
		}
		else{
			var elements=document.getElementsByClassName('afterZoomIn');
			for(var i=0;i<elements.length;i++){
				removeElemWithChildren(elements[i]);
			}
		}
//		alert("document.body.innerHTML "+document.body.innerHTML)
//		alert("document.body.innerHTML before removing white spaces \n"+document.body.innerHTML);
//		document.body.innerHTML=(document.body.innerHTML).replace(/>\s+</g,'><');
//		alert("document.body.innerHTML after removing white spaces \n"+document.body.innerHTML);
	}
	function isBetween(b,a,c){
		if(parseInt(b)>=parseInt(a)&&parseInt(b)<=parseInt(c))
			return 0;
		if(parseInt(b)>parseInt(a)&&parseInt(b)>parseInt(c))
			return 1;
		return -1;
	}
	function checkIfExistsIn(on,bot,leftOff,bottOff,height,width,startSrc,startDst,endSrc,endDst){
		if(on.className==null||on.leftOffset==null||on.downOffset==null||on.MyWidth==null||on.MyHeight==null)
			alert("error in checkexists between for on,className "+on.className+" leftOffset "+on.leftOffset
					+" downOffset "+on.downOffset+" width "+on.MyWidth+" height "+on.MyHeight);
		if(bot.className==null||bot.leftOffset==null||bot.downOffset==null||bot.MyWidth==null||bot.MyHeight==null)
			alert("error in checkexists between for bot,className "+bot.className+" leftOffset "+bot.leftOffset
					+" downOffset "+bot.downOffset+" width "+bot.MyWidth+" height "+bot.MyHeight);
		var b1=isBetween(on.leftOffset,bot.leftOffset,parseInt(bot.leftOffset)+parseInt(bot.MyWidth));
		var b2=isBetween(parseInt(on.leftOffset)+parseInt(on.MyWidth),bot.leftOffset,parseInt(bot.leftOffset)+parseInt(bot.MyWidth));
		var b4=isBetween(on.downOffset,bot.downOffset,parseInt(bot.leftOffset)+parseInt(bot.MyHeight));
		var b5=isBetween(on.downOffset+on.MyHeight,bot.downOffset,bot.leftOffset+bot.MyHeight);
		if(((b1==0)||(b2==0)||(b1==-1&&b2==1))&&((b4==0)||(b5==0)||(b4==-1&&b5==1))){
			if(b1==0){
				leftOff.push(PxToInt(on.style.left)-PxToInt(bot.style.left));
				startDst.push(on.startDst);
				if(b2==0){
					width.push(PxToInt(on.style.width));
					endDst.push(on.endDst);
				}
				else{
					width.push(PxToInt(bot.style.width)-PxToInt(bot.style.left)+PxToInt(on.style.left));
					endDst.push(bot.endDst);
				}
			}	
			else if(b1==-1){
				leftOff.push(0);
				startDst.push(bot.startDst);
				if(b2==1){
					width.push(PxToInt(bot.style.width));
					endDst.push(bot.endDst);
				}
				else if(b2==0){
					width.push(PxToInt(on.style.width)-(PxToInt(bot.style.left)-PxToInt(on.style.left)));
					endDst.push(on.endDst);
				}
			}
			if(b4==0){
				bottOff.push(PxToInt(on.style.bottom)-PxToInt(bot.style.bottom));
				startSrc.push(on.startSrc);
				if(b5==0){
					height.push(PxToInt(on.style.height));
					endSrc.push(on.endSrc);
				}
				else{
					height.push(PxToInt(bot.style.height)-PxToInt(bot.style.bottom)+PxToInt(on.style.bottom));
					endSrc.push(bot.endSrc);
				}
			}
			else if(b4==-1){
				bottOff.push(0);
				startSrc.push(bot.startSrc);
				if(b5==1){
					height.push(PxToInt(bot.style.height));
					endSrc.push(bot.endSrc);
				}
				else if(b5==0){
					height.push(PxToInt(on.style.height)-(PxToInt(bot.style.bottom)-PxToInt(on.style.bottom)));
					endSrc.push(on.endSrc);
				}
			}
			return true;
		}
		return false;
	}
	function fundDivs(elem){
		if((elem.className).toString()=="DenyPart")
			return true;
		return false;
	}
	function localDivZoomIn(posTop,posLeft,caller){
		positionTop=posTop;
		positionLeft=posLeft;
		if((caller.className).toString()=="outerDiv"){
			caller=caller.parentNode;
		}
		if(firstZoomIn)
			return;
		firstZoomIn=true;
		var newDiv;
		var state=-1;
		var elements;
		if((caller.className).toString()=="MyDiv"){
			state=0;
			elements=caller.children;
		}
		else if(((caller.className).toString()=="splitDIVofoghi"||(caller.className).toString()=="splitDIVamoodi")
				&&((caller.parentNode).className).toString()=="MyDiv"){
			state=1;
			elements=(caller.parentNode).children;
		}
		else if(((caller.className).toString()=="splitDIVofoghi"||(caller.className).toString()=="splitDIVamoodi")
				&&((caller.parentNode).className).toString()=="Deny"){
			state=2;
			elements=((caller.parentNode).parentNode).children;
		}
		else{//it's denyPart itself
			state=3;
			elements=(caller.parentNode).children;
			}
		var newDiv=document.createElement("DIV");
		newDiv.className="afterZoomIn";
		newDiv.style.backgroundColor=caller.style.backgroundColor;
		var elementsLength = elements.length;
//		if((elements[0].className).toString()=="outerDiv"){//TODO can be in other places
//			elements = elements[0].children;
//			elementsLength = elements.length;
//		}
//		alert("start for in new elem state "+state+" class "+(caller.className).toString()+" "+caller.style.width+" "+caller.style.height);
		var newWidthScale=WidthScale;
 		var newHeightScale=heightScale;
 		if(PxToInt(caller.style.width)>PxToInt(caller.style.height)){
 			newWidthScale=PxToInt(caller.style.width)/(screen.width*0.7);
 			newHeightScale=PxToInt(caller.style.width)/(screen.width*0.7);
 		}
 		else{
 			newWidthScale=PxToInt(caller.style.height)/(screen.height*0.8);
 			newHeightScale=PxToInt(caller.style.height)/(screen.height*0.8);
 		}
// 		hideAll();
 		var outerOffset=false;
		newDiv.style.position="relative";
		var newWidth=PxToInt(caller.style.width);
		var newHeight=PxToInt(caller.style.height);
 		if(((caller.className).toString()=="splitDIVofoghi"||(caller.className).toString()=="splitDIVamoodi")){
 			outerOffset=true;
 			newWidth+=innerSplitOffsetWidth;
 			newHeight+=innerSplitOffsetHeight;
		}
 		for (var i = 0; i < elementsLength; i++) {
			var leftOff=[];
			var bottOff=[];
			var width=[];
			var height =[];
			var startSrc=[];
			var startDst=[];
			var endSrc=[];
			var endDst=[];
			if(elements[i].style.zIndex==null)
				elements[i].style.zIndex=0;
			if(caller.style.zIndex==null)
				caller.style.zIndex=0;
			if(fundDivs(elements[i])&&(parseInt(elements[i].style.zIndex)>=parseInt(caller.style.zIndex))
		 			&&checkIfExistsIn(elements[i],caller,leftOff,bottOff,height,width,startSrc,startDst,endSrc,endDst)){
				if(leftOff==null||bottOff==null||height==null||width==null||caller.MyWidth==null||
						caller.MyHeight==null)
					alert("error exists in newOn"+leftOff+" "+bottOff+" "+height+" "+width+"\n"+caller.MyWidth+" "+caller.MyHeight);
		 		
		 		var newOn=document.createElement("DIV");
		 		newOn.className="afterZoomIn";
		 		newOn.style.zIndex=elements[i].style.zIndex;
		 		newOn.style.backgroundColor=elements[i].style.backgroundColor;
		 		newOn.style.position="absolute";
//		 		alert((elements[i].parentNode).numberSplittedIn);
		 		if((elements[i].className).toString()=="splitDIVofoghi"){
		 			if((elements[i].parentNode).numberSplittedIn==null)
		 				(elements[i].parentNode).numberSplittedIn=1;
		 			height+=innerSplitOffsetHeight;
		 			width+=((elements[i].parentNode).numberSplittedIn)*innerSplitOffsetWidth;
				}
		 		else if((elements[i].className).toString()=="splitDIVamoodi"){
		 			if((elements[i].parentNode).numberSplittedIn==null)
		 				(elements[i].parentNode).numberSplittedIn=1;
		 			height+=((elements[i].parentNode).numberSplittedIn)*innerSplitOffsetHeight;
		 			width+=innerSplitOffsetWidth;
				}
//		 		if(outerOffset){
//		 			height+=innerSplitOffsetHeight;
//		 			width+=innerSplitOffsetWidth;
//		 		}
		 		newOn.style.width=(width/newWidthScale)+"px";
		 		newOn.style.height=(height/newHeightScale)+"px";
		 		newOn.style.left=(leftOff/newWidthScale)+"px";
		 		newOn.style.bottom=(bottOff/newHeightScale)+"px";;
		 		newOn.style.borderWidth ="1px 1px 1px 1px";
		 		newOn.style.borderColor="black";
		 		newOn.style.margin ="0px 0px 0px 0px";
		 		if(newOn.style.backgroundColor=="green")
		 			newOn.title="IP Access-Zone\n";
		 		else if(newOn.style.backgroundColor=="red")
		 			newOn.title="IP Deny-Zone\n";
		 		else 
		 			newOn.title="TCP Access-Zone\n";
		 		newOn.title+="Source IP zone: "+startSrc+" - "+endSrc+"\nDestination IP zone: "+startDst+" - "+endDst;
				newDiv.appendChild(newOn);
				if(PxToInt(newOn.style.width)>maxLimit)
					write4sides(true,"7", newOn, startSrc, endSrc, startDst, endDst);//TODO zindex??
//				alert("newOn "+newOn.style.width+" "+newOn.style.height+" "+newOn.style.left+" "+newOn.style.bottom);
		 	}
		}
 		
 		
 		newDiv.style.width=(newWidth/newWidthScale)+"px";
 		newDiv.style.height=(newHeight/newHeightScale)+"px";
// 		alert("after width height"+caller.style.width+" "+caller.style.height);
		newDiv.style.borderWidth ="0px 0px 0px 0px";
 		newDiv.style.margin ="0px 0px 0px 0px";
 		if(newDiv.style.backgroundColor=="green")
 			newDiv.title="IP Access-Zone\n";
 		else if(newDiv.style.backgroundColor=="red")
 			newDiv.title="IP Deny-Zone\n";
 		else 
 			newDiv.title="TCP Access-Zone\n";
 		newDiv.title+="Source IP zone: "+caller.startSrc+" - "+caller.endSrc+"\nDestination IP zone: "+caller.startDst+" - "+caller.endDst;
// 		var newDivZindex=parseInt(newDiv.style.zIndex)+1;
// 		if(newDivZindex==null)
// 			newDivZindex="1";
 		write4sides(true,"1", newDiv, caller.startSrc, caller.endSrc, caller.startDst, caller.endDst);
// 		alert("newDiv "+newDiv.style.width+" "+newDiv.style.height);
//		 $(".splitDIVamoodi").on('click', function() {
//			 localDivZoomOut();
//		});
		wipeAll();
		
		document.body.appendChild(newDiv);
		window.scrollTo(0, 0);
		zoomOutDone=false;
//		$('.innerDivDown').DownTextfill();
//	    $('.innerDivLeft').LeftTextfill();
		var elements = document.getElementsByClassName('innerDivLeftAfterZoom');
		var elementsLength = elements.length;
		for (var i = 0; i < elementsLength; i++) {
		 	$(elements[i]).LeftTextfill();
		}
		elements = document.getElementsByClassName('innerDivDownAfterZoom');
		elementsLength = elements.length;
		for (i = 0; i < elementsLength; i++) {
			$(elements[i]).DownTextfill();
		}
	    
		$(".afterZoomIn").on('click', function() {
			localDivZoomOut();
		});
	}
	function localDivZoomOut(){
		if(zoomOutDone)
			return;
		zoomOutDone=true;
		reShowWholeTable();
		window.scrollTo(positionLeft,positionTop);
		firstZoomIn=false;
	}
	function reShowWholeTable(){
		wipeAll();
		var mainDiv=document.getElementById("mainDiv");
		revealElemWithChildren(mainDiv);
		
		 $(".splitDIVamoodi").on('click', function() {
			 var $clicker = $(this);
		     var pos = $clicker.offset();
		     localDivZoomIn(pos.top,pos.left,this);
			 
		});
		 $(".splitDIVofoghi").on('click', function() {
			 var $clicker = $(this);
		     var pos = $clicker.offset();
		     localDivZoomIn(pos.top,pos.left,this);
		});
		 $(".DenyPart").on('click', function() {
			 var $clicker = $(this);
		     var pos = $clicker.offset();
		     localDivZoomIn(pos.top,pos.left,this);
		});
		 $(".MyDiv").on('click', function() {
			 var $clicker = $(this);
		     var pos = $clicker.offset();
		     localDivZoomIn(pos.top,pos.left,this);
		});  
		
	}
	function tableElem(){
			this.srcZone=-1;
			this.srcIPstart="";
			this.srcIPend="";
			this.dstZone=-1;
			this.dstIPstart="";
			this.dstIPend="";
	}
	function findCells(string,cells){//TODO
		var coundOpenBracket=0;
		var coundclosedBracket=0;
		for(var i=0;i<string.length;i++){
		}
		var splitted=string.split("],");
	}
	function setStartLengths(starts,lengths,string){
		if(string.indexOf(")")==-1){
			return;
		}
		var parts=string.split(/\),/);
		var temp;
		for(var i=0;i<parts.length;i++){
			parts[i]=(parts[i].substring(parts[i].indexOf("(")+1,parts[i].length));
			temp=parts[i].split(/,\s/);
			starts.push(parseFloat(temp[0].split(/L/)[0]));
			lengths.push(parseFloat(temp[1].split(/L/)[0]));
		}
	}
	function StartEndOfIP(WholeStart,WholeEnd,string){	
		var StartOfIP="";
		var EndOfIP="";
		if(string[0]=="("||string[0]=="[")
			string=string.substring(1,string.length);
		if(string[string.length-1]==")"||string[string.length-1]=="]")
			string=string.substring(0,string.length-1);
		var seperator=",";
		if((string.indexOf(seperator))==-1)
			seperator=".";
		var StartBrac="[";
		var endBrac="]";
		if(string.indexOf(StartBrac)==-1){
			StartBrac="(";
			endBrac=")";
		}
		while(true){
			var bracIndex=string.indexOf(StartBrac);
			var dotIndex=string.indexOf(seperator);
			if(bracIndex==-1&&dotIndex==-1){
				if(string.length>0){
					StartOfIP+=string+seperator;
					EndOfIP+=string+seperator;
				}
				break;
			}
			if(bracIndex!=-1&&bracIndex<dotIndex){
				var start=string.substring(bracIndex+1,string.indexOf(seperator));
				var end=string.substring(string.indexOf(seperator)+1,string.indexOf(endBrac));
				StartOfIP+=start+seperator;
				EndOfIP+=end+seperator;
				string=string.substring(string.indexOf(endBrac)+2,string.length);
			}
			else{
				StartOfIP+=string.substring(0,dotIndex)+seperator;
				EndOfIP+=string.substring(0,dotIndex)+seperator;
				string=string.substring(dotIndex+1,string.length);
			}
		}
		StartOfIP=StartOfIP.substring(0,StartOfIP.length-1);
		EndOfIP=EndOfIP.substring(0,EndOfIP.length-1);
		StartOfIP=StartOfIP.replace(/\s+/g,"");
		EndOfIP=EndOfIP.replace(/\s+/g,"");
		WholeStart.push(StartOfIP);
		WholeEnd.push(EndOfIP);
		
	}
	function LeftColumnShowIPs(body,realIPpairsPermitSrc,SrcLengths){
		for(var i=realIPpairsPermitSrc.length-1;i>=0;i--){
			var tr=document.createElement("tr");
			var td=document.createElement("td");
			tr.appendChild(td);
			body.appendChild(tr);
			var start=[];
			var end=[];
			StartEndOfIP(start,end,realIPpairsPermitSrc[i]);
			writeInside(td,start.pop(),end.pop());
			if((SrcLengths[i]/heightScale)>heightLimit){
				td.style.height=(SrcLengths[i]/heightScale).toString()+"px";//TODO
				tr.style.height=(SrcLengths[i]/heightScale).toString()+"px";//TODO
			}
			else{
				td.style.height=heightLimit.toString()+"px";
				tr.style.height=heightLimit.toString()+"px";
			}
			td.style.width=leftHeaderWidth+"px";
			tr.style.width=leftHeaderWidth+"px";
			var size=(NormalFontSizeRows*(SrcLengths[i]/heightScale));
		}
	}
	function writeInside(input,string1,string2){
		var outerDiv=document.createElement("div");
		outerDiv.className="outerDiv";
		input.appendChild(outerDiv);
		var innerDiv1=document.createElement("span");
		var innerDiv2=document.createElement("span");
		var innerDiv3=document.createElement("span");
		var innerDiv4=document.createElement("span");
		innerDiv3.textContent=string1;
		innerDiv4.textContent=string2;
		innerDiv3.style.fontSize="2px";
		innerDiv4.style.fontSize="2px";
		outerDiv.appendChild(innerDiv4);
		outerDiv.appendChild(innerDiv3);
		outerDiv.appendChild(innerDiv1);
		outerDiv.appendChild(innerDiv2);
		
		innerDiv3.className="innerDivDown";
		innerDiv4.className="innerDivUp";
//		textfillDown(innerDiv3);
	}
	function UpRowShowIPs(thead,realIPpairsPermitDst,DstLengths){
		for(var i=0;i<realIPpairsPermitDst.length;i++){
			var th=document.createElement("th");
			th.className="mostUpRow";
			if((DstLengths[i]/WidthScale)>widthLimit){
				th.style.width=(DstLengths[i]/WidthScale).toString()+"px";
			}
			else{
				th.style.width=(widthLimit).toString()+"px";
			}
			th.style.height=upHeaderHeight+"px";
			th.style.position="relative";
			thead.appendChild(th);
			var outerDiv=document.createElement("div");
			outerDiv.className="outerDiv";
			th.appendChild(outerDiv);
			var innerDiv1=document.createElement("span");
			var innerDiv2=document.createElement("span");
			var innerDiv3=document.createElement("span");
			var innerDiv4=document.createElement("span");
			var start=[];
			var end=[];
			StartEndOfIP(start,end,realIPpairsPermitDst[i]);
			innerDiv1.textContent=start.pop();
			innerDiv2.textContent=end.pop();
			innerDiv1.style.fontSize="2px";
			innerDiv2.style.fontSize="2px";
			outerDiv.appendChild(innerDiv3);
			outerDiv.appendChild(innerDiv4);
			outerDiv.appendChild(innerDiv1);
			outerDiv.appendChild(innerDiv2);
			
			innerDiv1.className="innerDivLeft";
			innerDiv2.className="innerDivRightofoghi";
//			textfillLeft(innerDiv1);
		}
	}
	function PlotPermitTableEachPort(DstStarts,DstLengths,SrcStarts,SrcLengths,table,realIPpairsPermitSrc,realIPpairsPermitDst){
		table.createCaption("first table!");
		var row;
		var cell;
		var wrapperInner;
		var divCreate;
		var wholeWidth=0;
		var TBody1=document.getElementById("tbody1");
		LeftColumnShowIPs(TBody1,realIPpairsPermitSrc,SrcLengths);
		UpRowShowIPs(document.getElementById("thead2"),realIPpairsPermitDst,DstLengths);//TODO	
		var MainBody=document.getElementById("mainBody");
		var Times=0;
		for(var i=SrcLengths.length-1;i>=0;i--){
			row=document.createElement("TR");
			row.className="Mytr";
			MainBody.appendChild(row);
			row.style.height=(SrcLengths[i]/heightScale).toString()+"px";
			wrapperInner=[];
			for(var j=0;j<DstLengths.length;j++){
				cell=document.createElement("TD");
				cell.className="Mytd";
				cell.id=(SrcLengths.length-1-i).toString()+"-"+(j).toString();
				row.appendChild(cell);
				divCreate=document.createElement("DIV");
				cell.appendChild(divCreate);
				divCreate.style.position="relative";
				divCreate.style.zIndex="0";
				divCreate.style.backgroundColor="green";
				if((DstLengths[j]/WidthScale)>widthLimit){
					cell.style.width=(DstLengths[j]/WidthScale).toString()+"px";
					divCreate.style.width=(DstLengths[j]/WidthScale).toString()+"px";
					
				}
				else{
					cell.style.width=(widthLimit).toString()+"px";
					divCreate.style.width=(widthLimit).toString()+"px";
				}
				if(i==SrcLengths.length-1&&j===0){
					wholeWidth+=DstLengths[j]/WidthScale;
				}
				if((SrcLengths[i]/heightScale)>heightLimit){
					cell.style.height=(SrcLengths[i]/heightScale).toString()+"px";
					divCreate.style.height=(SrcLengths[i]/heightScale).toString()+"px";
					
				}
				else{
					cell.style.height=(heightLimit).toString()+"px";
					divCreate.style.height=(heightLimit).toString()+"px";
				}
				cell.RealIPs=new Pair(realIPpairsPermitSrc[i],"");
				divCreate.leftOffset=0;
				divCreate.downOffset=0;
				divCreate.style.left="0px";
				divCreate.style.bottom="0px";
				divCreate.MyWidth=parseInt(DstLengths[j]);
				divCreate.MyHeight=parseInt(SrcLengths[i]);
				var numberInnerItems=1;
				var startSrc=[];
				var startDst=[];
				var endSrc=[];
				var endDst=[];
				StartEndOfIP(startSrc,endSrc,realIPpairsPermitSrc[i]);
				StartEndOfIP(startDst,endDst,realIPpairsPermitDst[j]);
				if((PxToInt(cell.style.height)/PxToInt(cell.style.width)>minLimit||
						PxToInt(cell.style.height)/PxToInt(cell.style.width)<1/minLimit)){
					splitDivToMultipleDivs( "1","green",divCreate,minLimit,PxToInt(cell.style.height),PxToInt(cell.style.width),SrcLengths[i],DstLengths[j],realIPpairsPermitSrc[i],realIPpairsPermitDst[j]);
				}
				else{			
					if(PxToInt(cell.style.height)>maxLimit&&PxToInt(cell.style.width)>maxLimit)
						write4sides(false,"1",divCreate,startSrc,endSrc,startDst,endDst);
					divCreate.title="IP Access-Zone\nsource IP Zone : "+startSrc+" - "+endSrc+"\n destination IP Zone : "+startDst+" - "+endDst;				
				}
				divCreate.startSrc=startSrc;
				divCreate.startDst=startDst;
				divCreate.endSrc=endSrc;
				divCreate.endDst=endDst;
				divCreate.className="MyDiv";
				divCreate.realIPpairsPermitSrc=realIPpairsPermitSrc[i];
				divCreate.realIPpairsPermitDst=realIPpairsPermitDst[j];
				divCreate.id="MyDiv"+i+"-"+j;
				wrapperInner.push(divCreate);
				
			}
			wrapper.push(wrapperInner);
		}
	}
	function write4sides(check,Zindex,divCreate,startSrc,endSrc,startDst,endDst){
		
		if(check&&PxToInt(divCreate.style.width)>maxLimit&&PxToInt(divCreate.style.height)>maxLimit){
			var outerDiv=document.createElement("div");
			outerDiv.className="outerDiv";
			divCreate.appendChild(outerDiv);
			var innerDiv1=document.createElement("div");
			var innerDiv2=document.createElement("div");
			var innerDiv3=document.createElement("div");
			var innerDiv4=document.createElement("div");
			var innerSpan1=document.createElement("span");
			var innerSpan2=document.createElement("span");
			var innerSpan3=document.createElement("span");
			var innerSpan4=document.createElement("span");
			innerDiv1.appendChild(innerSpan1);
			innerDiv2.appendChild(innerSpan2);
			innerDiv3.appendChild(innerSpan3);
			innerDiv4.appendChild(innerSpan4);
//			innerDiv1.style.textAlign = "center";
//			innerDiv2.style.textAlign = "center";
//			innerDiv3.style.textAlign = "center";
//			innerDiv4.style.textAlign = "center";
			innerSpan1.textContent=endSrc;
			innerSpan2.textContent=startSrc;
			innerSpan3.textContent=startDst;
			innerSpan4.textContent=endDst;
			outerDiv.appendChild(innerDiv1);
			outerDiv.appendChild(innerDiv2);
			outerDiv.appendChild(innerDiv3);
			outerDiv.appendChild(innerDiv4);
			innerDiv1.className="innerDivUpAfterZoom";
			innerDiv2.className="innerDivDownAfterZoom";
			innerDiv3.className="innerDivLeftAfterZoom";
			innerDiv4.className="innerDivRightofoghiAfterZoom";
//			innerDiv1.style.width=divCreate.style.width;
//			innerDiv1.style.height=divCreate.style.height;
//			innerDiv2.style.width=divCreate.style.width;
//			innerDiv2.style.height=divCreate.style.height;
//			innerDiv3.style.width=divCreate.style.width;
//			innerDiv3.style.height=divCreate.style.height;
//			innerDiv4.style.width=divCreate.style.width;
//			innerDiv4.style.height=divCreate.style.height;
//			textfillLeft(innerDiv3);
//			textfillDown(innerDiv2);
		}
	}
	function splitDivToMultipleDivs(Zindex,color,divCreate,limit,height,width,SrcLength,DstLength,realIPpairsPermitSrc,realIPpairsPermitDst){
		var offs=0;
		var comp;
		var innerD;
		var plus;
		var id=0;
		var string1=[];
		var string2=[];
		var string3=[];
		var string4=[];
		if(height<width){
			comp=width*WidthScale;
			plus=parseInt(limit*height*WidthScale);
			width=limit*height;
			MakeInnerTextContent(string1,string2,string3,string4,realIPpairsPermitSrc,realIPpairsPermitDst,0,plus,limit);
		}
		else{
			comp=height*heightScale;
			plus=parseInt(limit*width*heightScale);
			height=limit*width;
			id=1;
			MakeInnerTextContent(string1,string2,string3,string4,realIPpairsPermitSrc,realIPpairsPermitDst,1,plus,limit);
		}
		var i1=0;
		while(comp-offs>=plus*limit){
			innerD=document.createElement("DIV");
			divCreate.appendChild(innerD);
			if(id==0){
				innerD.className="splitDIVofoghi";
				innerD.leftOffset=offs;
				innerD.downOffset=0;
				innerD.MyWidth=plus;
				innerD.MyHeight=parseInt(divCreate.MyHeight);
				innerD.style.left=offs/WidthScale+"px";
				innerD.style.bottom="0px";
				innerD.style.height=(height-innerSplitOffsetHeight).toString()+"px";
				innerD.style.width=(width-innerSplitOffsetWidth).toString()+"px";
				innerD.style.cssFloat="left"; 
			}
			else{
				innerD.className="splitDIVamoodi";
				innerD.leftOffset=0;
				
				innerD.MyWidth=parseInt(divCreate.MyWidth);
				innerD.downOffset=parseInt(divCreate.MyHeight)-offs-innerD.MyWidth;
				innerD.MyHeight=plus;
				innerD.style.left="0px";
				innerD.style.bottom=innerD.downOffset/heightScale+"px";
				innerD.style.width=(width-innerSplitOffsetWidth).toString()+"px";
				innerD.style.height=(height-innerSplitOffsetHeight).toString()+"px";
			}
			offs+=plus;
			innerD.style.border = "thin solid #66FF33";
			innerD.style.borderWidth = "1px 1px 1px 1px";
			innerD.style.margin ="0px 0px 0px 0px";
			innerD.style.backgroundColor=color;
			
			var outerDiv=document.createElement("div");
			outerDiv.className="outerDiv";
			innerD.appendChild(outerDiv);
			innerD.style.zIndex = Zindex;
			var innerDiv1=document.createElement("span");
			var innerDiv2=document.createElement("span");
			var innerDiv3=document.createElement("span");
			var innerDiv4=document.createElement("span");
			
			outerDiv.title="IP Access-Zone\nsource IP Zone : ";
			if(string2.length>1){
				innerDiv2.textContent=string2[i1];
				outerDiv.title+=string2[i1]+" - ";
				innerD.startSrc=string2[i1];
			}
			else{
				innerDiv2.textContent=string2;
				outerDiv.title+=string2+" - ";
				innerD.startSrc=string2;
			}
			if(string1.length>1){
				innerDiv1.textContent=string1[i1];
				outerDiv.title+=string1[i1]+"\n destination IP Zone : ";
				innerD.endSrc=string1[i1];
			}
			else{
				innerDiv1.textContent=string1;
				outerDiv.title+=string1+"\n destination IP Zone : ";
				innerD.endSrc=string1;
			}
			if(string3.length>1){
				innerDiv3.textContent=string3[i1];
				outerDiv.title+=string3[i1]+" - ";
				innerD.startDst=string3[i1];
			}
			else{
				innerDiv3.textContent=string3;
				outerDiv.title+=string3+" - ";
				innerD.startDst=string3;
			}
			if(string4.length>1){
				innerDiv4.textContent=string4[i1];
				outerDiv.title+=string4[i1];
				innerD.endDst=string4[i1];
			}
			else{
				innerDiv4.textContent=string4;
				outerDiv.title+=string4;
				innerD.endDst=string4;
			}
//			outerDiv.appendChild(innerDiv1);
//			outerDiv.appendChild(innerDiv2);
//			outerDiv.appendChild(innerDiv3);
//			outerDiv.appendChild(innerDiv4);
//			innerDiv1.style.fontSize="2px";
//			innerDiv2.style.fontSize="2px";
//			innerDiv3.style.fontSize="2px";
//			innerDiv4.style.fontSize="2px";
//			innerDiv1.className="innerDivUp";
//			innerDiv2.className="innerDivDown";
//			innerDiv3.className="innerDivLeft";
//			if(id==0)
//				innerDiv4.className="innerDivRightofoghi";
//			else
//				innerDiv4.className="innerDivRightamoodi";
			i1++;
			
		}
		divCreate.numberSplittedIn=i1+1;
		innerD=document.createElement("DIV");
		divCreate.appendChild(innerD);
		innerD.style.zIndex = Zindex;
		innerD.style.border = "thin solid #66FF33";
		innerD.style.borderWidth = "1px 1px 1px 1px";
		innerD.style.margin ="0px 0px 0px 0px";
		if(id==0){
			innerD.className="splitDIVofoghi";
			innerD.leftOffset=offs;
			innerD.downOffset=0;
			innerD.MyWidth=comp-offs;
			innerD.MyHeight=parseInt(divCreate.MyHeight);
//			innerD.style.left=(offs/WidthScale)+"px";
			innerD.style.top="0px";
			innerD.style.height=(height-innerSplitOffsetHeight).toString()+"px";
//			innerD.style.cssFloat="right"; 
			var startWidth=((comp-offs)/WidthScale-innerSplitOffsetWidth);
			innerD.style.backgroundColor="yellow";
			innerD.style.width=startWidth.toString()+"px";
//			alert("last "+innerD.style.top);
//			while(innerD.style.top!="0px"){
//				startWidth--;
//				innerD.style.width=startWidth.toString()+"px";
//			}
		}
		else{
			innerD.className="splitDIVamoodi";
			innerD.leftOffset=0;
			innerD.downOffset=0;
			innerD.MyWidth=parseInt(divCreate.MyWidth);
			innerD.MyHeight=comp-offs;
			innerD.style.left="0px";
			innerD.style.bottom="0px";
			innerD.style.width=(width-innerSplitOffsetWidth).toString()+"px";
			var startHeight=(((comp-offs)/heightScale)-innerSplitOffsetHeight);
			innerD.style.height=startHeight.toString()+"px";
//			while(innerD.style.right!="0px"){
//				startHeight--;
//				innerD.style.height=startHeight.toString()+"px";
//			}
		}
		innerD.style.backgroundColor=color;
		var outerDiv=document.createElement("div");
		outerDiv.className="outerDiv";
		innerD.appendChild(outerDiv);
		innerD.style.zIndex = Zindex;
		var innerDiv1=document.createElement("span");
		var innerDiv2=document.createElement("span");
		var innerDiv3=document.createElement("span");
		var innerDiv4=document.createElement("span");
		
		outerDiv.title="IP Access-Zone\nsource IP Zone : ";
		
		if(string2.length>1){
			innerDiv2.textContent=string2[i1];
			outerDiv.title+=string2[i1]+" - ";
			innerD.startSrc=string2[i1];
		}
		else{
			innerDiv2.textContent=string2;
			outerDiv.title+=string2+" - ";
			innerD.startSrc=string2;
		}
		if(string1.length>1){
			innerDiv1.textContent=string1[i1];
			outerDiv.title+=string1[i1]+"\ndestination IP Zone : ";
			innerD.endSrc=string1[i1];
		}
		else{
			innerDiv1.textContent=string1;
			outerDiv.title+=string1+"\ndestination IP Zone : ";
			innerD.endSrc=string1;
		}
		if(string3.length>1){
			innerDiv3.textContent=string3[i1];
			outerDiv.title+=string3[i1]+" - ";
			innerD.startDst=string3[i1];
		}
		else{
			innerDiv3.textContent=string3;
			outerDiv.title+=string3+" - ";
			innerD.startDst=string3;
		}
		if(string4.length>1){
			innerDiv4.textContent=string4[i1];
			outerDiv.title+=string4[i1];
			innerD.endDst=string4[i1];
		}
		else{
			innerDiv4.textContent=string4;
			outerDiv.title+=string4;
			innerD.endDst=string4;
		}
//		alert("last one appended "+outerDiv.title);
//		outerDiv.appendChild(innerDiv1);
//		outerDiv.appendChild(innerDiv2);
//		outerDiv.appendChild(innerDiv3);
//		outerDiv.appendChild(innerDiv4);
//		innerDiv1.style.fontSize="2px";
//		innerDiv2.style.fontSize="2px";
//		innerDiv3.style.fontSize="2px";
//		innerDiv4.style.fontSize="2px";
//		innerDiv1.className="innerDivUp";
//		innerDiv2.className="innerDivDown";
//		innerDiv3.className="innerDivLeft";
//		if(id==0)
//			innerDiv4.className="innerDivRightofoghi";
//		else
//			innerDiv4.className="innerDivRightamoodi";
	}
	function splitDivToMultipleDivsTCPForm(Zindex,color,divCreate,limit,height,width,SrcLength,DstLength,realStartSrc,realEndSrc,realStartDst,realEndDst){
		var offs=0;
		var comp;
		var innerD;
		var plus;
		var id=0;
		var string1=[];
		var string2=[];
		var string3=[];
		var string4=[];
		if(height<width){
			comp=width*WidthScale;
			plus=parseInt(limit*height*WidthScale);
			width=limit*height;
			MakeInnerTextContentTCPForm(string1,string2,string3,string4,realStartSrc,realEndSrc,realStartDst,realEndDst,0,plus,limit);
		}
		else{
			comp=height*heightScale;
			plus=parseInt(limit*width*heightScale);
			height=limit*width;
			id=1;
			MakeInnerTextContentTCPForm(string1,string2,string3,string4,realStartSrc,realEndSrc,realStartDst,realEndDst,1,plus,limit);
		}
		var i1=0;
		while(comp-offs>=plus*limit){
			innerD=document.createElement("DIV");
			divCreate.appendChild(innerD);
			innerD.style.zIndex =Zindex;
			if(id==0){
				innerD.className="splitDIVofoghi";
				innerD.leftOffset=offs;
				innerD.downOffset=0;
				innerD.MyWidth=plus;
				innerD.MyHeight=parseInt(divCreate.MyHeight);
				innerD.style.left=(offs/WidthScale)+"px";
				innerD.style.bottom="0px";
				innerD.style.width=(width-innerSplitOffsetWidth).toString()+"px";
				innerD.style.height=(height-innerSplitOffsetHeight).toString()+"px";
				innerD.style.cssFloat="left"; 
			}
			else{
				innerD.className="splitDIVamoodi";
				innerD.leftOffset=0;
				
				innerD.MyWidth=parseInt(divCreate.MyWidth);
				innerD.downOffset=parseInt(divCreate.MyHeight)-offs-innerD.MyWidth;
				innerD.MyHeight=plus;
				innerD.style.left="0px";
				innerD.style.bottom=((innerD.downOffset)/heightScale)+"px";
				innerD.style.width=(width-innerSplitOffsetWidth).toString()+"px";
				innerD.style.height=(height-innerSplitOffsetHeight).toString()+"px";
			}
			offs+=plus;
			innerD.style.border = "thin solid #66FF33";
			innerD.style.borderWidth = "1px 1px 1px 1px";
			innerD.style.margin ="0px 0px 0px 0px";
			innerD.style.backgroundColor=color;
			var outerDiv=document.createElement("div");
			outerDiv.className="outerDiv";
			innerD.appendChild(outerDiv);
			innerD.style.zIndex = Zindex;
			var innerDiv1=document.createElement("span");
			var innerDiv2=document.createElement("span");
			var innerDiv3=document.createElement("span");
			var innerDiv4=document.createElement("span");
			if(color=="red"){
				outerDiv.title="IP Deny-Zone\n";
			}
			else{
				outerDiv.title="TCP Access-Zone\n";
			}
			outerDiv.title+="source IP Zone : ";
			if(string2.length>1){
				innerDiv2.textContent=string2[i1];
				outerDiv.title+=string2[i1]+" - ";
				innerD.startSrc=string2[i1];
			}
			else{
				innerDiv2.textContent=string2;
				outerDiv.title+=string2+" - ";
				innerD.startSrc=string2;
			}
			if(string1.length>1){
				innerDiv1.textContent=string1[i1];
				outerDiv.title+=string1[i1]+"\n destination IP Zone : ";
				innerD.endSrc=string1[i1];
			}
			else{
				innerDiv1.textContent=string1;
				outerDiv.title+=string1+"\n destination IP Zone : ";
				innerD.endSrc=string1;
			}
			if(string3.length>1){
				innerDiv3.textContent=string3[i1];
				outerDiv.title+=string3[i1]+" - ";
				innerD.startDst=string3[i1];
			}
			else{
				innerDiv3.textContent=string3;
				outerDiv.title+=string3+" - ";
				innerD.startDst=string3;
			}
			if(string4.length>1){
				innerDiv4.textContent=string4[i1];
				outerDiv.title+=string4[i1];
				innerD.endDst=string4[i1];
			}
			else{
				innerDiv4.textContent=string4;
				outerDiv.title+=string4;
				innerD.endDst=string4;
			}
//			outerDiv.appendChild(innerDiv1);
//			outerDiv.appendChild(innerDiv2);
//			outerDiv.appendChild(innerDiv3);
//			outerDiv.appendChild(innerDiv4);
//			innerDiv1.style.fontSize="2px";
//			innerDiv2.style.fontSize="2px";
//			innerDiv3.style.fontSize="2px";
//			innerDiv4.style.fontSize="2px";
//			innerDiv1.className="innerDivUp";
//			innerDiv2.className="innerDivDown";
//			innerDiv3.className="innerDivLeft";
//			if(id==0)
//				innerDiv4.className="innerDivRightofoghi";
//			else
//				innerDiv4.className="innerDivRightamoodi";
			i1++;
		}
		divCreate.numberSplittedIn=i1+1;
		innerD=document.createElement("DIV");
		divCreate.appendChild(innerD);

		if(id==0){
			innerD.className="splitDIVofoghi";
			innerD.leftOffset=offs;
			innerD.downOffset=0;
			innerD.MyWidth=comp-offs;
			innerD.MyHeight=parseInt(divCreate.MyHeight);
			innerD.style.left=(offs/WidthScale)+"px";
			innerD.style.bottom="0px";
			innerD.style.height=(height-innerSplitOffsetHeight).toString()+"px";
			innerD.style.cssFloat="right"; 
			var startWidth=((comp-offs)/WidthScale-innerSplitOffsetWidth);
			innerD.style.width=startWidth.toString()+"px";
//			while(innerD.style.top!="0px"){
//				startWidth--;
//				innerD.style.width=startWidth.toString()+"px";
//			}
		}
		else{
			innerD.className="splitDIVamoodi";
			innerD.leftOffset=0;
			innerD.downOffset=0;
			innerD.MyWidth=parseInt(divCreate.MyWidth);
			innerD.MyHeight=comp-offs;
			innerD.style.left="0px";
			innerD.style.bottom="0px";
			innerD.style.width=(width-innerSplitOffsetWidth).toString()+"px";
			var startHeight=(((comp-offs)/heightScale)-innerSplitOffsetHeight);
			innerD.style.height=startHeight.toString()+"px";
//			while(innerD.style.right!="0px"){
//				startHeight--;
//				innerD.style.height=startHeight.toString()+"px";
//			}
		}
		innerD.style.border = "thin solid #66FF33";
		innerD.style.borderWidth = "1px 1px 1px 1px";
		innerD.style.margin ="0px 0px 0px 0px";
		innerD.style.backgroundColor=color;
		innerD.style.zIndex =Zindex;
		var outerDiv=document.createElement("div");
		outerDiv.className="outerDiv";
		innerD.appendChild(outerDiv);
		var innerDiv1=document.createElement("span");
		var innerDiv2=document.createElement("span");
		var innerDiv3=document.createElement("span");
		var innerDiv4=document.createElement("span");
		if(color=="red"){
			outerDiv.title="IP Deny-Zone\n";
		}
		else{
			outerDiv.title="TCP Access-Zone\n";
		}
		outerDiv.title+="source IP Zone : ";
		if(string2.length>1){
			innerDiv2.textContent=string2[i1];
			outerDiv.title+=string2[i1]+" - ";
			innerD.startSrc=string2[i1];
		}
		else{
			innerDiv2.textContent=string2;
			outerDiv.title+=string2+" - ";
			innerD.startSrc=string2;
		}
		if(string1.length>1){
			innerDiv1.textContent=string1[i1];
			outerDiv.title+=string1[i1]+"\n destination IP Zone : ";
			innerD.endSrc=string1[i1];
		}
		else{
			innerDiv1.textContent=string1;
			outerDiv.title+=string1+"\n destination IP Zone : ";
			innerD.endSrc=string1;
		}
		if(string3.length>1){
			innerDiv3.textContent=string3[i1];
			outerDiv.title+=string3[i1]+" - ";
			innerD.startDst=string3[i1];
		}
		else{
			innerDiv3.textContent=string3;
			outerDiv.title+=string3+" - ";
			innerD.startDst=string3;
		}
		if(string4.length>1){
			innerDiv4.textContent=string4[i1];
			outerDiv.title+=string4[i1];
			innerD.endDst=string4[i1];
		}
		else{
			innerDiv4.textContent=string4;
			outerDiv.title+=string4;
			innerD.endDst=string4;
		}
//		outerDiv.appendChild(innerDiv1);
//		outerDiv.appendChild(innerDiv2);
//		outerDiv.appendChild(innerDiv3);
//		outerDiv.appendChild(innerDiv4);
//		innerDiv1.style.fontSize="2px";
//		innerDiv2.style.fontSize="2px";
//		innerDiv3.style.fontSize="2px";
//		innerDiv4.style.fontSize="2px";
//		innerDiv1.className="innerDivUp";
//		innerDiv2.className="innerDivDown";
//		innerDiv3.className="innerDivLeft";
//		if(id==0)
//			innerDiv4.className="innerDivRightofoghi";
//		else
//			innerDiv4.className="innerDivRightamoodi";
	}
	function IPtoNumber(string){
		var result;
		if(string.toString().indexOf(",")!=-1){
			result=string.toString().split(",");
		}
		else{
			result=string.toString().split(".");
		}
		for(var i=0;i<4;i++){
			result[i]=parseInt(result[i]);
		}
		return result;
	}
	function DistanceBetween(end,comp){
		var result=0;
		var endsp=IPtoNumber(end);
		var compsp=IPtoNumber(comp);
		for(var i=0;i<4;i++){
			result*=256;
			result+=parseInt(endsp[i])-parseInt(compsp[i]);
		}
		return result+1;
	}
	function MakeInnerTextContent(string1,string2,string3,string4,realIPpairsPermitSrc,realIPpairsPermitDst,id,step,limit){
		var startSrc=[];
		var startDst=[];
		var endSrc=[];
		var endDst=[];
		StartEndOfIP(startSrc,endSrc,realIPpairsPermitSrc);
		StartEndOfIP(startDst,endDst,realIPpairsPermitDst);
		if(id==0){
			string1.push(endSrc);
			string2.push(startSrc);
			var tmpdst=startDst;
			var i2=0;
			while(DistanceBetween(endDst,tmpdst)>=limit*step){
				string3.push(tmpdst);
				tmpdst=DetermineNextIP(tmpdst,step-1);
				string4.push(tmpdst);
				tmpdst=DetermineNextIP(tmpdst,1);
				i2++;
			}
			string3.push(tmpdst);
			string4.push(endDst);
//			alert("last in text maker comp-offs "+DistanceBetween(endDst,tmpdst));
		}
		else{
			string3.push(startDst);
			string4.push(endDst);
			var tmpdst=endSrc;
			var i3=0;
			while(DistanceBetween(tmpdst,startSrc)>=limit*step){
				string1.push(tmpdst);
				tmpdst=PreviousIP(tmpdst,step-1);
				string2.push(tmpdst);
				tmpdst=PreviousIP(tmpdst,1);
				i3++;
			}
			string1.push(tmpdst);
			string2.push(startSrc);
		}
	}
	function MakeInnerTextContentTCPForm(string1,string2,string3,string4,startSrc,endSrc,startDst,endDst,id,step,limit){
		if(id==0){
			string1.push(endSrc);
			string2.push(startSrc);
			var tmpdst=startDst;
			var i2=0;
			while(DistanceBetween(endDst,tmpdst)>=limit*step){
				string3.push(tmpdst);
				tmpdst=DetermineNextIP(tmpdst,step-1);
				string4.push(tmpdst);
				tmpdst=DetermineNextIP(tmpdst,1);
				i2++;
			}
			string3.push(tmpdst);
			string4.push(endDst);

		}
		else{
			string3.push(startDst);
			string4.push(endDst);
			var tmpdst=endSrc;
			var i3=0;
			while(DistanceBetween(tmpdst,startSrc)>=limit*step){
				string1.push(tmpdst);
				tmpdst=PreviousIP(tmpdst,step-1);
				string2.push(tmpdst);
				tmpdst=PreviousIP(tmpdst,1);
				i3++;
			}
			string1.push(tmpdst);
			string2.push(startSrc);
		}
	}
	function ValueTo4tuples(val){
		var result=[];
		for(var i=3;i>=0;i--){
			result.push(Math.floor(val/Math.pow(256,i)));
			val=val%Math.pow(256,i);
		}
		return result;
	}
	function DetermineNextIP(tmpdst,step){
		var step4=[];
		var saveStep=step;
		step=parseInt(step);
		
		tmpdst=IPtoNumber(tmpdst);
		var val;
		var rest=0;
		var each=ValueTo4tuples(step);
		for(var i=3;i>=0;i--){
			val=parseInt(tmpdst[i])+parseInt(each[i])+rest;
			if(val>255){
				val-=256;
				rest=1;
			}
			else{
				rest=0;
			}
			step4.push(val);
		}
		step4.reverse();
		return NumberToIP(step4);
	}
	function NumberToIP(array){
		var result="";
		for(var i=0;i<3;i++){
			result+=array[i]+",";
		}
		result+=array[i];
		return result;
	}
	function PreviousIP(tmpdst,step){
		var step4=[];
		var saveStep=step;
		step=parseInt(step);
		tmpdst=IPtoNumber(tmpdst);
		var val;
		var rest=0;
		var each=ValueTo4tuples(step);
		for(var i=3;i>=0;i--){
			val=parseInt(tmpdst[i])-parseInt(each[i])-rest;
			if(val<0){
				val+=256;
				rest=1;
			}
			else{
				rest=0;
			}
			step4.push(val);
		}
		step4.reverse();
		
		return NumberToIP(step4);
	}
	function isEqualIP(one,two){
		var onep=IPtoNumber(one);
		var twop=IPtoNumber(two);
		for(var i=3;i>=0;i--){
			if(onep[i]!=twop[i])
				return false;
		}
		return true;
	}
	function isAdjacent(num,IP2,IP1){
		var start1=[];
		var start2=[];
		var end1=[];
		var end2=[];
		StartEndOfIP(start1,end1,IP1);
		StartEndOfIP(start2,end2,IP2);
		var comp=DetermineNextIP(end1, 1);
		if(isEqualIP(comp,start2))
			return true;
		return false;
	}
	function addAdjacentIndexes(num,index, all,permitStarts,permitLengths,realIPpairsPermit,start,length){
		var diffLength;
		var saveIndex=index;
		while(index<realIPpairsPermit.length&&length>0&&(index==saveIndex||isAdjacent(num,realIPpairsPermit[index],realIPpairsPermit[index-1]))){
			all.push(index);
			
			diffLength=permitLengths[index]-(start-permitStarts[index]);
			length-=diffLength;
			start=start+diffLength;
			index++;
		}
		return length;
	}
	function findIndexContain(num,innerIndexes,Offset,start,length,permitStarts,permitLengths,realIPpairsPermit){
		var j=0;
		var remainedLength;
		start=parseFloat(start);
		length=parseFloat(length);
		while(j<permitStarts.length&&length>0){
			permitStarts[j]=parseFloat(permitStarts[j]);
			permitLengths[j]=parseFloat(permitLengths[j]);
			if(length>0&&(start>=permitStarts[j])&&(start<(permitStarts[j]+permitLengths[j]))){
				Offset.push(start-permitStarts[j]);
				remainedLength=addAdjacentIndexes(num,j,innerIndexes,permitStarts,permitLengths,realIPpairsPermit,start,length);
				break;
			}
			j++;
		}
		return Math.max(0,remainedLength);
		if(innerIndexes.length==0){
			alert("No Interval Found For Start = "+ start+" "+permitStarts[0]+" "+ permitLengths[0]);
		}
	}
	function FindZoneIndex(num,Offset,indexes,starts,lengths,permitStarts,permitLengths,realIPpairsPermit){
		var j=0;
		var innnerIndexes=[];
		for(var i=0;i<starts.length;i++){
			innnerIndexes=[];
			lengths[i]=lengths[i]-findIndexContain(num,innnerIndexes,Offset,starts[i],lengths[i],permitStarts,permitLengths,realIPpairsPermit);
			indexes.push(innnerIndexes);
		}
	}
	function createToolTipText(denyPart,src,dst){
		var label=document.createElement("LABEL");
		label.title="source IP Zone : "+src+"\n destination IP Zone : "+dst;
		denyPart.appendChild(label);
	}
	function colorDstCells(table,permitSrcStarts,DstIndexes,denyDstLengths,rightOffset,permitDstStarts,permitDstLengths,realIPpairsDenySrc,realIPpairsPermitDst){//???????????????????????? surely each one will be in one cell
		var denyPart;
		var cell;
		var currentWrapper;
			for(var j=0;j<DstIndexes.length;j++){
				for(var i=permitSrcStarts.length-1;i>=0;i--){
				currentWrapper=wrapper[i][DstIndexes[j][0]];
				var startSrc=[];
				var startDst=[];
				var endSrc=[];
				var endDst=[];
				StartEndOfIP(startSrc,endSrc,realIPpairsPermitSrc[permitSrcStarts.length-1-i]);
				StartEndOfIP(startDst,endDst,realIPpairsPermitDst[DstIndexes[j][0]]);
				startDst=DetermineNextIP(startDst,rightOffset[j]);
				endDst=DetermineNextIP(startDst,denyDstLengths[j]-1);
				denyPart=document.createElement("DIV");
				denyPart.leftOffset=parseInt(rightOffset[j]);
				denyPart.downOffset=0;
				denyPart.MyWidth=parseInt(denyDstLengths[j]);
				denyPart.MyHeight=parseInt(currentWrapper.MyHeight);
				if(currentWrapper.MyWidth/WidthScale>widthLimit)
					denyPart.style.width=(denyDstLengths[j]/WidthScale).toString()+"px";
				else
					denyPart.style.width=(denyDstLengths[j]*widthLimit/(WidthScale*(currentWrapper.MyWidth/WidthScale))).toString()+"px";
				denyPart.style.height=currentWrapper.style.height;
				if(currentWrapper.MyWidth/WidthScale>widthLimit){
					denyPart.style.left=(rightOffset[j]/WidthScale).toString()+"px";
				}
				else{
					denyPart.style.left=(rightOffset[j]*widthLimit/(WidthScale*(currentWrapper.MyWidth/WidthScale))).toString()+"px";
				}
				denyPart.style.top="0px";
				denyPart.style.bottom ="0px";
				denyPart.style.borderWidth ="1px 1px 1px 1px";
				denyPart.style.borderColor="black";
				denyPart.style.margin ="0px 0px 0px 0px";
				denyPart.style.backgroundColor="red";
				denyPart.style.position="absolute";
				denyPart.style.zIndex = "16";
				currentWrapper.appendChild(denyPart);
				denyPart.className="DenyPart";
				if((PxToInt(denyPart.style.height)/PxToInt(denyPart.style.width)>minLimit||
						PxToInt(denyPart.style.height)/PxToInt(denyPart.style.width)<1/minLimit)&&
						(PxToInt(denyPart.style.height)>maxLimit&&PxToInt(denyPart.style.width)>maxLimit)){
					splitDivToMultipleDivsTCPForm("16","red",denyPart,minLimit,PxToInt(denyPart.style.height),PxToInt(denyPart.style.width),currentWrapper.MyHeight,denyDstLengths[j],startSrc,endSrc,startDst,endDst);
				}
				else{
					if((PxToInt(denyPart.style.height)>maxLimit&&PxToInt(denyPart.style.width)>maxLimit))
						write4sides(false,"16",denyPart,startSrc,endSrc,startDst,endDst);
					denyPart.title="IP Deny-Zone\nsource IP Zone : "+startSrc+" - "+ endSrc+"\n destination IP Zone : "+startDst+" - "+ endDst;
				}
				denyPart.startSrc=startSrc;
				denyPart.startDst=startDst;
				denyPart.endSrc=endSrc;
				denyPart.endDst=endDst;
			}
		}
	}
	function DetermineDenyLegthsInEachDstCell(dnyWidthCheck,table,permitSrcStarts,DstIndexes,denyDstLengths,rightOffset,permitSrcLengths,permitDstLengths){//???????????????????????? surely each one will be in one cell
			for(var j=0;j<DstIndexes.length;j++){
				for(var i=permitSrcStarts.length-1;i>=0;i--){
					dnyWidthCheck.push(denyDstLengths[j]);
			}
		}
	}
	function PlotDenyDstPartsEachPort(permitSrcStarts,permitSrcLengths,permitDstStarts,permitDstLengths,denyDstStarts,denyDstLengths,table,realIPpairsDenySrc,realIPpairsPermitDst){
		var DstIndexes=[];
		var rightOffset=[];
		FindZoneIndex(0,rightOffset,DstIndexes,denyDstStarts,denyDstLengths,permitDstStarts,permitDstLengths,realIPpairsPermitDst);
		colorDstCells(table,permitSrcStarts,DstIndexes,denyDstLengths,rightOffset,permitDstStarts,permitDstLengths,realIPpairsDenySrc,realIPpairsPermitDst);
	}
	function pairStartLength(sstart,slength){
		this.start=sstart;
		this.length=slength;
	}
	function pairDenySrc(){
		this.Srcs;
		this.dst;
	}
	function findSrcDstDenyPair(string,allPairs){
		var secondSplitted=string.split(/:\s/);
		var starts=[];
		var lengths=[];
		var pair=new pairDenySrc();
		setStartLengths(starts,lengths,secondSplitted[1]);
		pair.dst=new pairStartLength(starts,lengths);
		starts=[];
		lengths=[];
		setStartLengths(starts,lengths,secondSplitted[0]);
		pair.Srcs=(new pairStartLength(starts,lengths));
		allPairs.push(pair);
	}
	function setStartLengthsDenySrc(allPairs,deny_src_T){
		if(deny_src_T.indexOf("]")==-1)
			return;
		var firstSplitted=deny_src_T.split(/],/);
		for(var i=0; i<firstSplitted.length;i++){
			findSrcDstDenyPair(firstSplitted[i],allPairs);
		}
	}
	function PxToInt(string){
		var result=parseFloat(string.split(/^px/)[0]);
		return result;
	}
	function colorCellsBoth(realIPDenySrc,table,rightOffset,DstIndexes,downOffset,SrcIndexes,Dstlengths,Srclengths,LENGTH,newSrcLength){//TODO must be changed so as to TCP both
		
		LENGTH=LENGTH.length;
		var denyPart;
		var cell;
		var dstLength;
		var srcLength;
		var remainedDstLength;
		var remainedSrcLength;
		for(var i=0;i<SrcIndexes.length;i++){
			remainedSrcLength=newSrcLength;
			for(var k1=0;k1<SrcIndexes[i].length;k1++){
				for(var j=0;j<DstIndexes.length;j++){
					remainedDstLength=Dstlengths[j];
					for(var k2=0;k2<DstIndexes[j].length;k2++){
						var wrapperInner=wrapper[LENGTH-1-SrcIndexes[i][k1]][DstIndexes[j][k2]];
//						wrapperInner.style.backgroundColor="blue";
//						wrapperInner.style.zIndex = "13";
						denyPart=document.createElement("DIV");
						
						if(k2==0){
							dstLength=wrapperInner.MyWidth-(rightOffset[j]);
							denyPart.leftOffset=parseInt(rightOffset[j]);
							if(wrapperInner.MyWidth/WidthScale>widthLimit){
								denyPart.style.left=(rightOffset[j]/WidthScale).toString()+"px";
								
							}
							else
								denyPart.style.left=(rightOffset[j]*widthLimit/(WidthScale*(wrapperInner.MyWidth/WidthScale))).toString()+"px";
						}
						else if(remainedDstLength>=wrapperInner.MyWidth){
							dstLength=wrapperInner.MyWidth;
							denyPart.style.left="0px";
							denyPart.leftOffset=0;
						}
						else{
							denyPart.style.left="0px";
							denyPart.leftOffset=0;
							dstLength=remainedDstLength;
						}
						if(k1==0){
//							alert(heightScale+" PxToInt(wrapperInner.style.height.toString())*heightScale "+(PxToInt(wrapperInner.style.height.toString())*heightScale)+" downOffset[i] "+downOffset[i]);
							srcLength=wrapperInner.MyHeight-downOffset[i];
							denyPart.downOffset=parseInt(downOffset[i]);
							if(wrapperInner.MyHeight/heightScale>heightLimit)
								denyPart.style.bottom =(downOffset[i]/heightScale).toString()+"px";
							else
								denyPart.style.bottom=(downOffset[i]*heightLimit/(heightScale*(wrapperInner.MyHeight/heightScale))).toString()+"px";
//							denyPart.style.top=(PxToInt(wrapperInner.style.height.toString())-(downOffset[i]/heightScale)-(srcLength/heightScale)).toString()+"px";TODO
						}
						else if(remainedSrcLength>=wrapperInner.MyHeight){
							srcLength=wrapperInner.MyHeight;
							denyPart.downOffset=0;
							denyPart.style.bottom ="0px";
//							denyPart.style.top=(PxToInt(wrapperInner.style.height.toString())-(srcLength/heightScale)).toString()+"px";TODO
							if(srcLength<=0)
								alert("in remainedSrcLength>=cell.height srcLength= "+srcLength);
						}
						else{
							
							denyPart.style.bottom ="0px";
							denyPart.downOffset=0;
							srcLength=remainedSrcLength;
//							denyPart.style.top=(PxToInt(wrapperInner.style.height.toString())-(srcLength/heightScale)).toString()+"px";
							if(srcLength<=0){
								alert("in k1 else srcLength= "+srcLength);
							}
						}
						denyPart.MyWidth=dstLength;
						denyPart.MyHeight=srcLength;
						if(wrapperInner.MyWidth/WidthScale>widthLimit){
							
							denyPart.style.width=(dstLength/WidthScale).toString()+"px";
//							alert("width above limit "+dstLength);
						}
						else{
							denyPart.style.width=(dstLength*widthLimit/(WidthScale*(wrapperInner.MyWidth/WidthScale))).toString()+"px";
//							alert("width below limit "+(dstLength*widthLimit/(wrapperInner.MyWidth/WidthScale))+" instead of "+dstLength);
						}
						if(wrapperInner.MyHeight/heightScale>heightLimit){
							denyPart.style.height=(srcLength/heightScale).toString()+"px";
//							alert("height above limit "+srcLength);
						}
						else{
							denyPart.style.height=(srcLength*heightLimit/(heightScale*(wrapperInner.MyHeight/heightScale))).toString()+"px";
//							alert("height below limit "+(srcLength*heightLimit/(wrapperInner.MyHeight/heightScale))+" instead of "+dstLength);
						}
//						alert("srcLength "+srcLength+" dstLength "+
//								dstLength+" width="+denyPart.style.width+" compare "+wrapperInner.style.width+" height="
//								+denyPart.style.height+" compare "+wrapperInner.style.height);
						denyPart.style.borderWidth ="1px 1px 1px 1px";
						denyPart.style.borderColor="black";
						denyPart.style.margin ="0px 0px 0px 0px";
						denyPart.style.backgroundColor="red";
						denyPart.style.position="absolute";
						var srcResult=[];
						var dstResult=[];
//						alert("real out src "+realIPDenySrc.Srcs[j]+" dst "+realIPDenySrc.dst[j]
//							+"\nwhole cell src "+wrapperInner.realIPpairsPermitSrc+" dst "+wrapperInner.realIPpairsPermitDst);
						
						cutIPfromTo(srcResult,realIPDenySrc.Srcs[j],srcLength,newSrcLength-remainedSrcLength);
						cutIPfromTo(dstResult,realIPDenySrc.dst[j],dstLength,Dstlengths[j]-remainedDstLength);
						denyPart.className="DenyPart";
						denyPart.style.zIndex = "19";
						wrapperInner.appendChild(denyPart);
						if((PxToInt(denyPart.style.height)/PxToInt(denyPart.style.width)>minLimit||
								PxToInt(denyPart.style.height)/PxToInt(denyPart.style.width)<1/minLimit)&&
								(PxToInt(denyPart.style.height)>maxLimit&&PxToInt(denyPart.style.width)>maxLimit)){
							splitDivToMultipleDivsTCPForm("15","red",denyPart,minLimit,PxToInt(denyPart.style.height),PxToInt(denyPart.style.width),srcLength,dstLength,srcResult[0],srcResult[1],dstResult[0],dstResult[1]);
						}
						else{
							
							if((PxToInt(denyPart.style.height)>maxLimit&&PxToInt(denyPart.style.width)>maxLimit))
								write4sides(false,"20",denyPart,srcResult[0],srcResult[1],dstResult[0],dstResult[1]);
							denyPart.title="IP Deny-Zone\nsource IP Zone : "+srcResult[0]+" - "+srcResult[1]+"\n destination IP Zone : "+dstResult[0]+" - "+dstResult[1];
							
						}
						denyPart.startSrc=srcResult[0];
						denyPart.startDst=dstResult[0];
						denyPart.endSrc=srcResult[1];
						denyPart.endDst=dstResult[1];
						remainedDstLength-=dstLength;
					}
				}
				remainedSrcLength-=srcLength;
			}
		}
	}
function DetermineDenyLegthsInEachCell(denyWidths,denyHeights,realIPDenySrc,table,rightOffset,DstIndexes,downOffset,SrcIndexes,Dstlengths,Srclengths,LENGTH,permitSrcLengths,permitDstLengths,newLength){//TODO must be changed so as to TCP both
	LENGTH=LENGTH.length;
		var denyPart;
		var cell;
		var dstLength;
		var srcLength;
		var remainedDstLength;
		var remainedSrcLength;
		for(var i=0;i<SrcIndexes.length;i++){
			remainedSrcLength=newLength;
			for(var k1=0;k1<SrcIndexes[i].length;k1++){
				for(var j=0;j<DstIndexes.length;j++){
					remainedDstLength=Dstlengths[j];
					for(var k2=0;k2<DstIndexes[j].length;k2++){
						if(k2==0){
							dstLength=permitDstLengths[DstIndexes[j][k2]]-(rightOffset[j]);
						}
						else if(remainedDstLength>=permitDstLengths[DstIndexes[j][k2]]){
							dstLength=permitDstLengths[DstIndexes[j][k2]];
						}
						else{
							dstLength=remainedDstLength;
						}
						if(k1==0){
							srcLength=permitSrcLengths[SrcIndexes[i][k1]]-downOffset[i];
						}
						else if(remainedSrcLength>=permitSrcLengths[SrcIndexes[i][k1]]){
							srcLength=permitSrcLengths[SrcIndexes[i][k1]];
							if(srcLength<=0)
								alert("in remainedSrcLength>=cell.height srcLength= "+srcLength);
						}
						else{
							srcLength=remainedSrcLength;
							if(srcLength<=0){
								alert("in k1 else srcLength= "+srcLength);
							}
						}
//						alert(SrcIndexes[i][k1]+"  "+permitSrcLengths+"  \n"+DstIndexes[j][k2]+"  "+permitDstLengths);
//						alert(srcLength+"  "+dstLength);
						denyWidths.push(dstLength);
						denyHeights.push(srcLength);
						remainedDstLength-=dstLength;
						
					}
				}
				remainedSrcLength-=srcLength;
			}
		}
	}
	function cutIPfromTo(result,real,length,initial){
		var start=[];
		var end=[];
		if(real[0]=="{")
			real=real.substring(1,real.length);
		real=real.replace(/\s+/g,"");
		StartEndOfIP(start,end,real);
		result.push(DetermineNextIP(start,initial));
		result.push(DetermineNextIP(result[0],length-1));
	}
	function compareIPs(IP1,IP2){
		var onep=IPtoNumber(IP1);
		var twop=IPtoNumber(IP2);
		for(var i=0;i<4;i++){
			if(onep[i]>twop[i])
				return 1;
			else if(onep[i]<twop[i])
				return -1;
		}
		return 0;
	}
	function IPdifference(IP1,IP2){
		var onep=IPtoNumber(IP1);
		var twop=IPtoNumber(IP2);
		
		var result=0;
		for(var i=0;i<4;i++){
			result*=256;
			result+=onep[i]-twop[i];
		}
		return result;
	}
	function FindZoneIndexDenySrc(Offset,indexes,realIPpairsDeny,realIPpairsPermit){
		
		var startDeny=[];
		var startPermit=[];
		var endDeny=[];
		var endPermit=[];
		var newLength=0;
		StartEndOfIP(startDeny,endDeny,realIPpairsDeny);
		var innnerIndexes=[];
		for(var i=0;i<realIPpairsPermit.length;i++){
			startPermit=[];
			endPermit=[];
			innnerIndexes=[];
			StartEndOfIP(startPermit,endPermit,realIPpairsPermit[i]);
			if(compareIPs(startDeny,startPermit)>=0&&compareIPs(startDeny,endPermit)<=0){
				Offset.push(IPdifference(startDeny,startPermit));
				newLength+=IPdifference(endPermit,startDeny)+1;
				
				while(i<realIPpairsPermit.length&&compareIPs(endDeny,startPermit)>=0){
					startPermit=[];
					endPermit=[];
					innnerIndexes.push(i);
					
					i++;
					if(i<realIPpairsPermit.length){
						StartEndOfIP(startPermit,endPermit,realIPpairsPermit[i]);
						newLength+=IPdifference(endPermit,startPermit)+1;
					}
				}
				if(i!=realIPpairsPermit.length){
					newLength-=IPdifference(endPermit,startPermit)+1;
				}
				indexes.push(innnerIndexes);
				return newLength;
			}
		}
	}
	function PlotDenySrcPartsEachPort(realIPpairsDenySrc,allPairs,table,permitDstStarts,permitDstLengths,permitSrcStarts,permitSrcLengths,realIPpairsPermitSrc,realIPpairsPermitDst){
		var rightOffset=[];
		var downOffset=[];
		var indexes=[];
		var tempString="";
		for(var i=0;i<allPairs.length;i++){
			rightOffset=[];
			downOffset=[];
			DstIndexes=[];
			SrcIndexes=[];
			FindZoneIndex(0,rightOffset,DstIndexes,allPairs[i].dst.start,allPairs[i].dst.length,permitDstStarts,permitDstLengths,realIPpairsPermitDst);
			var newLength=FindZoneIndexDenySrc(downOffset,SrcIndexes,realIPpairsDenySrc[i].Srcs[0],realIPpairsPermitSrc);
			colorCellsBoth(realIPpairsDenySrc[i],table,rightOffset,DstIndexes,downOffset,SrcIndexes,allPairs[i].dst.length,allPairs[i].Srcs.length,permitSrcStarts,newLength);
		}
	}
	function findBoundariesDenySrc(boundaries,string){
		var counter=1;
		for(var i=1;i<string.length;i++){
			if(string.charAt(i)=='[')
				counter++;
			else if(string.charAt(i)==']')
				counter--;
			if(counter==0){
				boundaries.push(i+1);
				i+=3;
				counter=1;
			}
		}
	}
	function onePairSplitDenySrc(realIPpairsDenySrc,string){		
		var currentGroupID=new pairDenySrc();
		var Innersplitted=string.split(/:\s\[/);	
		if(Innersplitted[0].indexOf("{")!=-1)
			Innersplitted[0]=Innersplitted[0].split("{")[1];
		var boundaries=[];
		findBoundariesDenySrc(boundaries,Innersplitted[1]);
		var string="";
		var start=0;
		currentGroupID.Srcs=new Array();
		currentGroupID.dst=new Array();
		for(var i=0;i<boundaries.length;i++){
			currentGroupID.dst.push(Innersplitted[1].substring(start,boundaries[i]));
			start+=boundaries[i]+2;
			currentGroupID.Srcs.push(Innersplitted[0]);
			string+="src:"+currentGroupID.Srcs[currentGroupID.Srcs.length-1]+" dst: "+currentGroupID.dst[currentGroupID.dst.length-1]+"\n";
		}
		realIPpairsDenySrc.push(currentGroupID);
	} 
	function setRealIPpairsDenySrc(realIPpairsDenySrc,deny_src){
		if(deny_src.indexOf("]")==-1)
			return;
		var splitted=deny_src.split(/],\s\(/);
		for(var i=0;i<splitted.length;i++){
			onePairSplitDenySrc(realIPpairsDenySrc,splitted[i]);
		}
	}
	function Pair(firstt,secondd){
		this.first=firstt;
		this.second=secondd;
	}
	function createSelectOption(s1,num){
		if(num==0){
			var select1=document.getElementById("pairsSelect1");
			var x1 = document.createElement("OPTION");
			x1.text=s1;
			select1.options.add(x1);
		}
		else{
			var select2=document.getElementById("pairsSelect2");
			var x2 = document.createElement("OPTION");
			x2.text=s1;
			select2.options.add(x2);
		}
	}
	function findPairs(currentString){
		var portPairs=[];
		var splittedGroups=currentString.split(/,\s/);
		for(var i=0;i<splittedGroups.length;i++){
			currentString=splittedGroups[i];
			currentString=currentString.substring(1,currentString.length-1);
			currentString=currentString.split(/-/);
			portPairs.push(new Pair(currentString[0],currentString[1]));
			if(portPairsFirst.indexOf(currentString[0])==-1){
				portPairsFirst.push(currentString[0]);
				createSelectOption(currentString[0],0);
			}
			if(portPairsSecond.indexOf(currentString[1])==-1){
				portPairsSecond.push(currentString[1]);
				createSelectOption(currentString[1],1);
			}
		}
	}
	function createDropDownList(groups){
		var select1=document.getElementById("pairsSelect1");
		var x1 = document.createElement("OPTION");
		x1.text="choose first port of pair";
		select1.options.add(x1);
		var select2=document.getElementById("pairsSelect2");
		var x2 = document.createElement("OPTION");
		x2.text="choose second port of pair";
		select2.options.add(x2);
		var splittedGroups=groups.split(/\[/);
		var currentString="";
		for(var i=1;i<splittedGroups.length;i++){
			currentString=splittedGroups[i].split(/]/)[0];
			findPairs(currentString);
		}
	}
	function findGroupPairIndex(index1,index2,currentPair){
		var saveIndex=-1;
		var index=groups.indexOf("'"+portPairsFirst[index1]+"-"+portPairsSecond[index2]+"'");
		if(index==-1)
			return null;
		while(index>=0&&groups[index]!="["){
			index--;
		}
		index--;
		while(index>=0&&groups[index]!=","){
			if(groups[index]==":")
				saveIndex=index;
			index--;
		}
		index++;
		while(groups[index]==" "){
			index++;
		}
		var pair=new Pair((portPairsFirst[index1]).toString(),(portPairsSecond[index2]).toString());
		currentPair.push(pair);
		return (groups.substring(index,saveIndex));
	}
	function find_all_permit_dst_IPs_T(groupNumber){
		var index=all_permit_dsts_T.indexOf(" "+groupNumber+":");
		if(index==-1){
			index=all_permit_dsts_T.indexOf("{"+groupNumber+":");
		}
		if(index==-1){ 
			alert("group number: "+groupNumber+" isn't found");
			return null;
		}
		var NextIndex=all_permit_dsts_T.indexOf(" "+(groupNumber+1)+":");
		if(NextIndex==-1){
			NextIndex=all_permit_dsts_T.indexOf("{"+(groupNumber+1)+":");
		}
		if(NextIndex!=-1)
			return all_permit_dsts_T.substring(index+4,NextIndex);
		return all_permit_dsts_T.substring(index+4,all_permit_dsts_T.length);
	}
	function find_all_IPs(pairPort,array,DstScr){
		var lastIndex;
		if(DstScr)
			lastIndex=array.indexOf("'"+pairPort+"'")+pairPort.length+1;
		else{
			lastIndex=array.indexOf("'"+pairPort.first+"-"+pairPort.second+"'")+pairPort.first.length+pairPort.second.length+1;
		}
		if(lastIndex==-1){
			alert("source port: "+pairPort+" isn't found");
			return null;
		}
		var index=array.substring(lastIndex+2,array.length).indexOf("'");
		if(index!=-1){
			index+=+lastIndex+1;
			return array.substring(lastIndex+3,index-1);
		}
		return array.substring(lastIndex+2,array.length);
	}
	function find_all_deny(pairPort,array){
		var lastIndex=array.indexOf("'"+pairPort.first+"-"+pairPort.second+"'")+pairPort.first.length+pairPort.second.length+1;
		if(lastIndex==-1){
			alert("pair port:'"+pairPort.first+"-"+pairPort.second+"' isn't found");
			return null;
		}
		var index=array.substring(lastIndex+2,array.length).indexOf("'");
		if(index!=-1){
			index+=+lastIndex+1;
			return array.substring(lastIndex+3,index-1);
		}
		return array.substring(lastIndex+2,array.length); 
	}
	function setRealIPpairsPermit(realIPpairsPermitSrc,array){
		if(array.indexOf("[")==-1)
			return;
		var start=array.substring(array.indexOf("[")+1,array.length).indexOf("[")+array.indexOf("[")+1;
		var counter=1;
		for(var i=start+1;i<array.length;i++){
			if(array.charAt(i)=="[")
				counter++;
			else if(array.charAt(i)=="]")
				counter--;
			if(counter==0){
				realIPpairsPermitSrc.push(array.substring(start,i+1));
				counter=1;
				start=i+3;
				i+=3;	
			}
		}
	}
	function iPtoEqualNumberToCompare(string){
		var splitted=string.split(",");
		var result="";
		for(var i=0;i<4;i++){
			var cur=splitted[i];
			if(cur.charAt(0)==" "){
				cur=cur.substring(1,cur.length);
			}
			
			if(cur.length==1){
				cur="00"+cur;
			}
			else if(cur.length==2){
				cur="0"+cur;
			}
			result=result+cur;
		}
		return (parseInt(result));
	}
	function sortIPs(array,sorted){
		var start=[];
		var end=[];
		var helper=[];
		for(var i=0;i<array.length;i++){
			StartEndOfIP(start,end,array[i]);
			helper.push(iPtoEqualNumberToCompare(start.pop()));
		}
	}
	function compareIPsVals(a,b){
		for(var i=0;i<a.length;i++){
			if(a[i]>b[i])
				return 1;
			else if(a[i]<b[i])
				return -1;
		}
		return 0;
	}
	function SortIPfunctionHelper(a,b){
		var astart=[];
		var bstart=[];
		var end=[];
		var helper=[];
		StartEndOfIP(astart,end,a);
		StartEndOfIP(bstart,end,b);
		var aval=iPtoEqualNumberToCompare(astart.pop());
		var bval=iPtoEqualNumberToCompare(bstart.pop());
		var result;
		result=compareIPsVals(aval.toString(),bval.toString());
		return result;
	}
	function inputTsort(starts,lengths){
		var helper=starts.slice(0);
		helper.sort(function (a,b){
			var ap=parseFloat(a);
			var bp=parseFloat(b);
			if(ap>bp)
				return 1;
			if(ap<bp)
				return -1;
			return 0;	
		});
		var helperLengths=new Array();
		var indexHelper=-1;
		for(var cou=0;cou<starts.length;cou++){
			indexHelper=helper.indexOf(starts[cou]);
			helperLengths[indexHelper]=lengths[cou];
		}
		return helperLengths;
	}
	//TODO
	function find_deny_dst_real(denyDstStarts,denyDstLengths,realIPpairsPermitSrc,realIPpairsPermitDst,permitDstStarts,permitDstLengths){
		var startSrc=[];
		var startDst=[];
		var endSrc=[];
		var endDst=[];
		StartEndOfIP(startSrc,endSrc,realIPpairsPermitSrc[i]);
		StartEndOfIP(startDst,endDst,realIPpairsPermitDst[j]);
		var curstart;
		var curlength;
		var counter=0;
		for(var i=0;i<denyDstLengths.length;i++){
			curstart=denyDstStarts[i];
			curlength=denyDstLengths[i];
			while(permitDstStarts[counter]<curstart&&permitDstStarts[counter]+permitDstLengths[counter]>curstart){
				
			}
		}
	}
	function textfillLeft (obj) {
	        var fontSize = 35;
	        var parent = ((obj).parentNode).parentNode;
	        var right=((obj).parentNode);
	        for (var i = 0; i < right.childNodes.length; i++) {
	            if (right.childNodes[i].className == "innerDivRightamoodi"||right.childNodes[i].className == "innerDivRightofoghi") {
	            	right = right.childNodes[i];
	            	break;
	            }        
	        }
	        var maxHeight = PxToInt((parent).style.height);
	        var maxWidth = PxToInt((parent).style.width);
	        var textHeight;
	        var textWidth;
	        do {
	        	obj.style.fontSize =fontSize.toString()+"px";
	        	textHeight = PxToInt(obj.style.height);
	            textWidth =  PxToInt(obj.style.width);
	            fontSize = fontSize - 1;
	        } while ((textWidth >maxHeight|| textHeight >maxWidth/3)&& fontSize > 1);
	        fontSize = fontSize + 1;
	        right.style.fontSize=fontSize.toString()+"px";
	}
	function textfillDown (obj) {
	        var fontSize =35;
	        var parent = ((obj).parentNode).parentNode;
	        var Up=(obj).parentNode;
	        for (var i = 0; i < Up.childNodes.length; i++) {
	            if (Up.childNodes[i].className == "innerDivUp") {
	            	Up = Up.childNodes[i];
	            	break;
	            }        
	        }
	        var maxHeight = PxToInt((parent).style.height);
	        var maxWidth = PxToInt((parent).style.width);
	        var textHeight;
	        var textWidth;
	        do {
	        	obj.style.fontSize=fontSize+"px";
	        	textHeight = PxToInt(obj.style.height);
	            textWidth =  PxToInt(obj.style.width);
	            if(textHeight==null||textHeight==undefined||isNaN(textHeight)){
	            	alert("went in");
	            	textHeight =  PxToInt(parent.offsetHeight);
	            	textWidth =  PxToInt(parent.offsetWidth);
	            }
	            fontSize = fontSize - 1;
	            alert("pause "+textWidth+" "+maxWidth+"\n"+textHeight+" "+maxHeight);
	        } while ((textWidth >maxWidth|| textHeight >maxHeight/3)&& fontSize > 1);
	        fontSize = fontSize + 1;
	        Up.style.fontSize=fontSize+"px";
	}
	function findPairBracket(string,index){
		var i=1;
		for(var j=index;j<string.length;j++){
			if(string[j]=="[")
				i++;
			else if(string[j]=="]")
				i--;
			if(i==0)
				return j;
		}
	}
	function splitFourInTCP(acceptDeny,string,portIPsStarts,portIPsLengths,permitDstsStarts,permitDstsLengths){
		var index=1;
		var next;
		var substring=[];
		for(var i=0;i<4;i++){
			if(string.charAt(index)=="["){
				next=findPairBracket(string,index+1);
				substring.push(string.substring(index+1,next));
				index=string.indexOf(",",next+1)+1;
			}
			else{
				if(string.charAt(index)=="x"){
					index+=2;
					substring.push("x");
				}
				else{
					if(i!=3){
						next=string.indexOf(",",index);
					}
					else{
						next=string.indexOf("]",index);
					}
					substring.push(string.substring(index,next));
					index=next+1;
				}
			}
		}
		var SrcStart=[];
		var SrcLength=[];
		var srcIndex=[];
		var rightOffset=[];
		var dstIndex=[];
		var downOffset=[];
		var srcWholeLength=[];
		var dstWholeLength=[];
		var pair=[];
		var realStartSrc=[];
		var realStartDst=[];
		var realEndSrc=[];
		var realEndDst=[];
		pair.push(substring[2]);
		pair.push(substring[3]);
		addIfNewTCPportsState(pair,substring[0],substring[1]);
		if(substring[0]!="x"){
			setStartLengthsTCPsubstring(SrcStart,SrcLength,substring[0]);
			findTCPStartInRealIPs(srcIndex,downOffset,srcWholeLength,SrcStart[0],SrcLength[0],portIPsStarts,portIPsLengths,realStartSrc,realEndSrc);
		}
		var dstStart=[];
		var dstLength=[];
		wholeLength=[];
		if(substring[1]!="x"){
			setStartLengthsTCPsubstring(dstStart,dstLength,substring[1]);
			findTCPStartInRealIPs(dstIndex,rightOffset,dstWholeLength,dstStart[0],dstLength[0],permitDstsStarts,permitDstsLengths,realStartDst,realEndDst);
		}
		if(substring[2]=="x"){
			substring[2]="all";
		}
		if(substring[3]=="x"){
			substring[3]="all";
		}
		if(substring[0]!="x"){
			if(srcIndex.length==0)
				return;
		}
		if(substring[1]!="x"){
			if(dstIndex.length==0)
				return;
		}
		GeneralTCPplot(acceptDeny,srcIndex,downOffset,srcWholeLength,dstIndex,rightOffset,dstWholeLength,portIPsStarts,portIPsLengths,permitDstsStarts,permitDstsLengths,substring[2],substring[3],realStartSrc,realEndSrc,realStartDst,realEndDst);
	}
	function findTCPStartInRealIPs(index,offset,wholeLength,start,length4,starts,lengths,realStart,realEnd){
		var splStart=start.split(".");
		for(var i=0;i<starts.length;i++){
			var IP=starts[i].split(".");
			var length=lengths[i];
			var offsetCal=0;
			var callength=1;
			for(var j=0;j<4;j++){
				
				if(!(((parseInt(IP[j])+parseInt(length[j]))>=(parseInt(splStart[j])))&&(parseInt(splStart[j])>=parseInt(IP[j]))))
					break;
				
//				if ((((parseInt(IP[j])+parseInt(length[j]))>=(parseInt(splStart[j])))&&(parseInt(splStart[j])>parseInt(IP[j])))){
//					j=4;
//					break;
//				}
			}
			if(j==4){
				var valhelper=[];
				var startHelper="";
				var endHelper="";
				for(var j=0;j<4;j++){
					startHelper+=(Math.max(parseInt(splStart[j]),parseInt(IP[j]))).toString();
					valhelper.push(Math.min((parseInt(splStart[j])+parseInt(length4[j])),(parseInt(IP[j])+parseInt(length[j]))));
					endHelper+=Math.min((parseInt(splStart[j])+parseInt(length4[j])),(parseInt(IP[j])+parseInt(length[j]))).toString();
					if(j!=3){
						startHelper+=".";
						endHelper+=".";
					}
					valhelper[j]-=Math.max(parseInt(splStart[j]),parseInt(IP[j]));
					valhelper[j]+=1;
					callength*=valhelper[j];
					offsetCal*=256;
					offsetCal+=parseInt(splStart[j])-parseInt(IP[j]);
				}
				realEnd.push(endHelper);
				realStart.push(startHelper);
				index.push(i);
				offset.push(offsetCal);
				wholeLength.push(callength);
				return;
			}
		}
	}
	function setStartLengthsRealIPs(starts,lengths,pairs){
		for(var i=0;i<pairs.length;i++){
			var SrcStart="";
			var SrcLength=[];
			var string=pairs[i].substring(1,pairs[i].length);
			while(true){
				var bracIndex=string.indexOf("[");
				var colonIndex=string.indexOf(",");
				if(bracIndex==-1&&colonIndex==-1){
					if(string.length>0){
						SrcStart+=string.substring(0,string.length-1)+".";
						SrcLength.push(0);
					}
					break;
				}
				if(bracIndex!=-1&&bracIndex<colonIndex){
					var start=string.substring(bracIndex+1,string.indexOf(", ",bracIndex));
					var length=parseInt(string.substring(string.indexOf(",",bracIndex)+1,string.indexOf("]",bracIndex)))-parseInt(start)+1;
					SrcStart+=start+".";
					SrcLength.push(length-1);
					string=string.substring(string.indexOf("]",bracIndex)+2,string.length);
				}
				else{
					SrcStart+=string.substring(0,colonIndex)+".";
					string=string.substring(colonIndex+2,string.length);
					SrcLength.push(0);
				}
			}
			SrcStart=SrcStart.substring(0,SrcStart.length-1);
			starts.push(SrcStart);
			lengths.push(SrcLength);
		}
	}
	function setStartLengthsTCPsubstring(startWhole,lengthWhole,string){
		var SrcStart="";
		var SrcLength=[];
		while(true){
			var bracIndex=string.indexOf("[");
			var dotIndex=string.indexOf(".");
			if(bracIndex==-1&&dotIndex==-1){
				if(string.length>0){
					SrcStart+=string+".";
					SrcLength.push(0);
				}
				break;
			}
			if(bracIndex!=-1&&bracIndex<dotIndex){
				var start=string.substring(bracIndex+1,string.indexOf("."));
				var length=parseInt(string.substring(string.indexOf(".")+1,string.indexOf("]")))-parseInt(start)+1;
				SrcStart+=start+".";
				SrcLength.push(length-1);
				string=string.substring(string.indexOf("]")+2,string.length);
			}
			else{
				SrcStart+=string.substring(0,dotIndex)+".";
				SrcLength.push(0);
				string=string.substring(dotIndex+1,string.length);
			}
		}
		SrcStart=SrcStart.substring(0,SrcStart.length-1);
		startWhole.push(SrcStart);
		lengthWhole.push(SrcLength);
	}
	function addIfNewTCPportsState(pair,s1,s2){
		for(var i=0;i<allTCPportStates.length;i++){
			var pairComp=allTCPportStates[i];
			if ((pair[0]==pairComp[0]&&pair[1]==pairComp[1])){
				return;
			}
		}
		allTCPportStates.push(pair);
		allTCPportSrc.push(s1);
		allTCPportDst.push(s2);
	}
	function GeneralTCPplot(acceptDeny,srcIndex,downOffset,srcWholeLength,dstIndex,rightOffset,dstWholeLength,portIPsStarts,portIPsLengths,permitDstsStarts,permitDstsLengths,srcTCPport,dstTCPport,realStartSrc,realEndSrc,realStartDst,realEndDst){
		if(srcIndex.length==0&&dstIndex.length==0){
			return;
		}
		else if(srcIndex.length==0)
			plotTCP_allSrc(acceptDeny,dstIndex,rightOffset,dstWholeLength,portIPsStarts,portIPsLengths,permitDstsStarts,permitDstsLengths,srcTCPport,dstTCPport,realStartDst,realEndDst);
		else if(dstIndex.length==0)
			plotTCP_allDst(acceptDeny,srcIndex,downOffset,srcWholeLength,portIPsStarts,portIPsLengths,permitDstsStarts,permitDstsLengths,srcTCPport,dstTCPport,realStartSrc,realEndSrc);
		else
			plotTCP_bothSrcDst(acceptDeny,srcIndex,downOffset,srcWholeLength,dstIndex,rightOffset,dstWholeLength,portIPsStarts,portIPsLengths,permitDstsStarts,permitDstsLengths,srcTCPport,dstTCPport,realStartSrc,realEndSrc,realStartDst,realEndDst);
	}
	function plotTCP_allSrc(acceptDeny,dstIndex,rightOffset,dstWholeLength,portIPsStarts,portIPsLengths,permitDstsStarts,permitDstsLengths,srcTCPport,dstTCPport,realStartDst,realEndDst){
		for(var i=0;i<portIPsStarts.length;i++){
			var TCPpart;
			var wrapperInner=wrapper[portIPsStarts.length-1-i][dstIndex];
			TCPpart=document.createElement("DIV");
			if(wrapperInner.MyWidth/WidthScale>widthLimit){
				TCPpart.style.left=(rightOffset/WidthScale).toString()+"px";
				TCPpart.style.width=(dstWholeLength/WidthScale).toString()+"px";
			}
			else{
				TCPpart.style.left=(rightOffset*widthLimit/(WidthScale*(wrapperInner.MyWidth/WidthScale))).toString()+"px";
				TCPpart.style.width=(dstWholeLength*widthLimit/(WidthScale*(wrapperInner.MyWidth/WidthScale))).toString()+"px";
			}
			TCPpart.style.borderWidth ="1px 1px 1px 1px";
			TCPpart.style.borderColor="black";
			TCPpart.style.margin ="0px 0px 0px 0px";
			var color=[];
			chooseTCPpermitColor(acceptDeny,color,srcTCPport,dstTCPport);
			TCPpart.style.backgroundColor=color;
			TCPpart.style.bottom ="0px";
			TCPpart.style.top="0px";
			TCPpart.style.height=wrapperInner.style.height;
			TCPpart.style.position="absolute";
			TCPpart.style.zIndex="7";
			TCPpart.leftOffset=parseInt(rightOffset);
			TCPpart.downOffset=0;
			TCPpart.MyWidth=parseInt(dstWholeLength);
			TCPpart.MyHeight=parseInt(wrapperInner.MyHeight);
			var realStartSrc=[];
			var realEndSrc=[];			
			StartEndOfIP(realStartSrc,realEndSrc,wrapperInner.realIPpairsPermitSrc);
			TCPpart.className="DenyPart";
			if((PxToInt(TCPpart.style.height)/PxToInt(TCPpart.style.width)>minLimit||
					PxToInt(TCPpart.style.height)/PxToInt(TCPpart.style.width)<1/minLimit)&&
					(PxToInt(TCPpart.style.height)>maxLimit&&PxToInt(TCPpart.style.width)>maxLimit)){
				splitDivToMultipleDivsTCPForm("8",color,TCPpart,minLimit,PxToInt(TCPpart.style.height),PxToInt(TCPpart.style.width),wrapperInner.MyHeight,dstWholeLength,realStartSrc,realEndSrc,realStartDst,realEndDst);
			}
			else{
				if((PxToInt(TCPpart.style.width)>maxLimit&&PxToInt(TCPpart.style.height)>maxLimit))
					write4sides(false,"8",TCPpart,realStartSrc,realEndSrc,realStartDst,realEndDst);
				TCPpart.title="Permit TCP zone \n source IP Zone : "+wrapperInner.realIPpairsPermitSrc+"\n destination IP Zone : "+realStartDst+" - "+realEndDst;
				TCPpart.title+="\n source TCP Zone : "+srcTCPport+"\n destination TCP Zone : "+dstTCPport;
			}
			
			TCPpart.startSrc=realStartSrc;
			TCPpart.startDst=realStartDst;
			TCPpart.endSrc=realEndSrc;
			TCPpart.endDst=realEndDst;
			wrapperInner.appendChild(TCPpart);
		}
	}
	function plotTCP_allDst(acceptDeny,srcIndex,downOffset,srcWholeLength,portIPsStarts,portIPsLengths,permitDstsStarts,permitDstsLengths,srcTCPport,dstTCPport,realStartSrc,realEndSrc){
		for(var i=0;i<permitDstsLengths.length;i++){
			var TCPpart;
			var wrapperInner=wrapper[portIPsStarts.length-1-srcIndex][i];
			TCPpart=document.createElement("DIV");
			if(wrapperInner.MyHeight/heightScale>heightLimit){
				
				TCPpart.style.bottom =(downOffset/heightScale).toString()+"px";
				TCPpart.style.height=(srcWholeLength/heightScale).toString()+"px";
			}
			else{
				TCPpart.style.bottom=(downOffset*heightLimit/(heightScale*(wrapperInner.MyHeight/heightScale))).toString()+"px";
				TCPpart.style.height=(srcWholeLength*heightLimit/(heightScale*(wrapperInner.MyHeight/heightScale))).toString()+"px";
			}
			TCPpart.leftOffset=0;
			TCPpart.downOffset=parseInt(downOffset);
			TCPpart.MyWidth=parseInt(wrapperInner.MyWidth);
			TCPpart.MyHeight=parseInt(srcWholeLength);
			
			TCPpart.style.borderWidth ="1px 1px 1px 1px";
			TCPpart.style.borderColor="black";
			TCPpart.style.margin ="0px 0px 0px 0px";
			var color=[];
			chooseTCPpermitColor(acceptDeny,color,srcTCPport,dstTCPport);
			TCPpart.style.backgroundColor=color;
			TCPpart.style.left="0px";
			TCPpart.style.right="0px";
			TCPpart.style.width=wrapperInner.style.width;
			TCPpart.style.position="absolute";
			TCPpart.style.zIndex="7";
			var realStartDst=[];
			var realEndDst=[];
			StartEndOfIP(realStartDst,realEndDst,wrapperInner.realIPpairsPermitDst);
			TCPpart.className="DenyPart";
			
			if((PxToInt(TCPpart.style.height)/PxToInt(TCPpart.style.width)>minLimit||
					PxToInt(TCPpart.style.height)/PxToInt(TCPpart.style.width)<1/minLimit)&&
					(PxToInt(TCPpart.style.height)>maxLimit&&PxToInt(TCPpart.style.width)>maxLimit)){
				splitDivToMultipleDivsTCPForm("8",color,TCPpart,minLimit,PxToInt(TCPpart.style.height),PxToInt(TCPpart.style.width),srcWholeLength,wrapperInner.MyWidth,realStartSrc,realEndSrc,realStartDst,realEndDst);
				
			}
			else{	
				if((PxToInt(TCPpart.style.height)>maxLimit&&PxToInt(TCPpart.style.width)>maxLimit))
					write4sides(false,"8",TCPpart,realStartSrc,realEndSrc,realStartDst,realEndDst);
				TCPpart.title="Permit TCP zone \n source IP Zone : "+realStartSrc +" - "+ realEndSrc+"\n destination IP Zone : "+wrapperInner.realIPpairsPermitDst;
				TCPpart.title+="\n source TCP Zone : "+srcTCPport+"\n destination TCP Zone : "+dstTCPport;
			}
			TCPpart.startSrc=realStartSrc;
			TCPpart.startDst=realStartDst;
			TCPpart.endSrc=realEndSrc;
			TCPpart.endDst=realEndDst;
			wrapperInner.appendChild(TCPpart);
		}
	}
	function plotTCP_bothSrcDst(acceptDeny,srcIndex,downOffset,srcWholeLength,dstIndex,rightOffset,dstWholeLength,portIPsStarts,portIPsLengths,permitDstsStarts,permitDstsLengths,srcTCPport,dstTCPport,realStartSrc,realEndSrc,realStartDst,realEndDst){
		var TCPpart;
		var wrapperInner=wrapper[portIPsStarts.length-1-srcIndex][dstIndex];
		TCPpart=document.createElement("DIV");
		if(wrapperInner.MyHeight/heightScale>heightLimit){
			TCPpart.style.bottom =(downOffset/heightScale).toString()+"px";
			TCPpart.style.height=(srcWholeLength/heightScale).toString()+"px";
		}
		else{
			TCPpart.style.bottom=(downOffset*heightLimit/(heightScale*(wrapperInner.MyHeight/heightScale))).toString()+"px";
			TCPpart.style.height=(srcWholeLength*heightLimit/(heightScale*(wrapperInner.MyHeight/heightScale))).toString()+"px";
		}
		if(wrapperInner.MyWidth/WidthScale>widthLimit){
			TCPpart.style.left=(rightOffset/WidthScale).toString()+"px";
			TCPpart.style.width=(dstWholeLength/WidthScale).toString()+"px";
		}
		else{
			TCPpart.style.left=(rightOffset*widthLimit/(WidthScale*(wrapperInner.MyWidth/WidthScale))).toString()+"px";
			TCPpart.style.width=(dstWholeLength*widthLimit/(WidthScale*(wrapperInner.MyWidth/WidthScale))).toString()+"px";
		}
		TCPpart.leftOffset=parseInt(rightOffset);
		TCPpart.downOffset=parseInt(downOffset);
		TCPpart.MyWidth=parseInt(dstWholeLength);
		TCPpart.MyHeight=parseInt(srcWholeLength);
		TCPpart.style.borderWidth ="1px 1px 1px 1px";
		TCPpart.style.borderColor="black";
		TCPpart.style.margin ="0px 0px 0px 0px";
		var color=[];
		chooseTCPpermitColor(acceptDeny,color,srcTCPport,dstTCPport);
		TCPpart.style.backgroundColor=color;
		TCPpart.style.position="absolute";
		TCPpart.style.zIndex="7";
		TCPpart.className="DenyPart";
		if((PxToInt(TCPpart.style.height)/PxToInt(TCPpart.style.width)>minLimit||
				PxToInt(TCPpart.style.height)/PxToInt(TCPpart.style.width)<1/minLimit)&&
				(PxToInt(TCPpart.style.height)>maxLimit&&PxToInt(TCPpart.style.width)>maxLimit)){
			splitDivToMultipleDivsTCPForm("8",color,TCPpart,minLimit,PxToInt(TCPpart.style.height),PxToInt(TCPpart.style.width),srcWholeLength,dstWholeLength,realStartSrc,realEndSrc,realStartDst,realEndDst);
		}
		else{	
			if((PxToInt(TCPpart.style.height)>maxLimit&&PxToInt(TCPpart.style.width)>maxLimit))
				write4sides(false,"8",TCPpart,realStartSrc,realEndSrc,realStartDst,realEndDst);
			TCPpart.title="Permit TCP zone \n source IP Zone : "+realStartSrc +" - "+ realEndSrc+"\n destination IP Zone : "+realStartDst +" - "+  realEndDst;
			TCPpart.title+="\n source TCP Zone : "+srcTCPport+"\n destination TCP Zone : "+dstTCPport;
		}
		TCPpart.startSrc=realStartSrc;
		TCPpart.startDst=realStartDst;
		TCPpart.endSrc=realEndSrc;
		TCPpart.endDst=realEndDst;
		wrapperInner.appendChild(TCPpart);
	}
	function chooseTCPpermitColor(acceptDeny,color,srcTCPport,dstTCPport){
		for(var i=0;i<allTCPportStates.length;i++){
			var pairComp=allTCPportStates[i];
			if ((srcTCPport==pairComp[0]&&dstTCPport==pairComp[1])){
				color.push(allColors[i]);
				TCPcolorAcceptDeny[i]=acceptDeny;
				return;
			}
		}
		alert("srcTCPport "+srcTCPport+" dstTCPport "+dstTCPport+" isn't found");
	}
	function showTCPInPlot(port_IPs,permit_dsts){
		var permitTCP=all_permitTCP;//TODO
		var denyTCP=all_denyTCP;//TODO
		var i=0;
		var portIPsStarts=[];
		var portIPsLengths=[];
		var permitDstsStarts=[];
		var permitDstsLengths=[];
		setStartLengthsRealIPs(portIPsStarts,portIPsLengths,realIPpairsPermitSrc);
		setStartLengthsRealIPs(permitDstsStarts,permitDstsLengths,realIPpairsPermitDst);
		while(i<permitTCP.length){
			i=permitTCP.indexOf("[", i);
			if(i==-1)
				break;
			var next=findPairBracket(permitTCP,i+1);
			splitFourInTCP(0,permitTCP.substring(i,next+1),portIPsStarts,portIPsLengths,permitDstsStarts,permitDstsLengths);
			i=next;
		}
		i=0;
		while(i<denyTCP.length){
			i=denyTCP.indexOf("[", i);
			if(i==-1)
				break;
			var next=findPairBracket(denyTCP,i+1);
			splitFourInTCP(1,denyTCP.substring(i,next+1),portIPsStarts,portIPsLengths,permitDstsStarts,permitDstsLengths);
			i=next;
		}
	}
	function buildSelect(){
		var select1=document.createElement("SELECT");
		select1.id="pairsSelect1";
		select1.className="selectStyle";
		var select2=document.createElement("SELECT");
		select2.id="pairsSelect2";
		select2.className="selectStyle";
		document.body.appendChild(select1);
		document.body.appendChild(select2);
		alert("select appended");
	}
	function onChangeSelectFunction(){
		
		var select1=document.getElementById("pairsSelect1");
		var select2=document.getElementById("pairsSelect2");
		var currentPair=[];
		if(select1.selectedIndex==0||select2.selectedIndex==0)
			return;
		if(document.getElementById("mainDiv")!=null){
			removeElemWithChildren(document.getElementById("mainDiv"));
			removeElemWithChildren(document.getElementById("colorTable"));
		}
		saveWholeTable=null;
		zoomOutDone=false;
		firstZoomIn=false;
		innerDivLeftCounter=0;
		allTCPportStates=[];
		allTCPportSrc=[];
		allTCPportDst=[];
		TCPcolorAcceptDeny=[];
		WidthScale=1/100;
		heightScale=10;
		wrapper=[];
		realIPpairsPermitSrc=[];
		realIPpairsPermitDst=[];
		positionTop=null;
		positionLeft=null;
		zoomOutDone=false;
		buildFundamentalHtmlPage();
//		alert(document.body.innerHTML);
		var mainDiv=document.getElementById("mainDiv");
		mainDiv.position="relative";
		mainDiv.style.left="0px";
		mainDiv.style.top="0px";
		var groupNumber=findGroupPairIndex(select1.selectedIndex-1,select2.selectedIndex-1,currentPair);
		ShowTableForPairPorts(currentPair.pop(),groupNumber);
//		saveWholeTable=(document.getElementById("mainDiv")).cloneNode(true);
}
	function read_file(pathURL){
		var txtFile = new XMLHttpRequest();
		var result;
		txtFile.open("GET", "https://www.dropbox.com/s/gz6h9dqzj7eg3l7/permit_dsts.txt?dl=0", true);
		txtFile.onreadystatechange = function() {
		  if (txtFile.readyState === 4) {  // Makes sure the document is ready to parse.
		    if (txtFile.status === 200 || txtFile.status == 0) {  // Makes sure it's found the file.
		    	result=txtFile.responseText; 
		    	alert("txtFile.status  "+ txtFile.status);
		    	alert("inner result"+result.toString());
		    }
		    else{
		    	alert("file isn't found");
		    }
		  }
		};
		txtFile.send(null);
		return result;
	}
	function initializeAllColorSet(){
		allColors.push("yellow");
		allColors.push("blue");
		allColors.push("#DEB887");
		allColors.push("#5F9EA0");
		allColors.push("#7FFF00");
		allColors.push("#D2691E");
		allColors.push("#FF7F50");
		allColors.push("#6495ED");
		allColors.push("#DC143C");
		allColors.push("#00FFFF");
		allColors.push("#00008B");
		allColors.push("#008B8B");
		//TODO http://www.w3schools.com/tags/ref_colornames.asp
	}
	function initializeGeneralProperties(){
		var style = document.createElement("STYLE");
		style.type = 'text/css';
		style.innerHTML = ".compZone { width:"+screen.width*0.98+"px; height:"+screen.height*0.8+"px; }";
		document.getElementsByTagName('head')[0].appendChild(style);
		initializeAllColorSet();
	}
	 function adjustTableDimensions(denyDstStarts,denyDstLengths,realIPpairsDenySrc,allPairs,table,permitDstStarts,permitDstLengths,permitSrcStarts,permitSrcLengths,realIPpairsPermitSrc,realIPpairsPermitDst){
		var wholeWidth=ArraySum(permitDstLengths)+leftHeaderWidth;
		var wholeHeight=ArraySum(permitSrcLengths)+upHeaderHeight;
		var mainDiv=document.getElementById("mainDiv");
		WidthScale=wholeWidth/(screen.width*0.9);//TODO
		heightScale=wholeHeight/(screen.height*0.6);
		var rightOffset=[];
		var downOffset=[];
		var DstIndexes=[];
		var SrcIndexes=[];
		var denyWidths=[];
		var denyHeights=[];
		var tempString="";
		for(var i=0;i<allPairs.length;i++){
				rightOffset=[];
				downOffset=[];
				DstIndexes=[];
				SrcIndexes=[];
				FindZoneIndex(0,rightOffset,DstIndexes,allPairs[i].dst.start,allPairs[i].dst.length,permitDstStarts,permitDstLengths,realIPpairsPermitDst);
				var newLength=FindZoneIndexDenySrc(downOffset,SrcIndexes,realIPpairsDenySrc[i].Srcs[0],realIPpairsPermitSrc);
				DetermineDenyLegthsInEachCell(denyWidths,denyHeights,realIPpairsDenySrc[i],table,rightOffset,DstIndexes,downOffset,SrcIndexes,allPairs[i].dst.length,allPairs[i].Srcs.length,permitSrcStarts,permitSrcLengths,permitDstLengths,newLength);
		}
		var DstIndexes=[];
		var rightOffset=[];
		FindZoneIndex(0,rightOffset,DstIndexes,denyDstStarts,denyDstLengths,permitDstStarts,permitDstLengths,realIPpairsPermitDst);
		DetermineDenyLegthsInEachDstCell(denyWidths,table,permitSrcStarts,DstIndexes,denyDstLengths,rightOffset,permitSrcLengths,permitDstLengths);
		var minWidth=Math.min.apply(Math, denyWidths);
		var minHeight=Math.min.apply(Math, denyHeights);
		WidthScale=minWidth;
		heightScale=minHeight;
	}
	 function ArraySum(array){
		 var result=0;
		 for(var i=0;i<array.length;i++){
			 result+=array[i];
		 }
		 return result;
	 }
	function createColorGuideTable(){
		var table=document.getElementById("colorTable");
		table.style.position="relative";
		var width =document.getElementById("mainBody").style.width;
		table.style.left=(PxToInt(width)+parseInt(leftHeaderWidth))+"px";
		var row;
		var cell1;
		var cell2;
		row=table.insertRow(0);
		cell1=row.insertCell(0);
		cell2=row.insertCell(1);
		cell1.textContent="srcTCPports-dstTCPports accept/deny";
		cell2.textContent="color";
		for(var i=0;i<allTCPportStates.length;i++){
			row=table.insertRow(i+1);
			cell1=row.insertCell(0);
			cell2=row.insertCell(1);
			cell2.style.width=20+"px";
			cell1.textContent=allTCPportStates[i][0]+"-"+allTCPportStates[i][1];
			
			if(TCPcolorAcceptDeny[i]==0)
				cell1.textContent+=" accept";
			else
				cell1.textContent+=" deny";
			if(allTCPportSrc[i]=="x"&&allTCPportDst[i]=="x"){
				cell2.style.backgroundColor="green";
			}
			else
				cell2.style.backgroundColor=allColors[i];
		}
	}
function ShowTableForPairPorts(pairPort,groupNumber){
		var tableBefore=document.getElementById("firstTable");
		if(tableBefore!=null){
			document.body.removeChild(tableBefore);
		}
		var table=document.createElement("TABLE");
		table.setAttribute("id", "firstTable");
		groupNumber=parseInt(groupNumber);
		var permit_dst_IPs_T=find_all_permit_dst_IPs_T(groupNumber);
		var permitDstStarts=[];
		var permitDstLengths=[];
		setStartLengths(permitDstStarts,permitDstLengths,permit_dst_IPs_T);
		var port_IPs_T=find_all_IPs(pairPort.first,all_port_IPs_T,true);
		var permitSrcStarts=[];
		var permitSrcLengths=[];
		setStartLengths(permitSrcStarts,permitSrcLengths,port_IPs_T);
		var port_IPs=find_all_IPs(pairPort.first,all_port_IPs,true);
		var permit_dsts=find_all_IPs(pairPort,all_permit_dsts,false);
		setRealIPpairsPermit(realIPpairsPermitSrc,port_IPs);
		setRealIPpairsPermit(realIPpairsPermitDst,permit_dsts);
		permitSrcLengths=inputTsort(permitSrcStarts,permitSrcLengths);
		permitDstLengths=inputTsort(permitDstStarts,permitDstLengths);
		permitSrcStarts.sort(function (a,b){
			var ap=parseFloat(a);
			var bp=parseFloat(b);
			if(ap>bp)
				return 1;
			if(ap<bp)
				return -1;
			return 0;	
		});
		
		permitDstStarts.sort(function (a,b){
			var ap=parseFloat(a);
			var bp=parseFloat(b);
			if(ap>bp)
				return 1;
			if(ap<bp)
				return -1;
			return 0;	
		});
		realIPpairsPermitSrc.sort(function (a,b){
			var astart=[];
			var bstart=[];
			var end=[];
			var helper=[];
			StartEndOfIP(astart,end,a);
			StartEndOfIP(bstart,end,b);
			var aval=iPtoEqualNumberToCompare(astart.pop());
			var bval=iPtoEqualNumberToCompare(bstart.pop());
			var result;
			result=compareIPsVals(aval.toString(),bval.toString());
			return result;
		});
		realIPpairsPermitDst.sort(function (a,b){
			var astart=[];
			var bstart=[];
			var end=[];
			var helper=[];
			StartEndOfIP(astart,end,a);
			StartEndOfIP(bstart,end,b);
			var aval=iPtoEqualNumberToCompare(astart.pop());
			var bval=iPtoEqualNumberToCompare(bstart.pop());
			var result;
			result=compareIPsVals(aval.toString(),bval.toString());
			return result;
		});
		var deny_src_T=find_all_deny(pairPort,all_deny_src_T);
		var deny_src=find_all_deny(pairPort,all_deny_src);
		
		var denySrcStarts=[];
		var denySrcLengths=[];
		var allPairs=[];
		var realIPpairsDenySrc=[];
		setStartLengthsDenySrc(allPairs,deny_src_T,permitDstStarts,permitDstLengths,permitSrcStarts,permitSrcLengths);
		setRealIPpairsDenySrc(realIPpairsDenySrc,deny_src);
		var deny_dst_T=find_all_deny(pairPort,all_deny_dst_T);
		var deny_dst=find_all_deny(pairPort,all_deny_dst);
		var denyDstStarts=[];
		var denyDstLengths=[];
		setStartLengths(denyDstStarts,denyDstLengths,deny_dst_T);//????????????????????????????????
		var realIPpairsDenyDst=[];
		adjustTableDimensions(denyDstStarts,denyDstLengths,realIPpairsDenySrc,allPairs,table,permitDstStarts,permitDstLengths,permitSrcStarts,permitSrcLengths,realIPpairsPermitSrc,realIPpairsPermitDst);
		PlotPermitTableEachPort(permitDstStarts,permitDstLengths,permitSrcStarts,permitSrcLengths,table,realIPpairsPermitSrc,realIPpairsPermitDst);
		PlotDenySrcPartsEachPort(realIPpairsDenySrc,allPairs,table,permitDstStarts,permitDstLengths,permitSrcStarts,permitSrcLengths,realIPpairsPermitSrc,realIPpairsPermitDst);
		PlotDenyDstPartsEachPort(permitSrcStarts,permitSrcLengths,permitDstStarts,permitDstLengths,denyDstStarts,denyDstLengths,table,realIPpairsDenySrc,realIPpairsPermitDst);
		// TCP part
		showTCPInPlot(port_IPs,permit_dsts);	

		createColorGuideTable();
		 $(".splitDIVamoodi").on('click', function() {
			 var $clicker = $(this);
		     var pos = $clicker.offset();
		     localDivZoomIn(pos.top,pos.left,this);
		});
		 $(".splitDIVofoghi").on('click', function() {
			 var $clicker = $(this);
		     var pos = $clicker.offset();
		     localDivZoomIn(pos.top,pos.left,this);
		});
		 $(".DenyPart").on('click', function() {
			 var $clicker = $(this);
		     var pos = $clicker.offset();
		     localDivZoomIn(pos.top,pos.left,this);
		});
		 $(".MyDiv").on('click', function() {
			 var $clicker = $(this);
		     var pos = $clicker.offset();
		     localDivZoomIn(pos.top,pos.left,this);
		});  
		
		$(document).ready(function(){
//		    $('.splitDIVamoodi').zoomTarget({targetsize:0.9,closeclick: true});
//		    $('.splitDIVofoghi').zoomTarget({targetsize:0.9,closeclick: true});
//		    $('.DenyPart').zoomTarget({targetsize:0.9,closeclick: true});
//		    $('.MyDiv').zoomTarget({targetsize:0.9,closeclick: true});
//		    $('.outerDiv').zoomTarget({targetsize:0.9,closeclick: true});
		  });
		
	}
(function($) {
    $.fn.DownTextfill = function() {
    	var obj=this;
//        var ourText = $('span:visible:first', this);
    	 var fontSize =35;
	        var parent = ($(obj).parent()).parent();
	        var Up=$(obj).parent();
	       for (var i = 0; i < Up.children().length; i++) {
				if ($(Up.children()[i]).attr('class')== "innerDivUpAfterZoom") {
	            	Up = Up.children()[i];
	            	break;
	            }        
	        }
//	       obj=($(this).children())[0];
//	       alert($(this).children().length);
//	       alert($(($(this).children())[0]).prop('tagName'));
//	       	alert("pause1");
//			$(Up).css('background-color', "red");
//			alert("pause2");
//			$(parent).css('background-color', "blue");
//			alert("pause3");
			obj=$('span:visible:first', this);
	        var maxHeight = ($(parent).height());
	        var maxWidth = ($(parent).width());
	        var textHeight;
	        var textWidth;
	        do {
	        	obj.css('font-size', fontSize);
	        	textHeight = ($(obj).height());
	            textWidth =  ($(obj).width());
//	            if(textHeight==null||textHeight==undefined||isNaN(textHeight)){
//	            	alert("went in");
//	            	textHeight =  PxToInt(parent.offsetHeight);
//	            	textWidth =  PxToInt(parent.offsetWidth);
//	            }
	            fontSize = fontSize - 1;
//	            alert("pause down "+textWidth+" "+maxWidth+"\n"+textHeight+" "+maxHeight);
	        } while ((textWidth >maxWidth/3|| textHeight >maxHeight/5)&& fontSize > 1);
	        fontSize = fontSize + 1;
	      $(Up).css('font-size', fontSize);
    }
})(jQuery);
(function($) {
    $.fn.LeftTextfill = function() {
       var obj=this;
//        var ourText = $('span:visible:first', this);
    	var fontSize = 35;
        var parent = ($(obj).parent()).parent();
        var right=($(obj).parent());
		for (var i = 0; i < right.children().length; i++) {
//        	alert("right class "+$(right.children()[i]).attr('class'));
//        	alert(($(right.children()[i]).attr('class') == "innerDivRightofoghi"));
            if (($(right.children()[i]).attr('class') == "innerDivRightamoodiAfterZoom")||
            		($(right.children()[i]).attr('class') == "innerDivRightofoghiAfterZoom")) {
            	right = right.children()[i];
            	break;
            }        
        }
//		alert("pause1");
//		$(obj).css('background-color', "red");
//		alert("pause2");
//		$(parent).css('background-color', "blue");
//		alert("pause3");
		obj=$('span:visible:first', this);
        var maxHeight = ($(parent).height());
        var maxWidth = ($(parent).width());
        var textHeight;
        var textWidth;
        do {
        	obj.css('font-size', fontSize);
        	textHeight = ($(obj).height());
            textWidth =  ($(obj).width());
            fontSize = fontSize - 1;
//            alert("pause left "+textWidth+" "+maxWidth+"\n"+textHeight+" "+maxHeight);
        } while ((textWidth >maxHeight/3|| textHeight >maxWidth/5)&& fontSize > 1);
//        alert("last");
        fontSize = fontSize + 1;
        $(right).css('font-size', fontSize);
//        alert("left finished");
    }
})(jQuery);